--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.7) ~  Much Love, Ferib 

]]--

local v0 = tonumber;
local v1 = string.byte;
local v2 = string.char;
local v3 = string.sub;
local v4 = string.gsub;
local v5 = string.rep;
local v6 = table.concat;
local v7 = table.insert;
local v8 = math.ldexp;
local v9 = getfenv or function()
	return _ENV;
end;
local v10 = setmetatable;
local v11 = pcall;
local v12 = select;
local v13 = unpack or table.unpack;
local v14 = tonumber;
local function v15(v16, v17, ...)
	local v18 = 1;
	local v19;
	v16 = v4(v3(v16, 5), "..", function(v30)
		if (v1(v30, 2) == 79) then
			v19 = v0(v3(v30, 1, 1));
			return "";
		else
			local v85 = v2(v0(v30, 16));
			if v19 then
				local v113 = v5(v85, v19);
				v19 = nil;
				return v113;
			else
				return v85;
			end
		end
	end);
	local function v20(v31, v32, v33)
		if v33 then
			local v86 = (v31 / ((5 - 3) ^ (v32 - 1))) % ((5 - 3) ^ (((v33 - (1 - 0)) - (v32 - (2 - 1))) + ((156 + 464) - (555 + 64))));
			return v86 - (v86 % 1);
		else
			local v87 = (933 - (857 + 12 + 62)) ^ (v32 - 1);
			return (((v31 % (v87 + v87)) >= v87) and (569 - (367 + 201))) or (927 - (214 + 713));
		end
	end
	local function v21()
		local v34 = v1(v16, v18, v18);
		v18 = v18 + 1;
		return v34;
	end
	local function v22()
		local v35, v36 = v1(v16, v18, v18 + (879 - (282 + 595)));
		v18 = v18 + (1639 - (1523 + 114));
		return (v36 * (231 + 25)) + v35;
	end
	local function v23()
		local v37, v38, v39, v40 = v1(v16, v18, v18 + (3 - 0));
		v18 = v18 + (1069 - (68 + 978 + 19));
		return (v40 * (16778486 - (51 + 175 + 1044))) + (v39 * (285370 - 219834)) + (v38 * (373 - (32 + 85))) + v37;
	end
	local function v24()
		local v41 = v23();
		local v42 = v23();
		local v43 = 958 - (892 + 65);
		local v44 = (v20(v42, 2 - 1, 36 - (1502 - (998 + 488))) * ((3 - (1 + 0)) ^ 32)) + v41;
		local v45 = v20(v42, 45 - 24, 6 + 25);
		local v46 = ((v20(v42, 382 - (87 + 263)) == (1 - 0)) and -(181 - (67 + 113))) or (1 + 0);
		if (v45 == (791 - (368 + 423))) then
			if (v44 == (0 - 0)) then
				return v46 * (0 + 0 + 0);
			else
				v45 = 3 - 2;
				v43 = 952 - ((1574 - (201 + 571)) + 150);
			end
		elseif (v45 == (5511 - 3464)) then
			return ((v44 == (1138 - (116 + 1022))) and (v46 * ((1 - 0) / (0 + (0 - 0))))) or (v46 * NaN);
		end
		return v8(v46, v45 - (2020 - (538 + 377 + (299 - 217)))) * (v43 + (v44 / (((1562 - 1122) - (145 + 293)) ^ (147 - 95))));
	end
	local function v25(v47)
		local v48;
		if not v47 then
			v47 = v23();
			if (v47 == (859 - (814 + 45))) then
				return "";
			end
		end
		v48 = v3(v16, v18, (v18 + v47) - (2 - 1));
		v18 = v18 + v47;
		local v49 = {};
		for v66 = 1 + 0, #v48 do
			v49[v66] = v2(v1(v3(v48, v66, v66)));
		end
		return v6(v49);
	end
	local v26 = v23;
	local function v27(...)
		return {...}, v12("#", ...);
	end
	local function v28()
		local v50 = (function()
			return function(v88, v89, v90, v91, v92, v93, v94, v95)
				local v88 = (function()
					return 0;
				end)();
				local v89 = (function()
					return;
				end)();
				local v90 = (function()
					return;
				end)();
				while true do
					if (v88 ~= #"\\") then
					else
						if (v89 == #"\\") then
							v90 = (function()
								return v91() ~= 0;
							end)();
						elseif (v89 == 2) then
							v90 = (function()
								return v92();
							end)();
						elseif (v89 == #"asd") then
							v90 = (function()
								return v93();
							end)();
						end
						v94[v95] = (function()
							return v90;
						end)();
						break;
					end
					if (v88 == (0 + 0)) then
						local v119 = (function()
							return 0;
						end)();
						while true do
							if (v119 ~= 0) then
							else
								v89 = (function()
									return v91();
								end)();
								v90 = (function()
									return nil;
								end)();
								v119 = (function()
									return 2 - 1;
								end)();
							end
							if (1 ~= v119) then
							else
								v88 = (function()
									return #",";
								end)();
								break;
							end
						end
					end
				end
				return v88, v89, v90, v91, v92, v93, v94, v95;
			end;
		end)();
		local v51 = (function()
			return function(v96, v97, v98, v99, v100, v101, v102, v103, v104)
				local v105 = (function()
					return 0;
				end)();
				local v96 = (function()
					return;
				end)();
				local v97 = (function()
					return;
				end)();
				while true do
					local v112 = (function()
						return 0 - 0;
					end)();
					while true do
						if ((0 - 0) == v112) then
							if (v105 == (2 - 1)) then
								local v123 = (function()
									return 0;
								end)();
								while true do
									if (v123 == 0) then
										while true do
											if (v96 ~= 0) then
											else
												v97 = (function()
													return v98();
												end)();
												if (v99(v97, #"~", #"}") ~= 0) then
												else
													local v127 = (function()
														return 0;
													end)();
													local v128 = (function()
														return;
													end)();
													local v129 = (function()
														return;
													end)();
													local v130 = (function()
														return;
													end)();
													local v131 = (function()
														return;
													end)();
													while true do
														if (v127 == (285 - (134 + 151))) then
															local v132 = (function()
																return 0;
															end)();
															while true do
																if (v132 == 0) then
																	v128 = (function()
																		return 1665 - (970 + 695);
																	end)();
																	v129 = (function()
																		return nil;
																	end)();
																	v132 = (function()
																		return 1 - 0;
																	end)();
																end
																if (v132 == 1) then
																	v127 = (function()
																		return 1991 - (582 + 1408);
																	end)();
																	break;
																end
															end
														end
														if (v127 == (3 - 2)) then
															local v133 = (function()
																return 0 - 0;
															end)();
															while true do
																if (v133 == (3 - 2)) then
																	v127 = (function()
																		return 1826 - (1195 + 629);
																	end)();
																	break;
																end
																if (v133 ~= (0 - 0)) then
																else
																	v130 = (function()
																		return nil;
																	end)();
																	v131 = (function()
																		return nil;
																	end)();
																	v133 = (function()
																		return 1;
																	end)();
																end
															end
														end
														if (v127 ~= 2) then
														else
															while true do
																if (v128 ~= #"~") then
																else
																	local v1849 = (function()
																		return 241 - (187 + 54);
																	end)();
																	local v1850 = (function()
																		return;
																	end)();
																	while true do
																		if (v1849 == (780 - (162 + 618))) then
																			v1850 = (function()
																				return 0 + 0;
																			end)();
																			while true do
																				if (v1850 == (0 + 0)) then
																					v131 = (function()
																						return {v100(),v100(),nil,nil};
																					end)();
																					if (v129 == (0 - 0)) then
																						local v3044 = (function()
																							return 0 + 0;
																						end)();
																						while true do
																							if (v3044 ~= 0) then
																							else
																								v131[#"xnx"] = (function()
																									return v100();
																								end)();
																								v131[#"0313"] = (function()
																									return v100();
																								end)();
																								break;
																							end
																						end
																					elseif (v129 == #"~") then
																						v131[#"91("] = (function()
																							return v101();
																						end)();
																					elseif (v129 == 2) then
																						v131[#"xxx"] = (function()
																							return v101() - ((1638 - (1373 + 263)) ^ (1016 - (451 + 549)));
																						end)();
																					elseif (v129 ~= #"91(") then
																					else
																						local v3051 = (function()
																							return 0;
																						end)();
																						local v3052 = (function()
																							return;
																						end)();
																						while true do
																							if (v3051 == 0) then
																								v3052 = (function()
																									return 0;
																								end)();
																								while true do
																									if (v3052 ~= 0) then
																									else
																										v131[#"19("] = (function()
																											return v101() - ((1 + 1) ^ (24 - 8));
																										end)();
																										v131[#"?id="] = (function()
																											return v100();
																										end)();
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																					v1850 = (function()
																						return 1 - 0;
																					end)();
																				end
																				if (v1850 == (1385 - (746 + 638))) then
																					v128 = (function()
																						return 2;
																					end)();
																					break;
																				end
																			end
																			break;
																		end
																	end
																end
																if (v128 ~= #"xnx") then
																else
																	if (v99(v130, #"-19", #"19(") == #"{") then
																		v131[#"0313"] = (function()
																			return v102[v131[#"?id="]];
																		end)();
																	end
																	v103[v104] = (function()
																		return v131;
																	end)();
																	break;
																end
																if (v128 ~= 0) then
																else
																	local v1852 = (function()
																		return 0;
																	end)();
																	local v1853 = (function()
																		return;
																	end)();
																	while true do
																		if (v1852 == (0 + 0)) then
																			v1853 = (function()
																				return 0;
																			end)();
																			while true do
																				if (v1853 == 0) then
																					v129 = (function()
																						return v99(v97, 2 - 0, #"xnx");
																					end)();
																					v130 = (function()
																						return v99(v97, #"0836", 347 - (218 + 123));
																					end)();
																					v1853 = (function()
																						return 1;
																					end)();
																				end
																				if (v1853 ~= 1) then
																				else
																					v128 = (function()
																						return #"]";
																					end)();
																					break;
																				end
																			end
																			break;
																		end
																	end
																end
																if (v128 == (1583 - (1535 + 46))) then
																	local v1854 = (function()
																		return 0;
																	end)();
																	local v1855 = (function()
																		return;
																	end)();
																	while true do
																		if (v1854 ~= 0) then
																		else
																			v1855 = (function()
																				return 0 + 0;
																			end)();
																			while true do
																				if (v1855 ~= (1 + 0)) then
																				else
																					v128 = (function()
																						return #"-19";
																					end)();
																					break;
																				end
																				if (v1855 == 0) then
																					if (v99(v130, #",", #">") ~= #"/") then
																					else
																						v131[2] = (function()
																							return v102[v131[2]];
																						end)();
																					end
																					if (v99(v130, 562 - (306 + 254), 1 + 1) ~= #"}") then
																					else
																						v131[#"xxx"] = (function()
																							return v102[v131[#"gha"]];
																						end)();
																					end
																					v1855 = (function()
																						return 1;
																					end)();
																				end
																			end
																			break;
																		end
																	end
																end
															end
															break;
														end
													end
												end
												break;
											end
										end
										return v96, v97, v98, v99, v100, v101, v102, v103, v104;
									end
								end
							end
							if (v105 == (0 - 0)) then
								local v124 = (function()
									return 1467 - (899 + 568);
								end)();
								local v125 = (function()
									return;
								end)();
								while true do
									if (v124 ~= (0 + 0)) then
									else
										v125 = (function()
											return 0;
										end)();
										while true do
											if (v125 ~= (0 - 0)) then
											else
												v96 = (function()
													return 603 - (268 + 335);
												end)();
												v97 = (function()
													return nil;
												end)();
												v125 = (function()
													return 1;
												end)();
											end
											if (v125 ~= (291 - (60 + 230))) then
											else
												v105 = (function()
													return 573 - (426 + 146);
												end)();
												break;
											end
										end
										break;
									end
								end
							end
							break;
						end
					end
				end
			end;
		end)();
		local v52 = (function()
			return function(v106, v107, v108)
				local v109 = (function()
					return 0;
				end)();
				while true do
					if ((0 + 0) == v109) then
						local v120 = (function()
							return 0;
						end)();
						while true do
							if (v120 ~= (1456 - (282 + 1174))) then
							else
								v106[v107 - #"|"] = (function()
									return v108();
								end)();
								return v106, v107, v108;
							end
						end
					end
				end
			end;
		end)();
		local v53 = (function()
			return {};
		end)();
		local v54 = (function()
			return {};
		end)();
		local v55 = (function()
			return {};
		end)();
		local v56 = (function()
			return {v53,v54,nil,v55};
		end)();
		local v57 = (function()
			return v23();
		end)();
		local v58 = (function()
			return {};
		end)();
		for v68 = #",", v57 do
			FlatIdent_76979, Type, Cons, v21, v24, v25, v58, v68 = (function()
				return v50(FlatIdent_76979, Type, Cons, v21, v24, v25, v58, v68);
			end)();
		end
		v56[#"91("] = (function()
			return v21();
		end)();
		for v69 = #"|", v23() do
			FlatIdent_24A02, Descriptor, v21, v20, v22, v23, v58, v53, v69 = (function()
				return v51(FlatIdent_24A02, Descriptor, v21, v20, v22, v23, v58, v53, v69);
			end)();
		end
		for v70 = #"]", v23() do
			v54, v70, v28 = (function()
				return v52(v54, v70, v28);
			end)();
		end
		return v56;
	end
	local function v29(v60, v61, v62)
		local v63 = v60[812 - (569 + 242)];
		local v64 = v60[2];
		local v65 = v60[1796 - (248 + 1545)];
		return function(...)
			local v71 = v63;
			local v72 = v64;
			local v73 = v65;
			local v74 = v27;
			local v75 = 2 - (993 - (191 + 801));
			local v76 = -(1 + 0);
			local v77 = {};
			local v78 = {...};
			local v79 = v12("#", ...) - (1252 - (721 + 530));
			local v80 = {};
			local v81 = {};
			for v110 = 1271 - (945 + 326), v79 do
				if (v110 >= v73) then
					v77[v110 - v73] = v78[v110 + (2 - 1)];
				else
					v81[v110] = v78[v110 + 1 + 0];
				end
			end
			local v82 = (v79 - v73) + 1;
			local v83;
			local v84;
			while true do
				local v111 = 700 - (271 + 429);
				while true do
					if ((v111 == (0 + 0)) or (2292 > 4911)) then
						v83 = v71[v75];
						v84 = v83[1501 - ((3115 - (434 + 1273)) + 92)];
						v111 = 1087 - (461 + 625);
					end
					if (v111 == (1289 - (993 + 295))) then
						if (v84 <= (246 - 160)) then
							if (v84 <= (3 + 39)) then
								if ((v84 <= ((940 + 251) - (418 + (3139 - 2386)))) or (1307 < 752)) then
									if (v84 <= (4 + 5)) then
										if (v84 <= (1 + 3)) then
											if ((v84 <= 1) or (2021 <= 1818)) then
												if (v84 > 0) then
													local v134;
													local v135, v136;
													local v137;
													v81[v83[575 - (349 + 224)]] = v61[v83[3]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[531 - ((1270 - (275 + 589)) + 123)]] = v83[3];
													v75 = v75 + (1770 - (1749 + 20));
													v83 = v71[v75];
													v137 = v83[(1 - 0) + 1];
													v135, v136 = v74(v81[v137](v13(v81, v137 + (1323 - (1249 + 73)), v83[2 + 1])));
													v76 = (v136 + v137) - (1146 - ((799 - 333) + 679));
													v134 = 0 - 0;
													for v858 = v137, v76 do
														local v859 = (1532 - (1064 + 468)) - 0;
														while true do
															if (v859 == (1900 - (106 + 1794))) then
																v134 = v134 + 1 + 0 + 0;
																v81[v858] = v135[v134];
																break;
															end
														end
													end
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v137 = v83[5 - 3];
													v81[v137] = v81[v137](v13(v81, v137 + (2 - 1), v76));
													v75 = v75 + (115 - (4 + 110));
													v83 = v71[v75];
													if v81[v83[2 + 0]] then
														v75 = v75 + (585 - (57 + 527));
													else
														v75 = v83[1430 - (41 + 1386)];
													end
												else
													local v147 = (441 - 338) - (17 + 86);
													local v148;
													while true do
														if (((3 + 1) == v147) or (3184 > 4881)) then
															v75 = v75 + (1 - 0);
															v83 = v71[v75];
															v81[v83[5 - 3]] = v81[v83[169 - (122 + 44)]];
															v75 = v75 + 1;
															v83 = v71[v75];
															v81[v83[2 - (703 - (676 + 27))]] = v62[v83[3]];
															v147 = 16 - 11;
														end
														if (v147 == (9 + 2)) then
															v83 = v71[v75];
															v81[v83[2]] = v83[1 + (5 - 3)];
															v75 = v75 + (1 - 0);
															v83 = v71[v75];
															v75 = v83[68 - (30 + 35)];
															break;
														end
														if (v147 == (3 + 0)) then
															v83 = v71[v75];
															v81[v83[2]] = v81[v83[1260 - (1043 + 214)]];
															v75 = v75 + (3 - 2);
															v83 = v71[v75];
															v148 = v83[1214 - (323 + 889)];
															v81[v148] = v81[v148](v13(v81, v148 + 1, v83[7 - 4]));
															v147 = 1431 - (48 + 1379);
														end
														if (v147 == (585 - (361 + 219))) then
															v75 = v75 + (321 - (53 + 267));
															v83 = v71[v75];
															v81[v83[1 + 1 + 0]] = v81[v83[3]][v83[417 - (15 + 398)]];
															v75 = v75 + (983 - (18 + 964));
															v83 = v71[v75];
															v81[v83[2]] = v62[v83[3]];
															v147 = 22 - 16;
														end
														if (v147 == (6 + 3)) then
															v81[v83[2 + 0]] = v81[v83[3]] + v81[v83[854 - (9 + 11 + 830)]];
															v75 = v75 + 1 + 0;
															v83 = v71[v75];
															v81[v83[2]] = v83[129 - (116 + 10)];
															v75 = v75 + 1 + 0;
															v83 = v71[v75];
															v147 = 748 - (542 + 196);
														end
														if (((0 - 0) == v147) or (1708 < 564)) then
															v148 = nil;
															v81[v83[1 + 1]] = v61[v83[2 + 1]];
															v75 = v75 + 1 + 0;
															v83 = v71[v75];
															v81[v83[2]] = v81[v83[7 - 4]][v83[9 - 5]];
															v75 = v75 + (1552 - ((1958 - 832) + 317 + 108));
															v147 = 406 - (118 + 287);
														end
														if (v147 == (7 - 5)) then
															v83 = v71[v75];
															v81[v83[1123 - (118 + 1003)]] = v81[v83[8 - 5]][v83[381 - (142 + (350 - (79 + 36)))]];
															v75 = v75 + (4 - 3);
															v83 = v71[v75];
															v81[v83[1 + 1]] = v81[v83[9 - 6]][v83[4]];
															v75 = v75 + (978 - (249 + 304 + 424));
															v147 = 5 - 2;
														end
														if ((v147 == (8 + 0 + 0)) or (2137 <= 1708)) then
															v81[v148] = v81[v148](v13(v81, v148 + 1 + 0, v83[2 + 1]));
															v75 = v75 + 1 + 0;
															v83 = v71[v75];
															v81[v83[2 + 0]] = v81[v83[6 - 3]] / v83[11 - 7];
															v75 = v75 + (2 - 1);
															v83 = v71[v75];
															v147 = 3 + 6;
														end
														if (6 == v147) then
															v75 = v75 + 1;
															v83 = v71[v75];
															v81[v83[2]] = v81[v83[14 - 11]][v83[4]];
															v75 = v75 + ((221 + 533) - (239 + 514));
															v83 = v71[v75];
															v81[v83[1 + 1 + 0]] = v81[v83[1332 - (797 + 532)]];
															v147 = 6 + 1;
														end
														if ((4030 > 2418) and (v147 == (1 + 0))) then
															v83 = v71[v75];
															v81[v83[4 - 2]] = v81[v83[3]][v83[1206 - (373 + 829)]];
															v75 = v75 + 1;
															v83 = v71[v75];
															v81[v83[733 - (476 + 255)]] = v61[v83[3]];
															v75 = v75 + (1131 - (369 + 761));
															v147 = 2;
														end
														if (v147 == 10) then
															v148 = v83[(4 - 2) + 0];
															v81[v148] = v81[v148](v13(v81, v148 + (1 - 0), v83[2 + 1]));
															v75 = v75 + 1;
															v83 = v71[v75];
															v81[v83[(2 + 1) - 1]] = v81[v83[241 - (64 + 174)]];
															v75 = v75 + (1015 - (631 + 383)) + (1635 - (445 + 1190));
															v147 = 16 - (1430 - (810 + 615));
														end
														if (v147 == (343 - (144 + (1486 - (819 + 475))))) then
															v75 = v75 + (217 - (42 + 174));
															v83 = v71[v75];
															v81[v83[1337 - (243 + 1092)]] = v83[3 + 0];
															v75 = v75 + 1;
															v83 = v71[v75];
															v148 = v83[2 + 0];
															v147 = 4 + 4;
														end
													end
												end
											elseif ((v84 <= (1506 - ((1082 - 719) + 1141))) or (4195 <= 1598)) then
												v81[v83[1582 - (1183 + 397)]] = v81[v83[8 - 5]][v83[4]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[1978 - (1913 + 62)]][v83[3 + 1]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1935 - (352 + 213 + 1284 + 84)]] = v81[v83[11 - 8]][v83[(107 + 1558) - (1433 + 44 + (308 - 124))]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[3 + 0];
												v75 = v75 + 1;
												v83 = v71[v75];
												v75 = v83[859 - (564 + 292)];
											elseif ((4737 > 204) and (v84 > 3)) then
												v81[v83[2]] = v61[v83[4 - 1]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v61[v83[307 - (244 + (171 - 111))]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[478 - (41 + 435)]] = v81[v83[1004 - (938 + 63)]][v83[4 + 0]];
												v75 = v75 + (1126 - ((1460 - (119 + 405)) + 189));
												v83 = v71[v75];
												v81[v83[(2 - 1) + 1]] = v81[v83[1616 - (1565 + 48)]] - v83[3 + 1];
												v75 = v75 + (1139 - (782 + 356));
												v83 = v71[v75];
												v81[v83[269 - (176 + 91)]][v83[(24 - 17) - 4]] = v81[v83[613 - (352 + 257)]];
												v75 = v75 + (1 - (0 + 0));
												v83 = v71[v75];
												do
													return;
												end
											else
												v81[v83[1165 - (88 + 1075)]] = {};
											end
										elseif ((v84 <= (1098 - ((2046 - (477 + 594)) + 117))) or (2435 > 3226)) then
											if (v84 == 5) then
												local v159;
												v81[v83[1877 - (157 + 1718)]] = v62[v83[3 + (723 - (328 + 395))]];
												v75 = v75 + (505 - (164 + 340));
												v83 = v71[v75];
												v159 = v83[6 - 4];
												v81[v159] = v81[v159]();
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[(1545 - 525) - (697 + 321)]][v83[7 - 4]] = v83[8 - 4];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[4 - 2]] = v62[v83[2 + 1]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v159 = v83[2];
												v81[v159] = v81[v159]();
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1229 - (322 + 905)]][v83[614 - (602 + 9)]] = v83[4];
												v75 = v75 + (1190 - (449 + 740));
												v83 = v71[v75];
												v81[v83[874 - (826 + 46)]] = v62[v83[950 - (245 + 702)]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v159 = v83[1 + 1];
												v81[v159] = v81[v159]();
												v75 = v75 + (1899 - (260 + 1638));
												v83 = v71[v75];
												v81[v83[442 - (382 + (1287 - (1008 + 221)))]][v83[1514 - (1025 + 486)]] = v83[12 - 8];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v62[v83[3]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v159 = v83[3 - 1];
												v81[v159] = v81[v159]();
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1207 - ((1976 - 1074) + 303)]][v83[5 - 2]] = v83[9 - (13 - 8)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v62[v83[1693 - ((1340 - (108 + 111)) + 569)]];
												v75 = v75 + (215 - (22 + 192));
												v83 = v71[v75];
												v159 = v83[(783 - (82 + 16)) - (483 + 200)];
												v81[v159] = v81[v159]();
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1465 - (1404 + 59)]][v83[8 - 5]] = v83[4 - 0];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[767 - (468 + 297)]] = v62[v83[3]];
												v75 = v75 + (563 - (334 + 228));
												v83 = v71[v75];
												v159 = v83[2];
												v81[v159] = v81[v159]();
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[4 - 2]][v83[(1734 - (533 + 1196)) - (2 - 0)]] = v83[216 - (161 + 51)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = {};
												v75 = v75 + (237 - (141 + 95));
												v83 = v71[v75];
												v81[v83[436 - (294 + 140)]] = v61[v83[3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + (2 - (4 - 3));
												v83 = v71[v75];
												v81[v83[(842 - (717 + 121)) - 2]] = v83[1 + 2];
												v75 = v75 + 1;
												v83 = v71[v75];
												v159 = v83[5 - 3];
												v81[v159] = v81[v159](v13(v81, v159 + 1 + 0, v83[2 + 1]));
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]][v81[v83[(2 - 0) + 1]]] = v83[4];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[165 - (92 + 71)]] = v61[v83[2 + 1]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[768 - (574 + 187 + 4)];
												v75 = v75 + 1 + 0 + 0;
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[2 + 1];
												v75 = v75 + (850 - (254 + 595));
												v83 = v71[v75];
												v159 = v83[2];
												v81[v159] = v81[v159](v13(v81, v159 + 1, v83[3]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[128 - (55 + 71)]][v81[v83[3 - 0]]] = v83[1794 - (573 + 1217)];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v61[v83[(1714 - (1001 + 709)) - 1]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[941 - (714 + 225)]] = v83[8 - 5];
												v75 = v75 + (1 - (0 + 0));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3 - 0];
												v75 = v75 + 1;
												v83 = v71[v75];
												v159 = v83[1122 - (242 + 878)];
												v81[v159] = v81[v159](v13(v81, v159 + (807 - (118 + 688)), v83[51 - (25 + (1806 - (1395 + 388)))]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1888 - (927 + 479 + 480)]][v81[v83[10 - 7]]] = v83[(536 + 200) - (16 + 716)];
												v75 = v75 + ((1 + 0) - 0);
												v83 = v71[v75];
												v81[v83[99 - (11 + 86)]] = v61[v83[3]];
												v75 = v75 + (2 - (1 + 0));
												v83 = v71[v75];
												v81[v83[287 - (175 + 110)]] = v83[6 - 3];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v81[v83[(3745 - (1289 + 658)) - (503 + 1293)]] = v83[8 - 5];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v159 = v83[1063 - (810 + 251)];
												v81[v159] = v81[v159](v13(v81, v159 + 1 + 0, v83[3]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]][v81[v83[536 - (43 + 490)]]] = v83[(406 + 331) - (711 + 22)];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												for v860 = v83[2], v83[4 - 1] do
													v81[v860] = nil;
												end
											elseif ((v81[v83[861 - (240 + 619)]] < v83[1 + 3]) or (3428 <= 2860)) then
												v75 = v75 + (1 - (0 + 0));
											else
												v75 = v83[1 + 0 + 2];
											end
										elseif ((v84 <= (12 - 5)) or (1277 >= 3501)) then
											local v217;
											local v218;
											v218 = v83[1746 - (1344 + 400)];
											v81[v218] = v81[v218](v13(v81, v218 + (406 - (255 + 150)), v83[3 + 0]));
											v75 = v75 + 1 + (1976 - (337 + 1639));
											v83 = v71[v75];
											v218 = v83[8 - 6];
											v217 = v81[v83[3 + 0]];
											v81[v218 + (3 - 2)] = v217;
											v81[v218] = v217[v83[1743 - (404 + 1335)]];
											v75 = v75 + (407 - (183 + 223));
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[3 - 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[339 - (10 + 327)]] = v83[3 + 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v218 = v83[340 - (118 + 220)];
											v81[v218] = v81[v218](v13(v81, v218 + 1, v83[1 + 2]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[451 - ((291 - 183) + 341)]] = v83[2 + 1] ~= (0 - (0 - 0));
										elseif ((v84 == (1501 - (711 + 782))) or (1935 > 2192)) then
											local v928;
											v81[v83[2]] = v81[v83[3]][v83[7 - 3]];
											v75 = v75 + (470 - ((2007 - (630 + 1107)) + 199));
											v83 = v71[v75];
											v81[v83[1 + 0 + 1]] = v81[v83[3]];
											v75 = v75 + ((264 + 1556) - (580 + 1239));
											v83 = v71[v75];
											v928 = v83[2];
											v81[v928] = v81[v928](v81[v928 + (2 - (1 - 0))]);
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v61[v83[2 + 1]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											if (v81[v83[2]] <= v81[v83[3 + 1]]) then
												v75 = v75 + (1168 - (645 + 522));
											else
												v75 = v83[2 + 1];
											end
										else
											local v938 = 1790 - (1010 + 780);
											local v939;
											local v940;
											while true do
												if ((4 + 0) == v938) then
													v83 = v71[v75];
													v81[v83[9 - 7]][v83[8 - 5]] = v81[v83[4]];
													v75 = v75 + (1837 - (872 + 173 + 791));
													v83 = v71[v75];
													v81[v83[4 - 2]] = v61[v83[4 - 1]];
													v938 = (571 - (13 + 48)) - (351 + 154);
												end
												if (v938 == (1576 - (1281 + 293))) then
													v83 = v71[v75];
													v81[v83[268 - (28 + 238)]] = v83[3];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2]] = v83[1562 - (1381 + 178)];
													v938 = 3 + 0;
												end
												if (v938 == (0 + (699 - (658 + 41)))) then
													v939 = nil;
													v940 = nil;
													v81[v83[1 + 1]] = v62[v83[10 - 7]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v938 = (994 - 523) - (381 + 89);
												end
												if (v938 == 5) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v61[v83[4 - 1]];
													v75 = v75 + (1157 - (1074 + 82));
													v83 = v71[v75];
													v938 = 12 - 6;
												end
												if ((v938 == (1787 - (214 + 1570))) or (4715 < 767)) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v940 = v83[2];
													v81[v940] = v81[v940](v13(v81, v940 + 1, v83[3]));
													v75 = v75 + ((3363 - (1591 + 316)) - (990 + 465));
													v938 = 2 + 2;
												end
												if (v938 == (4 + 4)) then
													v939 = v81[v83[3]];
													v81[v940 + 1 + (0 - 0)] = v939;
													v81[v940] = v939[v83[15 - 11]];
													break;
												end
												if ((1732 - (413 + 1255 + 58)) == v938) then
													v81[v83[628 - (512 + 61 + 53)]][v83[7 - 4]] = v81[v83[8 - 4]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[6 - 4]] = v61[v83[2 + 1]];
													v75 = v75 + 1 + 0;
													v938 = 7 + 0;
												end
												if ((1319 == 1319) and (v938 == (3 - 2))) then
													v81[v83[2]] = v81[v83[9 - 6]][v83[1998 - (109 + (3161 - (1241 + 35)))]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v83[3];
													v75 = v75 + (1470 - (1269 + (240 - (18 + 22))));
													v938 = (3 - 0) - 1;
												end
												if (v938 == (822 - (98 + 717))) then
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[(217 + 612) - ((2104 - (697 + 605)) + 24)]][v83[6 - 2]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v940 = v83[(1 + 1) - 0];
													v938 = 2 + 6;
												end
											end
										end
									elseif ((v84 <= ((23 - 12) + 3)) or (4502 <= 868)) then
										if ((3735 >= 172) and (v84 <= (2 + 9))) then
											if (v84 > 10) then
												if (v81[v83[(330 - (188 + 141)) + 1]] < v81[v83[4]]) then
													v75 = v75 + 1;
												else
													v75 = v83[(33 - 25) - 5];
												end
											else
												local v233 = (0 - 0) - 0;
												local v234;
												while true do
													if (((2 + (951 - (34 + 916))) == v233) or (4844 <= 3394)) then
														v83 = v71[v75];
														v81[v83[1 + 1]] = v81[v83[3 + (1737 - (357 + 1380))]] / v83[4];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v233 = 2 + 2;
													end
													if (v233 == (1443 - (797 + 636))) then
														v75 = v75 + 1;
														v83 = v71[v75];
														v75 = v83[3];
														break;
													end
													if (v233 == ((40 + 3) - 34)) then
														v81[v83[1621 - (669 + 758 + 192)]] = v81[v83[2 + 1]];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[2 + 1];
														v233 = 336 - (50 + 142 + 134);
													end
													if (v233 == (1934 - (178 + 1749))) then
														v83 = v71[v75];
														v234 = v83[2];
														v81[v234] = v81[v234](v81[v234 + ((3568 - 2291) - (316 + 960))]);
														v75 = v75 + 1 + 0;
														v233 = 7 + 1;
													end
													if (v233 == (5 + 0)) then
														v81[v83[7 - 5]] = v62[v83[(1969 - (142 + 1273)) - (83 + 468)]];
														v75 = v75 + (1807 - (1202 + 604));
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[3]][v83[4]];
														v233 = 27 - 21;
													end
													if ((13 - 5) == v233) then
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[8 - 5]];
														v75 = v75 + (326 - ((638 - (284 + 309)) + 280));
														v83 = v71[v75];
														v233 = 9 + 0;
													end
													if (0 == v233) then
														v234 = nil;
														v81[v83[2 + 0 + 0]] = v81[v83[2 + 1]] % v83[3 + 1];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v233 = 1;
													end
													if (v233 == (6 - 2)) then
														v234 = v83[(2603 - (622 + 68)) - (340 + 1571)];
														v81[v234] = v81[v234](v81[v234 + 1 + 0]);
														v75 = v75 + 1;
														v83 = v71[v75];
														v233 = 1777 - (1733 + 39);
													end
													if (v233 == (2 - 1)) then
														v81[v83[(529 + 507) - (125 + 909)]] = v81[v83[1951 - ((2488 - 1392) + 852)]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2 - 0]] = v62[v83[3]];
														v233 = 2 + 0;
													end
													if (v233 == (514 - (316 + 93 + 103))) then
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[(149 + 89) - ((1944 - (855 + 1043)) + 190)]] = v81[v83[3]][v83[99 - (51 + 44)]];
														v75 = v75 + 1 + 0;
														v233 = 1320 - (1114 + 203);
													end
													if (v233 == (732 - (228 + (1119 - 621)))) then
														v75 = v75 + 1 + (0 - 0);
														v83 = v71[v75];
														v81[v83[2 + 0]] = v81[v83[666 - ((593 - 419) + 489)]] / v83[10 - (785 - (576 + 203))];
														v75 = v75 + 1;
														v233 = 1912 - (830 + 1075);
													end
												end
											end
										elseif (v84 <= ((1365 - 829) - (303 + 221))) then
											v81[v83[1271 - (231 + 1038)]][v81[v83[3]]] = v83[4 + 0];
										elseif ((2003 <= 3182) and (v84 > 13)) then
											local v942 = 1162 - (171 + 991);
											while true do
												if (v942 == 1) then
													v81[v83[2]] = v61[v83[12 - 9]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v942 = 5 - 3;
												end
												if (v942 == (7 - 4)) then
													v81[v83[2 + 0]] = v83[10 - 7];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v942 = 4;
												end
												if ((4436 >= 3624) and (4 == v942)) then
													v75 = v83[4 - (1 - 0)];
													break;
												end
												if (v942 == (0 - 0)) then
													v81[v83[2]]();
													v75 = v75 + 1;
													v83 = v71[v75];
													v942 = 1249 - (111 + 1137);
												end
												if (v942 == (160 - (91 + 67))) then
													v81[v83[(1989 - (709 + 1275)) - 3]] = v81[v83[1 + 2]][v83[527 - (358 + 65 + 100)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v942 = 7 - 4;
												end
											end
										else
											local v943 = 0 + 0;
											local v944;
											while true do
												if (v943 == (772 - (326 + 445))) then
													v81[v83[2]] = -v81[v83[13 - 10]];
													v75 = v75 + ((6 - 4) - 1);
													v83 = v71[v75];
													v81[v83[4 - 2]] = v83[714 - (530 + 181)] ^ v81[v83[885 - (614 + 267)]];
													v943 = 34 - (19 + 13);
												end
												if ((4444 >= 1701) and (v943 == 5)) then
													do
														return v81[v83[2 - 0]];
													end
													break;
												end
												if (v943 == 3) then
													v83 = v71[v75];
													v944 = v83[4 - 2];
													v81[v944] = v81[v944](v81[v944 + 1]);
													v75 = v75 + (2 - 1);
													v943 = 15 - 11;
												end
												if ((v943 == 0) or (3990 < 1842)) then
													v944 = nil;
													v81[v83[1 + 1]] = v81[v83[4 - 1]][v83[7 - 3]];
													v75 = v75 + (1813 - (1293 + 519));
													v83 = v71[v75];
													v943 = 1 - 0;
												end
												if (v943 == 2) then
													v75 = v75 + ((120 - (31 + 87)) - 1);
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[5 - 2]] * v81[v83[17 - 13]];
													v75 = v75 + (2 - 1);
													v943 = 2 + 1;
												end
												if (v943 == (1 + 3)) then
													v83 = v71[v75];
													v81[v83[4 - 2]] = v81[v83[3]] + v81[v83[1 + (134 - (44 + 87))]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v943 = 2 + 3;
												end
											end
										end
									elseif (v84 <= (62 - 45)) then
										if (v84 <= (10 + 5 + 0)) then
											local v237;
											local v238, v239;
											local v240;
											v81[v83[1098 - (709 + 387)]] = v81[v83[1861 - (673 + 1185)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[(13 - 7) - 4]] = v61[v83[4 - 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[3 + (0 - 0)]];
											v75 = v75 + (787 - (284 + 502));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v61[v83[3 - 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v61[v83[5 - 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1883 - (446 + 1434)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1286 - (675 + 365 + 243)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1849 - ((1745 - (124 + 1062)) + (2315 - (847 + 180)))]] = v81[v83[1934 - (609 + 1322)]] + v83[458 - (13 + 441)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v240 = v83[7 - 5];
											v238, v239 = v74(v81[v240](v13(v81, v240 + (2 - 1), v83[14 - (9 + 2)])));
											v76 = (v239 + v240) - (1 + 0);
											v237 = 0 - 0;
											for v862 = v240, v76 do
												local v863 = 0 + 0;
												while true do
													if ((v863 == 0) or (3654 > 3853)) then
														v237 = v237 + 1 + 0;
														v81[v862] = v238[v237];
														break;
													end
												end
											end
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v240 = v83[2 + 0];
											v81[v240] = v81[v240](v13(v81, v240 + (1 - 0), v76));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v61[v83[2 + 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v61[v83[3 + 0]];
											v75 = v75 + (434 - ((638 - 485) + 280));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[8 - 5]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = #v81[v83[2 + 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]] % v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - (1364 - (369 + 994))] + v81[v83[3 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = #v81[v83[670 - (89 + 578)]];
											v75 = v75 + (964 - (583 + 380));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]] % v81[v83[8 - 4]];
											v75 = v75 + (1050 - (572 + 477));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[2 + 1] + v81[v83[1 + 3]];
											v75 = v75 + (87 - (84 + 2));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[4 - 1]] + v83[3 + 1];
											v75 = v75 + (843 - (497 + 345));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1 + 2]] + v83[1337 - (605 + 728)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v240 = v83[3 - 1];
											v238, v239 = v74(v81[v240](v13(v81, v240 + 1, v83[1 + 2])));
											v76 = (v239 + v240) - (3 - 2);
											v237 = 0 + 0;
											for v864 = v240, v76 do
												v237 = v237 + (2 - 1);
												v81[v864] = v238[v237];
											end
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v240 = v83[491 - (457 + 8 + 24)];
											v238, v239 = v74(v81[v240](v13(v81, v240 + 1 + 0, v76)));
											v76 = (v239 + v240) - (1 + 0);
											v237 = 1402 - (832 + 570);
											for v867 = v240, v76 do
												v237 = v237 + 1 + 0;
												v81[v867] = v238[v237];
											end
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v240 = v83[6 - 4];
											v81[v240] = v81[v240](v13(v81, v240 + 1 + 0, v76));
											v75 = v75 + (797 - (290 + 298 + 208));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[(3776 - (1085 + 888)) - (884 + 916)]] % v83[8 - 4];
											v75 = v75 + (2 - 1) + (0 - 0);
											v83 = v71[v75];
											v240 = v83[655 - (232 + 421)];
											v238, v239 = v74(v81[v240](v81[v240 + (1890 - (1569 + 320))]));
											v76 = (v239 + v240) - (1 + 0);
											v237 = 0;
											for v870 = v240, v76 do
												local v871 = 0 + 0;
												while true do
													if (v871 == (0 - 0)) then
														v237 = v237 + 1;
														v81[v870] = v238[v237];
														break;
													end
												end
											end
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v240 = v83[607 - (316 + 289)];
											v81[v240](v13(v81, v240 + (2 - 1), v76));
										elseif (v84 > (1 + 15)) then
											local v945;
											local v946;
											local v947;
											v947 = v83[1455 - (666 + 787)];
											v946 = v81[v83[428 - (360 + 65)]];
											v81[v947 + (1 - 0) + 0] = v946;
											v81[v947] = v946[v83[258 - (79 + 175)]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[8 - 5];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v62[v83[(269 + 633) - (503 + 396)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[183 - (92 + 89)]] = v81[v83[5 - 2]][v83[3 + 1]];
											v75 = v75 + 1 + 0 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[11 - 8]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v83[8 - 4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3]][v83[12 - 8]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v62[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[4 - 1]][v83[1248 - (485 + 759)]];
											v75 = v75 + (2 - (1 - 0));
											v83 = v71[v75];
											v947 = v83[1191 - (442 + 747)];
											v81[v947] = v81[v947](v13(v81, v947 + 1, v83[1138 - (832 + 303)]));
											v75 = v75 + (947 - (88 + 858));
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v61[v83[3 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[791 - (766 + 23)]] = v81[v83[3]][v83[19 - 15]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[4 - 2]][v81[v83[10 - 7]]] = v81[v83[1077 - (1036 + (51 - 14))]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v83[4 + 0 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1482 - (641 + 839)]] = v81[v83[916 - (886 + 24 + 3)]][v83[(223 - (153 + 61)) - 5]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v947 = v83[1686 - (1466 + 218)];
											v945 = v81[v947];
											v946 = v83[3];
											for v1946 = 944 - (704 + 239), v946 do
												v945[v1946] = v81[v947 + v1946];
											end
										else
											local v978;
											v81[v83[1 + 1]] = v81[v83[1151 - (258 + 298 + 592)]][v83[(1388 - (740 + 646)) + 2]];
											v75 = v75 + (809 - (329 + 479));
											v83 = v71[v75];
											v81[v83[856 - (174 + 411 + 269)]] = v61[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[5 - 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[741 - (396 + 343)]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v978 = v83[2];
											v81[v978] = v81[v978](v13(v81, v978 + (1478 - ((1951 - (1547 + 375)) + 1448)), v83[1392 - (69 + 66 + 1254)]));
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[9 - 7]] = v61[v83[2 + 1]];
											v75 = v75 + (1528 - (389 + 1138));
											v83 = v71[v75];
											v978 = v83[576 - (102 + 472)];
											v81[v978] = v81[v978](v13(v81, v978 + 1, v83[(406 - (211 + 192)) + 0]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v61[v83[3]] = v81[v83[2 + 0]];
											v75 = v75 + (1546 - (320 + 1225));
											v83 = v71[v75];
											v81[v83[2 - 0]] = v61[v83[2 + 1]];
											v75 = v75 + (1465 - (157 + 1307));
											v83 = v71[v75];
											v81[v83[1861 - (821 + 1038)]] = v61[v83[7 - 4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[2 + 1];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1028 - (834 + 192)]] = v83[3];
											v75 = v75 + 1 + (0 - 0);
											v83 = v71[v75];
											v978 = v83[1 + 1];
											v81[v978] = v81[v978](v13(v81, v978 + 1 + 0, v83[3]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[306 - (300 + 4)]][v83[1 + 2]] = v81[v83[10 - 6]];
											v75 = v75 + (363 - (112 + 250));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[4 - 1];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v75 = v83[2 + 1];
										end
									elseif (v84 <= (10 + 8)) then
										local v268;
										v81[v83[2 + 0]] = v61[v83[2 + 1]];
										v75 = v75 + 1 + (781 - (425 + 356));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1417 - (1001 + 413)]][v83[8 - 4]];
										v75 = v75 + (883 - (244 + 638));
										v83 = v71[v75];
										v81[v83[695 - (627 + 66)]] = v81[v83[8 - 5]] + v83[606 - (512 + 90)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1909 - (1665 + 241)]] + v83[721 - (373 + 344)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v83[3]] = v81[v83[2 + 2]];
										v75 = v75 + ((1 + 1) - 1);
										v83 = v71[v75];
										v81[v83[2 - 0]] = v61[v83[1102 - (35 + 1064)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v62[v83[1 + 2]];
										v75 = v75 + (1237 - ((776 - 478) + 938));
										v83 = v71[v75];
										v268 = v83[1261 - (233 + 1026)];
										v81[v268] = v81[v268]();
										v75 = v75 + (1667 - (636 + (2596 - (83 + 1483))));
										v83 = v71[v75];
										v81[v83[2]][v83[2 + 1]] = v81[v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v75 = v83[(1273 - (123 + 1149)) + 2];
									elseif (v84 > 19) then
										local v1004 = 0 + 0 + 0;
										local v1005;
										while true do
											if (v1004 == 4) then
												v83 = v71[v75];
												v75 = v83[224 - (55 + 166)];
												break;
											end
											if (v1004 == (1 + 0 + 0)) then
												v81[v83[1 + 1]] = v62[v83[11 - 8]];
												v75 = v75 + (298 - (36 + 261));
												v83 = v71[v75];
												v81[v83[3 - 1]] = v81[v83[1371 - (34 + 1334)]][v83[1584 - (908 + 672)]];
												v1004 = 1 + (514 - (206 + 307));
											end
											if (v1004 == 2) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + ((1346 - (18 + 44)) - (1035 + 248));
												v1004 = 24 - (20 + 1);
											end
											if (v1004 == (0 + 0)) then
												v1005 = nil;
												v81[v83[2]]();
												v75 = v75 + (320 - (134 + 185));
												v83 = v71[v75];
												v1004 = 1134 - (549 + 584);
											end
											if (v1004 == (688 - (314 + 371))) then
												v83 = v71[v75];
												v1005 = v83[6 - 4];
												v81[v1005](v81[v1005 + 1]);
												v75 = v75 + 1;
												v1004 = 4;
											end
										end
									else
										local v1006 = 968 - (478 + 166 + 324);
										local v1007;
										local v1008;
										while true do
											if (v1006 == 1) then
												v83 = v71[v75];
												v1008 = v83[2 + 0];
												v81[v1008] = v81[v1008]();
												v75 = v75 + (1173 - ((1721 - 935) + 386));
												v1006 = (13 - 7) - 4;
											end
											if (v1006 == (1379 - (1055 + 324))) then
												v1007 = nil;
												v1008 = nil;
												v81[v83[2]] = v81[v83[1343 - (1093 + 247)]][v83[4 + 0]];
												v75 = v75 + 1;
												v1006 = 1;
											end
											if ((4017 >= 2164) and (v1006 == (1 + 1))) then
												v83 = v71[v75];
												v81[v83[(2 + 5) - 5]][v83[3]] = v81[v83[4]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1006 = 9 - 6;
											end
											if (v1006 == (16 - 10)) then
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[2 + (936 - (226 + 709))];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v1006 = 7;
											end
											if (v1006 == (13 - 9)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + (726 - (235 + 491))]] = v83[7 - 4];
												v75 = v75 + (689 - (364 + 324));
												v1006 = 13 - 8;
											end
											if (v1006 == 5) then
												v83 = v71[v75];
												v1008 = v83[4 - 2];
												v81[v1008](v13(v81, v1008 + 1 + 0, v83[12 - (14 - 5)]));
												v75 = v75 + 1;
												v1006 = 9 - 3;
											end
											if (v1006 == 7) then
												v75 = v83[(3 + 5) - 5];
												break;
											end
											if (v1006 == (1271 - (1249 + 19))) then
												v1008 = v83[2 + 0];
												v1007 = v81[v83[3]];
												v81[v1008 + (3 - 2)] = v1007;
												v81[v1008] = v1007[v83[(2389 - (463 + 836)) - (686 + 400)]];
												v1006 = 4 + (404 - (166 + 238));
											end
										end
									end
								elseif (v84 <= (260 - (73 + 156))) then
									if ((2804 > 1147) and (v84 <= (1 + 24))) then
										if ((v84 <= ((1451 - 618) - (721 + 90))) or (3106 <= 2293)) then
											if (v84 > (1 + 20)) then
												v81[v83[6 - 4]] = v83[3] ^ v81[v83[4]];
												v75 = v75 + (471 - (224 + 246));
												v83 = v71[v75];
												v81[v83[2 - (0 + 0)]] = v81[v83[3]] * v81[v83[4]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v61[v83[3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + (1441 - (1080 + 361))]] = v81[v83[5 - 2]] % v81[v83[5 - 1]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												do
													return v81[v83[1 + 1]];
												end
												v75 = v75 + (514 - (203 + 310));
												v83 = v71[v75];
												v75 = v83[1996 - ((1655 - 417) + 755)];
											else
												local v293;
												local v294, v295;
												local v296;
												local v297;
												v297 = v83[1 + 1];
												v296 = v81[v83[3]];
												v81[v297 + 1] = v296;
												v81[v297] = v296[v83[1538 - (709 + 825)]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2 - 0]] = v61[v83[867 - (196 + 668)]];
												v75 = v75 + ((303 - (254 + 46)) - 2);
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[836 - (171 + 662)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[(18 + 78) - (3 + 1 + 89)];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v297 = v83[2];
												v294, v295 = v74(v81[v297](v13(v81, v297 + 1 + 0, v83[(269 - (37 + 219)) - 10])));
												v76 = (v295 + v297) - (1 + 0);
												v293 = 0;
												for v872 = v297, v76 do
													v293 = v293 + (1487 - ((1934 - (1330 + 569)) + 1451));
													v81[v872] = v294[v293];
												end
												v75 = v75 + (1454 - (28 + 1425));
												v83 = v71[v75];
												v297 = v83[2];
												v81[v297] = v81[v297](v13(v81, v297 + (1994 - (941 + 1052)), v76));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v297 = v83[2];
												v296 = v81[v83[1517 - (822 + (1050 - 358))]];
												v81[v297 + (1 - 0)] = v296;
												v81[v297] = v296[v83[2 + 2]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[(494 - 195) - (45 + 252)]] = v61[v83[3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[2 + 1]][v83[9 - 5]];
												v75 = v75 + (434 - (114 + 319));
												v83 = v71[v75];
												v297 = v83[2 - 0];
												v81[v297] = v81[v297](v13(v81, v297 + (1 - 0), v83[2 + 1]));
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[3 - 1]] = v81[v83[1966 - (556 + (5617 - 4210))]];
												v75 = v75 + (1207 - (741 + (687 - 222)));
												v83 = v71[v75];
												if v81[v83[2]] then
													v75 = v75 + (466 - (170 + (965 - (128 + 542))));
												else
													v75 = v83[(3 - 1) + 1];
												end
											end
										elseif (v84 <= (22 + 1)) then
											v81[v83[2]] = v81[v83[7 - 4]] * v83[4 + (0 - 0)];
										elseif (v84 > (16 + 8)) then
											v81[v83[2 + 0]] = v81[v83[1233 - (957 + 273)]][v83[(6 - 4) + 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v81[v83[7 - 4]][v83[11 - 7]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[1782 - (63 + 326 + 1391)]] = v81[v83[2 + 1]] * v81[v83[1 + 3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[953 - (783 + 168)]] = v81[v83[9 - 6]] + v81[v83[4 + 0]];
											v75 = v75 + (312 - (309 + 2));
											v83 = v71[v75];
											v81[v83[2]] = v83[9 - 6];
											v75 = v75 + (1213 - (1090 + 122));
											v83 = v71[v75];
											v75 = v83[10 - 7];
										else
											local v1020 = v83[2];
											local v1021 = v81[v1020];
											for v1949 = v1020 + 1 + 0, v83[9 - 6] do
												v7(v1021, v81[v1949]);
											end
										end
									elseif (v84 <= (18 + 2 + 8)) then
										if (v84 <= (1144 - (628 + 490))) then
											local v320 = 0 + 0;
											local v321;
											while true do
												if (v320 == (9 - 5)) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[9 - 7]] = v81[v83[777 - (431 + 343)]] / v83[7 - 3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v321 = v83[5 - 3];
													v320 = 3 + 1 + 1;
												end
												if (v320 == (1 + 6)) then
													v75 = v83[1698 - ((1135 - 579) + 1139)];
													break;
												end
												if (((16 - (6 + 9)) == v320) or (1345 < 838)) then
													v83 = v71[v75];
													v81[v83[1 + 1]] = v62[v83[2 + 0 + 1]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[(984 - (96 + 716)) - (28 + 141)]][v83[2 + 2]];
													v75 = v75 + 1;
													v320 = 2;
												end
												if (v320 == (2 - 0)) then
													v83 = v71[v75];
													v81[v83[2 + 0]] = v81[v83[1320 - (486 + (2438 - (85 + 1522)))]] / v83[10 - 6];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v321 = v83[2];
													v81[v321] = v81[v321](v81[v321 + (854 - (724 + 129)) + (0 - 0)]);
													v320 = 9 - 6;
												end
												if (v320 == (1263 - (668 + 595))) then
													v321 = nil;
													v81[v83[2 + 0]] = v81[v83[(374 - (83 + 290)) + 2]] % v83[4];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[292 - (23 + 267)]] = v81[v83[1947 - ((1672 - 543) + 815)]];
													v75 = v75 + 1;
													v320 = 388 - (371 + 16);
												end
												if (v320 == (1756 - (1326 + 424))) then
													v81[v83[3 - 1]] = v81[v83[10 - 7]];
													v75 = v75 + (119 - (88 + 30));
													v83 = v71[v75];
													v81[v83[2]] = v83[774 - (720 + (93 - 42))];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v320 = (1412 + 371) - (421 + 1355);
												end
												if ((12 < 783) and (v320 == (8 - 3))) then
													v81[v321] = v81[v321](v81[v321 + 1 + 0]);
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v81[v83[2 + 1]];
													v75 = v75 + (1084 - (286 + 797));
													v83 = v71[v75];
													v320 = 6;
												end
												if (v320 == (10 - 7)) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 - 0]] = v62[v83[442 - (397 + 42)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[802 - (24 + 776)]] = v81[v83[4 - 1]][v83[789 - (222 + 563)]];
													v320 = 8 - 4;
												end
											end
										elseif (v84 == (20 + 7)) then
											local v1022;
											local v1023, v1024;
											local v1025;
											local v1026;
											v81[v83[192 - (23 + 167)]] = v61[v83[1801 - (690 + (1609 - 501))]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[851 - (20 + 20 + 808)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[7 - (10 - 5)]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1026 = v83[2];
											v81[v1026] = v81[v1026](v13(v81, v1026 + 1 + 0, v83[574 - (47 + 524)]));
											v75 = v75 + (1 - 0) + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v61[v83[4 - 1]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1728 - (1165 + 561)]] = v83[1 + 2];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v83[(449 - (190 + 257)) + 1];
											v75 = v75 + (480 - (341 + 138));
											v83 = v71[v75];
											v1026 = v83[1 + (592 - (402 + 189))];
											v81[v1026] = v81[v1026](v13(v81, v1026 + (1 - 0), v83[3]));
											v75 = v75 + (327 - (89 + 237));
											v83 = v71[v75];
											v81[v83[2]] = v83[9 - 6];
											v75 = v75 + (1 - (0 + 0));
											v83 = v71[v75];
											v1026 = v83[883 - (581 + 300)];
											v81[v1026](v13(v81, v1026 + (1221 - (855 + 365)), v83[3]));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v62[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v83[1239 - (1030 + 205)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1026 = v83[288 - (156 + 130)];
											v81[v1026](v81[v1026 + (2 - (567 - (90 + 476)))]);
											v75 = v75 + (1 - (814 - (688 + 126)));
											v83 = v71[v75];
											v81[v83[2]] = v83[3] ~= (0 - 0);
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v61[v83[2 + 1 + 0]] = v81[v83[71 - (10 + 59)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[9 - 7]] = v61[v83[1166 - (100 + 571 + 492)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1026 = v83[1217 - (369 + 846)];
											v1025 = v81[v83[1 + 2]];
											v81[v1026 + 1 + 0] = v1025;
											v81[v1026] = v1025[v83[1949 - (1036 + 909)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1026 = v83[2 - 0];
											v81[v1026](v81[v1026 + (204 - (11 + 192))]);
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[177 - (135 + 40)]] = v61[v83[6 - 3]];
											v75 = v75 + 1 + (499 - (34 + 465));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v61[v83[3]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[178 - (50 + 126)]] = v83[8 - 5];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1416 - (1233 + 180)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1026 = v83[971 - ((2258 - 1736) + 447)];
											v81[v1026] = v81[v1026](v13(v81, v1026 + 1, v83[1424 - (107 + 1314)]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v61[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[7 - 5]] = v83[1913 - (373 + 343 + 1194)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1026 = v83[1 + 1];
											v81[v1026] = v81[v1026](v13(v81, v1026 + (504 - (74 + 237 + 192)), v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[5 - 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1026 = v83[4 - 2];
											v81[v1026](v13(v81, v1026 + 1 + 0, v83[8 - 5]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v62[v83[(1150 - 714) - (279 + 152 + 2)]];
											v75 = v75 + (779 - (454 + 324));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v61[v83[20 - (12 + 5)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[2 + 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1095 - (277 + 816)]] = v83[12 - 9];
											v75 = v75 + (1184 - (1058 + 125));
											v83 = v71[v75];
											v1026 = v83[1 + 1];
											v1023, v1024 = v74(v81[v1026](v13(v81, v1026 + 1, v83[978 - (815 + 160)])));
											v76 = (v1024 + v1026) - 1;
											v1022 = 0 - 0;
											for v1981 = v1026, v76 do
												v1022 = v1022 + (2 - 1);
												v81[v1981] = v1023[v1022];
											end
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1026 = v83[5 - 3];
											v81[v1026](v13(v81, v1026 + (1899 - (41 + 1857)), v76));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1895 - (1222 + 671)]] = v62[v83[7 - (7 - 3)]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1026 = v83[1184 - (229 + 953)];
											v1025 = v81[v83[1777 - (1111 + 663)]];
											v81[v1026 + (1580 - (874 + 705))] = v1025;
											v81[v1026] = v1025[v83[1 + 3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v61[v83[6 - 3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[(1808 - (587 + 1220)) + 2];
											v75 = v75 + (680 - (642 + 37));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[1 + 2];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1026 = v83[456 - (233 + 221)];
											v1023, v1024 = v74(v81[v1026](v13(v81, v1026 + (2 - 1), v83[3 + 0])));
											v76 = (v1024 + v1026) - (1542 - (718 + 823));
											v1022 = 0 + 0;
											for v1984 = v1026, v76 do
												v1022 = v1022 + (806 - (266 + 539));
												v81[v1984] = v1023[v1022];
											end
											v75 = v75 + 1;
											v83 = v71[v75];
											v1026 = v83[5 - 3];
											v81[v1026] = v81[v1026](v13(v81, v1026 + ((3118 - (1211 + 681)) - (636 + 589)), v76));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[3 - 1]] = v62[v83[3 + 0]];
											v75 = v75 + 1 + (77 - (64 + 13));
											v83 = v71[v75];
											v1026 = v83[1017 - (657 + 358)];
											v1025 = v81[v83[7 - 4]];
											v81[v1026 + (2 - 1)] = v1025;
											v81[v1026] = v1025[v83[1191 - (1151 + 36)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v61[v83[8 - 5]];
											v75 = v75 + (1833 - (1552 + 280));
											v83 = v71[v75];
											v81[v83[836 - ((719 - (121 + 534)) + 770)]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[3];
											v75 = v75 + 1 + (803 - (622 + 181));
											v83 = v71[v75];
											v1026 = v83[1245 - (157 + 1086)];
											v1023, v1024 = v74(v81[v1026](v13(v81, v1026 + (1 - 0), v83[13 - 10])));
											v76 = (v1024 + v1026) - (1 - 0);
											v1022 = 0;
											for v1987 = v1026, v76 do
												local v1988 = 0;
												while true do
													if ((v1988 == 0) or (2281 > 4346)) then
														v1022 = v1022 + 1;
														v81[v1987] = v1023[v1022];
														break;
													end
												end
											end
											v75 = v75 + 1;
											v83 = v71[v75];
											v1026 = v83[2 - 0];
											v81[v1026] = v81[v1026](v13(v81, v1026 + (820 - (599 + 220)), v76));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1933 - (1813 + 118)]] = v62[v83[3 + 0]];
											v75 = v75 + (1218 - (841 + 145 + 231));
											v83 = v71[v75];
											v1026 = v83[2 - 0];
											v1025 = v81[v83[1 + 2]];
											v81[v1026 + ((1671 - (296 + 1373)) - 1)] = v1025;
											v81[v1026] = v1025[v83[863 - (464 + 79 + 316)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v61[v83[840 - (467 + 370)]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[10 - 7];
											v75 = v75 + 1 + 0 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[523 - (150 + 370)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1026 = v83[1284 - (74 + 1208)];
											v1023, v1024 = v74(v81[v1026](v13(v81, v1026 + (2 - 1), v83[14 - 11])));
											v76 = (v1024 + v1026) - (1 + 0);
											v1022 = 390 - (14 + 376);
											for v1989 = v1026, v76 do
												local v1990 = (0 + 0) - 0;
												while true do
													if (((0 + 0) == v1990) or (2429 <= 762)) then
														v1022 = v1022 + 1;
														v81[v1989] = v1023[v1022];
														break;
													end
												end
											end
											v75 = v75 + 1;
											v83 = v71[v75];
											v1026 = v83[2 + 0];
											v81[v1026] = v81[v1026](v13(v81, v1026 + 1 + 0, v76));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v62[v83[81 - (23 + 55)]];
											v75 = v75 + ((1616 - (143 + 1471)) - 1);
											v83 = v71[v75];
											v1026 = v83[2 + 0];
											v1025 = v81[v83[3]];
											v81[v1026 + 1] = v1025;
											v81[v1026] = v1025[v83[4 + 0]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[1 + 2]];
											v75 = v75 + (902 - (652 + 249));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[1871 - (708 + 1160)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[5 - 2];
											v75 = v75 + (28 - (10 + 17));
											v83 = v71[v75];
											v1026 = v83[1 + (3 - 2)];
											v1023, v1024 = v74(v81[v1026](v13(v81, v1026 + 1, v83[3])));
											v76 = (v1024 + v1026) - 1;
											v1022 = 1732 - (1400 + 332);
											for v1991 = v1026, v76 do
												v1022 = v1022 + 1;
												v81[v1991] = v1023[v1022];
											end
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1026 = v83[2];
											v81[v1026] = v81[v1026](v13(v81, v1026 + (1909 - (242 + 1666)), v76));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v62[v83[3 + 0]];
											v75 = v75 + (941 - (850 + 90));
											v83 = v71[v75];
											v1026 = v83[3 - 1];
											v1025 = v81[v83[3]];
											v81[v1026 + (1391 - (360 + 1030))] = v1025;
											v81[v1026] = v1025[v83[2 + 2 + 0]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 - 0]] = v61[v83[1664 - (909 + 752)]];
											v75 = v75 + (1224 - (109 + 1114));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[2 + 1];
											v75 = v75 + (243 - (6 + 236));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3 + 0];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1026 = v83[3 - (2 - 1)];
											v1023, v1024 = v74(v81[v1026](v13(v81, v1026 + (1134 - (1076 + 57)), v83[1 + 2])));
											v76 = (v1024 + v1026) - 1;
											v1022 = 689 - (579 + 110);
											for v1994 = v1026, v76 do
												local v1995 = 0 + (180 - (103 + 77));
												while true do
													if ((0 + 0 + (1157 - (895 + 262))) == v1995) then
														v1022 = v1022 + 1 + 0;
														v81[v1994] = v1023[v1022];
														break;
													end
												end
											end
											v75 = v75 + (408 - (174 + 233));
											v83 = v71[v75];
											v1026 = v83[5 - 3];
											v81[v1026] = v81[v1026](v13(v81, v1026 + (1 - 0), v76));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v62[v83[1177 - (663 + 511)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1026 = v83[2 + 0];
											v1025 = v81[v83[1 + (1628 - (581 + 1045))]];
											v81[v1026 + (2 - 1)] = v1025;
											v81[v1026] = v1025[v83[3 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v61[v83[7 - 4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1 + 2];
											v75 = v75 + (723 - (478 + 244));
											v83 = v71[v75];
											v1026 = v83[519 - (440 + 77)];
											v1023, v1024 = v74(v81[v1026](v13(v81, v1026 + 1 + 0, v83[3])));
											v76 = (v1024 + v1026) - 1;
											v1022 = 0 - 0;
											for v1996 = v1026, v76 do
												v1022 = v1022 + (1557 - (655 + (2176 - (582 + 693))));
												v81[v1996] = v1023[v1022];
											end
											v75 = v75 + 1 + (1186 - (454 + 732));
											v83 = v71[v75];
											v1026 = v83[2 + 0];
											v81[v1026] = v81[v1026](v13(v81, v1026 + 1 + (0 - 0), v76));
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v62[v83[1448 - (695 + 750)]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1026 = v83[(1 + 1) - 0];
											v1025 = v81[v83[11 - (11 - 3)]];
											v81[v1026 + 1] = v1025;
											v81[v1026] = v1025[v83[355 - ((395 - 110) + 66)]];
										else
											local v1125;
											v81[v83[4 - 2]] = v62[v83[1313 - (682 + 628)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v83[303 - (176 + (773 - (367 + 283)))]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]][v83[273 - (239 + 30)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]][v83[4 - 1]] = v81[v83[12 - (76 - (7 + 61))]];
											v75 = v75 + (316 - (306 + 9));
											v83 = v71[v75];
											v81[v83[6 - 4]] = v61[v83[1 + (5 - 3)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v62[v83[8 - 5]];
											v75 = v75 + (1376 - (1140 + 235));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v83[3 + 1]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v61[v83[1 + 2]];
											v75 = v75 + (53 - (33 + 19));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v61[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1125 = v83[1 + 1 + 0];
											v81[v1125] = v81[v1125](v13(v81, v1125 + 1, v83[5 - 2]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[691 - ((1264 - (332 + 346)) + 103)]][v83[1 + (3 - 1)]] = v81[v83[12 - 8]];
											v75 = v75 + (1489 - (1309 + 179));
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[2 + 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v75 = v83[3];
										end
									elseif ((v84 <= (77 - 48)) or (2508 > 3169)) then
										local v322 = 0 + 0;
										local v323;
										local v324;
										local v325;
										local v326;
										while true do
											if (v322 == (14 - 7)) then
												v75 = v75 + (1 - (0 - 0));
												v83 = v71[v75];
												v81[v83[611 - (295 + 314)]] = v61[v83[6 - 3]];
												v322 = (7485 - 5515) - (1300 + 662);
											end
											if ((v322 == 8) or (4359 == 4783)) then
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3]][v83[1759 - (1178 + 577)]];
												v322 = 5 + 4;
											end
											if (v322 == (0 - 0)) then
												v323 = nil;
												v324, v325 = nil;
												v326 = nil;
												v322 = 1 + 0;
											end
											if (v322 == (1409 - (851 + 554))) then
												v326 = v83[2 + 0];
												v324, v325 = v74(v81[v326](v13(v81, v326 + ((2 - 0) - 1), v83[3])));
												v76 = (v325 + v326) - (1 - 0);
												v322 = 307 - (102 + 13 + 187);
											end
											if (v322 == (1 + 1 + 0)) then
												v81[v83[2]] = v83[(4 - 1) + 0];
												v75 = v75 + 1;
												v83 = v71[v75];
												v322 = 11 - 8;
											end
											if (v322 == (2 - 1)) then
												v81[v83[1163 - (160 + 1001)]] = v61[v83[3 + (1854 - (815 + 1039))]];
												v75 = v75 + 1 + (776 - (336 + 440));
												v83 = v71[v75];
												v322 = 3 - 1;
											end
											if (v322 == 9) then
												v75 = v75 + (359 - (237 + 121));
												v83 = v71[v75];
												if (v81[v83[899 - (525 + 372)]] == v81[v83[7 - 3]]) then
													v75 = v75 + (3 - 2);
												else
													v75 = v83[145 - (96 + 44 + 2)];
												end
												break;
											end
											if (v322 == (782 - (643 + 134))) then
												v323 = 0 + 0 + 0;
												for v2466 = v326, v76 do
													v323 = v323 + (2 - 1);
													v81[v2466] = v324[v323];
												end
												v75 = v75 + ((7 - 4) - 2);
												v322 = 6 + 0;
											end
											if (3 == v322) then
												v81[v83[2]] = v83[433 - (222 + 208)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v322 = 4;
											end
											if (v322 == 6) then
												v83 = v71[v75];
												v326 = v83[2];
												v81[v326] = v81[v326](v13(v81, v326 + ((1 + 0) - 0), v76));
												v322 = 14 - 7;
											end
										end
									elseif (v84 > 30) then
										local v1149;
										local v1150;
										local v1151, v1152;
										local v1153;
										v81[v83[2]] = v83[722 - (316 + 403)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[8 - 5];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1153 = v83[4 - 2];
										v1151, v1152 = v74(v81[v1153](v13(v81, v1153 + 1 + 0, v83[1 + 2])));
										v76 = (v1152 + v1153) - (3 - 2);
										v1150 = 0 - 0;
										for v2019 = v1153, v76 do
											v1150 = v1150 + (1 - 0);
											v81[v2019] = v1151[v1150];
										end
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1153 = v83[3 - 1];
										v81[v1153] = v81[v1153](v13(v81, v1153 + 1 + 0, v76));
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[(849 - (652 + 178)) - (12 + 5)]] = v62[v83[11 - 8]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v62[v83[5 - 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1153 = v83[3 - 1];
										v1149 = v81[v83[7 - (10 - 6)]];
										v81[v1153 + 1 + 0] = v1149;
										v81[v1153] = v1149[v83[1977 - (1656 + 317)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v61[v83[7 - 4]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[356 - (5 + 349)]] = v83[14 - 11];
										v75 = v75 + ((1246 + 26) - ((670 - 404) + 1005));
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v1153 = v83[2 - 0];
										v1151, v1152 = v74(v81[v1153](v13(v81, v1153 + (1697 - (561 + (1529 - (259 + 135)))), v83[3 - 0])));
										v76 = (v1152 + v1153) - (3 - 2);
										v1150 = 1066 - (507 + 559);
										for v2022 = v1153, v76 do
											v1150 = v1150 + (2 - 1);
											v81[v2022] = v1151[v1150];
										end
										v75 = v75 + 1;
										v83 = v71[v75];
										v1153 = v83[6 - 4];
										v1151, v1152 = v74(v81[v1153](v13(v81, v1153 + (389 - (212 + (1636 - (1393 + 67)))), v76)));
										v76 = (v1152 + v1153) - (906 - (250 + 655));
										v1150 = 0 - 0;
										for v2025 = v1153, v76 do
											local v2026 = 0 - (0 + 0);
											while true do
												if ((v2026 == (0 - 0)) or (1302 >= 2955)) then
													v1150 = v1150 + 1;
													v81[v2025] = v1151[v1150];
													break;
												end
											end
										end
										v75 = v75 + (1957 - (1869 + 87));
										v83 = v71[v75];
										v1153 = v83[6 - 4];
										v81[v1153] = v81[v1153](v13(v81, v1153 + (1902 - (484 + 1417)), v76));
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v1153 = v83[2 - 0];
										v81[v1153] = v81[v1153]();
										v75 = v75 + (774 - (48 + 725));
										v83 = v71[v75];
										v81[v83[2 - 0]] = v62[v83[7 - 4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v62[v83[1 + 2]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1153 = v83[855 - (152 + 701)];
										v1149 = v81[v83[1314 - (430 + 881)]];
										v81[v1153 + 1 + 0] = v1149;
										v81[v1153] = v1149[v83[899 - ((2005 - (1129 + 319)) + 338)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v61[v83[10 - 7]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3 - 0];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[803 - (499 + 302)]] = v83[869 - (39 + 827)];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v1153 = v83[4 - 2];
										v1151, v1152 = v74(v81[v1153](v13(v81, v1153 + (3 - 2), v83[3])));
										v76 = (v1152 + v1153) - (1 - 0);
										v1150 = 0 + 0;
										for v2027 = v1153, v76 do
											v1150 = v1150 + 1;
											v81[v2027] = v1151[v1150];
										end
										v75 = v75 + 1;
										v83 = v71[v75];
										v1153 = v83[2];
										v1151, v1152 = v74(v81[v1153](v13(v81, v1153 + (2 - 1), v76)));
										v76 = (v1152 + v1153) - ((413 - (137 + 275)) + (439 - (140 + 299)));
										v1150 = 0 - (1101 - (421 + 680));
										for v2030 = v1153, v76 do
											v1150 = v1150 + ((513 - 408) - (103 + 1));
											v81[v2030] = v1151[v1150];
										end
										v75 = v75 + (555 - (475 + 79));
										v83 = v71[v75];
										v1153 = v83[2];
										v81[v1153] = v81[v1153](v13(v81, v1153 + (2 - 1), v76));
										v75 = v75 + (3 - (5 - 3));
										v83 = v71[v75];
										v1153 = v83[1 + 1];
										v81[v1153] = v81[v1153]();
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v1153 = v83[2 + 0];
										v1149 = v81[v83[(817 + 689) - (1395 + 108)]];
										v81[v1153 + (2 - 1)] = v1149;
										v81[v1153] = v1149[v83[1208 - (7 + 1197)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v61[v83[2 + 1]];
										v75 = v75 + (320 - (27 + 292));
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[3 - 0];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2]] = v83[5 - 2];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v1153 = v83[2];
										v81[v1153] = v81[v1153](v13(v81, v1153 + (140 - (43 + 96)), v83[12 - 9]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[(543 - (58 + 482)) - 1]] = v61[v83[3 + 0]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[2 + 1];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1153 = v83[1753 - (1414 + 337)];
										v1151, v1152 = v74(v81[v1153](v13(v81, v1153 + 1, v83[(2622 - (310 + 369)) - (1642 + 298)])));
										v76 = (v1152 + v1153) - (2 - 1);
										v1150 = 0;
										for v2033 = v1153, v76 do
											v1150 = v1150 + ((2 + 0) - 1);
											v81[v2033] = v1151[v1150];
										end
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v1153 = v83[2];
										v81[v1153] = v81[v1153](v13(v81, v1153 + 1 + 0, v76));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1153 = v83[974 - (357 + 615)];
										v1149 = v81[v83[3 + 0]];
										v81[v1153 + (2 - 1)] = v1149;
										v81[v1153] = v1149[v83[4]];
										v75 = v75 + 1 + (286 - (274 + 12));
										v83 = v71[v75];
										v81[v83[4 - (2 + 0)]] = v61[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[2 + 1];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1303 - (384 + 917)]] = v83[(535 + 165) - (128 + 569)];
										v75 = v75 + (1544 - ((3169 - (681 + 1081)) + 136));
										v83 = v71[v75];
										v1153 = v83[1889 - (687 + 1200)];
										v81[v1153] = v81[v1153](v13(v81, v1153 + (1711 - ((1880 - 1324) + 1154)), v83[10 - 7]));
										v75 = v75 + (96 - (9 + 86));
										v83 = v71[v75];
										v81[v83[423 - (275 + 146)]] = v81[v83[1 + 2]][v83[68 - (29 + 35)]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[13 - 10]][v83[3 + 1]];
										v75 = v75 + ((1966 - 953) - (53 + (2446 - 1487)));
										v83 = v71[v75];
										v81[v83[2]] = v62[v83[411 - (312 + 96)]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[287 - ((1024 - (842 + 35)) + (218 - 80))]] = v81[v83[902 - (813 + (1953 - (180 + 1687)))]][v83[4 + (0 - 0)]];
										v75 = v75 + ((972 - (269 + 702)) - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[495 - (18 + 474)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[1089 - (860 + 226)];
										v75 = v75 + (304 - (121 + 182));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[1243 - (988 + 252)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1153 = v83[1 + 1];
										v1151, v1152 = v74(v81[v1153](v13(v81, v1153 + (1971 - (49 + 1921)), v83[893 - (223 + 667)])));
										v76 = (v1152 + v1153) - (53 - (51 + 1));
										v1150 = (814 - (776 + 38)) - 0;
										for v2036 = v1153, v76 do
											v1150 = v1150 + 1;
											v81[v2036] = v1151[v1150];
										end
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v1153 = v83[2];
										v81[v1153] = v81[v1153](v13(v81, v1153 + (1126 - (146 + 979)), v76));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1153 = v83[607 - (311 + 294)];
										v1149 = v81[v83[8 - (3 + 2)]];
										v81[v1153 + 1] = v1149;
										v81[v1153] = v1149[v83[2 + 2]];
										v75 = v75 + (1444 - (496 + 947));
										v83 = v71[v75];
										v81[v83[1360 - ((2649 - 1416) + 125)]] = v61[v83[2 + 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1 + 2];
										v75 = v75 + (1646 - (46 + 917 + 682));
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1153 = v83[1506 - (504 + 1000)];
										v81[v1153] = v81[v1153](v13(v81, v1153 + 1 + 0, v83[3 + 0]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v83[1 + 3]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[2 + 1]][v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[(1 + 183) - (156 + 26)]] = v62[v83[2 + 1]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[166 - (149 + 15)]] = v81[v83[963 - (890 + 70)]][v83[121 - (39 + 78)]];
										v75 = v75 + (483 - (4 + 10 + 468));
										v83 = v71[v75];
										v81[v83[2]] = v83[6 - 3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[2 + (2 - 1)];
										v75 = v75 + 1 + 0 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[2 + 1];
										v75 = v75 + (3 - 2) + 0;
										v83 = v71[v75];
										v1153 = v83[3 - 1];
										v1151, v1152 = v74(v81[v1153](v13(v81, v1153 + 1 + 0, v83[3])));
										v76 = (v1152 + v1153) - 1;
										v1150 = 0;
										for v2039 = v1153, v76 do
											v1150 = v1150 + (3 - 2);
											v81[v2039] = v1151[v1150];
										end
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1153 = v83[(27 + 26) - (12 + (994 - (135 + 820)))];
										v81[v1153] = v81[v1153](v13(v81, v1153 + 1, v76));
										v75 = v75 + 1;
										v83 = v71[v75];
										v1153 = v83[2 + 0];
										v1149 = v81[v83[9 - 6]];
										v81[v1153 + (3 - (138 - (118 + 18)))] = v1149;
										v81[v1153] = v1149[v83[2 + 2]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v61[v83[2 + 1]];
										v75 = v75 + ((1 + 3) - 3);
										v83 = v71[v75];
										v81[v83[1712 - (1596 + 114)]] = v83[7 - 4];
										v75 = v75 + (714 - (164 + 549));
										v83 = v71[v75];
										v81[v83[1440 - ((5061 - 4002) + 172 + 207)]] = v83[(3 + 0) - 0];
										v75 = v75 + 1 + 0 + 0;
										v83 = v71[v75];
										v1153 = v83[1 + 1];
										v81[v1153] = v81[v1153](v13(v81, v1153 + (393 - (145 + 0 + 247)), v83[3 + 0]));
										v75 = v75 + (1294 - (741 + 552)) + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[8 - 5]][v83[4]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3]][v83[(885 - (779 + 105)) + 3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v62[v83[1784 - (1451 + 330)]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[722 - (254 + (2335 - (1259 + 610)))]] = v81[v83[563 - (544 + 16)]][v83[12 - 8]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[630 - (294 + (1184 - (4 + 846)))]] = v83[256 - (236 + 17)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[(1859 - (1108 + 749)) + (1741 - (1301 + 440))]] = v83[10 - 7];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + 1 + (0 - 0);
										v83 = v71[v75];
										v1153 = v83[796 - (413 + 381)];
										v1151, v1152 = v74(v81[v1153](v13(v81, v1153 + 1 + 0, v83[5 - 2])));
										v76 = (v1152 + v1153) - (1 + 0);
										v1150 = 0 - 0;
										for v2042 = v1153, v76 do
											v1150 = v1150 + (1971 - (582 + 1388));
											v81[v2042] = v1151[v1150];
										end
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v1153 = v83[2 + 0];
										v81[v1153] = v81[v1153](v13(v81, v1153 + 1, v76));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v83[368 - (326 + 38)]];
										v75 = v75 + (2 - (1 + 0));
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[623 - (33 + 14 + 573)]][v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[8 - 6]] = v62[v83[4 - 1]];
										v75 = v75 + (1665 - (1269 + 395));
										v83 = v71[v75];
										v1153 = v83[494 - ((552 - (168 + 308)) + 416)];
										v81[v1153] = v81[v1153]();
									else
										local v1255;
										v1255 = v83[3 - 1];
										v81[v1255] = v81[v1255]();
										v75 = v75 + (444 - (319 + 124));
										v83 = v71[v75];
										v81[v83[4 - 2]] = v61[v83[1010 - (564 + 443)]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[460 - (337 + 121)]] = v81[v83[3]][v83[(6 + 5) - 7]];
										v75 = v75 + (3 - (1349 - (469 + 878)));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1914 - (1261 + 650 + 0)]] - v81[v83[2 + (7 - 5)]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										if (v81[v83[2]] < v83[1821 - (341 + 431 + 1045)]) then
											v75 = v75 + 1 + 0 + 0;
										else
											v75 = v83[147 - (102 + 42)];
										end
									end
								elseif (v84 <= (1880 - (1524 + 320))) then
									if (v84 <= 33) then
										if (v84 == (1302 - (1049 + 221))) then
											v81[v83[(378 - 220) - (18 + 138)]] = v61[v83[7 - 4]];
										else
											local v329 = v83[1104 - (67 + 1035)];
											local v330, v331 = v74(v81[v329](v13(v81, v329 + 1, v76)));
											v76 = (v331 + v329) - (349 - (136 + 212));
											local v332 = 0 - 0;
											for v875 = v329, v76 do
												v332 = v332 + 1;
												v81[v875] = v330[v332];
											end
										end
									elseif ((v84 <= (28 + 6)) or (3094 == 3369)) then
										local v333 = 0;
										local v334;
										local v335;
										local v336;
										local v337;
										while true do
											if ((1200 >= 842) and (v333 == (0 + 0))) then
												v334 = nil;
												v335, v336 = nil;
												v337 = nil;
												v81[v83[2]][v83[3]] = v81[v83[1608 - (240 + 1364)]];
												v333 = 1;
											end
											if (v333 == (1083 - (1033 + 17 + 32))) then
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[(7 - 5) + 0]][v83[1058 - (331 + 724)]] = v81[v83[1 + 3]];
												v75 = v75 + (645 - ((2109 - (1332 + 508)) + 375));
												v333 = 727 - (267 + 458);
											end
											if (v333 == (2 + 3)) then
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[821 - (667 + 151)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v333 = 1503 - (1410 + 87);
											end
											if (v333 == (1901 - (1504 + 393))) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[3];
												v75 = v75 + ((21 + 776) - (461 + 335));
												v333 = 1 + 4;
											end
											if ((4917 >= 1468) and (v333 == ((423 + 1341) - (1730 + 31)))) then
												v81[v83[2]] = v81[v83[1670 - (728 + 939)]][v83[(8 + 6) - 10]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[4 - 2]] = v81[v83[1071 - (138 + 930)]];
												v333 = 4 + 0;
											end
											if (v333 == (2 + 0)) then
												v83 = v71[v75];
												v81[v83[2 + 0]] = v62[v83[12 - 9]];
												v75 = v75 + ((2909 - (650 + 492)) - (459 + 1307));
												v83 = v71[v75];
												v333 = 3;
											end
											if (v333 == (1877 - (474 + 1396))) then
												for v2470 = v337, v76 do
													local v2471 = 0;
													while true do
														if (v2471 == (0 - (806 - (689 + 117)))) then
															v334 = v334 + 1 + 0;
															v81[v2470] = v335[v334];
															break;
														end
													end
												end
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v337 = v83[5 - 3];
												v333 = 2 + 6;
											end
											if (v333 == (26 - 18)) then
												v81[v337] = v81[v337](v13(v81, v337 + (4 - 3), v76));
												v75 = v75 + (592 - (562 + 29));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v62[v83[1422 - (374 + 1045)]];
												break;
											end
											if (v333 == (5 + 1 + 0)) then
												v337 = v83[5 - 3];
												v335, v336 = v74(v81[v337](v13(v81, v337 + (639 - (448 + 190)), v83[1 + 2])));
												v76 = (v336 + v337) - (1 + 0);
												v334 = 0 + 0;
												v333 = 26 - 19;
											end
										end
									elseif (v84 > (108 - 73)) then
										local v1264 = (3809 - 2315) - (1307 + 187);
										while true do
											if ((v1264 == (15 - 11)) or (2794 <= 878)) then
												v81[v83[4 - 2]] = v62[v83[3]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v1264 = 688 - (232 + (2374 - (794 + 1129)));
											end
											if (v1264 == (2 + 0 + 0)) then
												v81[v83[2 + 0]] = v62[v83[567 - (510 + 54)]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v1264 = 3;
											end
											if (v1264 == ((9 + 34) - (13 + (884 - (553 + 308))))) then
												if not v81[v83[3 - 1]] then
													v75 = v75 + (1 - 0);
												else
													v75 = v83[5 - 2];
												end
												break;
											end
											if (v1264 == (8 - 3)) then
												v81[v83[1090 - (830 + 258)]] = v81[v83[10 - 7]][v83[3 + 1]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1264 = 6;
											end
											if ((2398 <= 3265) and ((1447 - (860 + 421 + 160)) == v1264)) then
												v81[v83[2]] = v62[v83[10 - 7]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1264 = 7;
											end
											if (v1264 == (3 + 0)) then
												v81[v83[243 - (237 + 4)]] = v81[v83[3]][v83[9 - 5]];
												v75 = v75 + ((1 + 1) - 1);
												v83 = v71[v75];
												v1264 = 7 - 3;
											end
											if (v1264 == ((1769 - (1764 + 4)) + (517 - (121 + 396)))) then
												v81[v83[2 + 0]] = v81[v83[11 - 8]][v83[2 + 2]];
												v75 = v75 + 1 + (554 - (498 + 56));
												v83 = v71[v75];
												v1264 = 1428 - (85 + 1341);
											end
											if ((0 - (0 + 0)) == v1264) then
												v81[v83[2]] = v62[v83[8 - 5]];
												v75 = v75 + (373 - (45 + 327));
												v83 = v71[v75];
												v1264 = 1 - 0;
											end
										end
									else
										local v1265;
										local v1266, v1267;
										local v1268;
										v81[v83[504 - (444 + (217 - 159))]] = v61[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 0 + (2 - 1)]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[1735 - ((96 - 32) + 1668)];
										v75 = v75 + (1974 - (1227 + 746));
										v83 = v71[v75];
										v1268 = v83[2];
										v1266, v1267 = v74(v81[v1268](v13(v81, v1268 + (2 - 1), v83[5 - 2])));
										v76 = (v1267 + v1268) - (495 - (415 + 79));
										v1265 = 0 + 0;
										for v2071 = v1268, v76 do
											local v2072 = 0;
											while true do
												if (v2072 == ((161 + 330) - (142 + (827 - 478)))) then
													v1265 = v1265 + 1 + 0;
													v81[v2071] = v1266[v1265];
													break;
												end
											end
										end
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v1268 = v83[1 + 1];
										v81[v1268](v13(v81, v1268 + 1 + 0, v76));
									end
								elseif ((901 == 901) and (v84 <= (105 - 66))) then
									if (v84 <= 37) then
										local v338 = v83[1866 - (1710 + 154)];
										do
											return v81[v338](v13(v81, v338 + (319 - (200 + 118)), v83[2 + 1]));
										end
									elseif (v84 == 38) then
										local v1278 = v83[2 - 0];
										local v1279 = {};
										for v2073 = 1 - 0, #v80 do
											local v2074 = 0 + 0;
											local v2075;
											while true do
												if ((1616 - (316 + 1300)) == v2074) then
													v2075 = v80[v2073];
													for v2996 = (172 - (78 + 94)) + 0, #v2075 do
														local v2997 = v2075[v2996];
														local v2998 = v2997[1];
														local v2999 = v2997[2 + 0];
														if ((v2998 == v81) and (v2999 >= v1278)) then
															v1279[v2999] = v2998[v2999];
															v2997[(1417 - (261 + 1155)) + 0] = v1279;
														end
													end
													break;
												end
											end
										end
									else
										local v1280 = 0 - 0;
										local v1281;
										local v1282;
										local v1283;
										local v1284;
										local v1285;
										while true do
											if (v1280 == 7) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1252 - (363 + 887)]] = v61[v83[3]];
												v75 = v75 + (1 - 0);
												v1280 = 8;
											end
											if ((2030 > 228) and (v1280 == (0 - 0))) then
												v1281 = nil;
												v1282, v1283 = nil;
												v1284 = nil;
												v1285 = nil;
												v1280 = (1457 - (1040 + 416)) + 0;
											end
											if (v1280 == (6 - 3)) then
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[1667 - (674 + 990)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1280 = 4;
											end
											if ((581 <= 4572) and (v1280 == (4 + (48 - (29 + 14))))) then
												if (v81[v83[2 - 0]] ~= v81[v83[1059 - (507 + 548)]]) then
													v75 = v75 + (838 - (289 + 548));
												else
													v75 = v83[(3463 - 1642) - (821 + (1959 - (928 + 34)))];
												end
												break;
											end
											if (v1280 == (259 - (195 + 60))) then
												v81[v83[1 + 1]] = v83[3];
												v75 = v75 + (1502 - (251 + 1250));
												v83 = v71[v75];
												v1285 = v83[5 - 3];
												v1280 = 5;
											end
											if (v1280 == (6 + 2)) then
												v83 = v71[v75];
												v81[v83[(277 + 757) - (809 + 223)]] = v81[v83[3 - 0]][v83[11 - 7]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v1280 = 7 + 2;
											end
											if (v1280 == 5) then
												v1282, v1283 = v74(v81[v1285](v13(v81, v1285 + 1 + 0, v83[620 - (14 + 603)])));
												v76 = (v1283 + v1285) - (130 - (118 + 11));
												v1281 = 0 + 0;
												for v2954 = v1285, v76 do
													v1281 = v1281 + 1;
													v81[v2954] = v1282[v1281];
												end
												v1280 = 6;
											end
											if (v1280 == 6) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v1285 = v83[2 + 0];
												v81[v1285] = v81[v1285](v13(v81, v1285 + ((1 + 1) - 1), v76));
												v1280 = 956 - (551 + 398);
											end
											if (v1280 == (2 + 0)) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v61[v83[11 - 8]];
												v75 = v75 + (2 - 1);
												v1280 = 1 + 2;
											end
											if (v1280 == (3 - 2)) then
												v1285 = v83[1 + 1];
												v1284 = v81[v83[92 - (40 + 49)]];
												v81[v1285 + (3 - 2)] = v1284;
												v81[v1285] = v1284[v83[494 - (99 + 391)]];
												v1280 = 2 + 0;
											end
										end
									end
								elseif ((156 < 4237) and (v84 <= 40)) then
									local v339 = v83[2];
									v81[v339] = v81[v339](v13(v81, v339 + (4 - (3 + 0)), v76));
								elseif (v84 > (101 - 60)) then
									local v1286;
									local v1287, v1288;
									local v1289;
									v81[v83[2 + 0]] = v81[v83[7 - 4]][v83[1608 - (1032 + 572)]];
									v75 = v75 + (418 - (203 + 214));
									v83 = v71[v75];
									v81[v83[2]] = v61[v83[1820 - (568 + 1249)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[(14 - 10) - 2]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[(20 - 13) - (7 - 2)]] = v83[1309 - (913 + 393)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v1289 = v83[5 - 3];
									v1287, v1288 = v74(v81[v1289](v13(v81, v1289 + (511 - (69 + 441)), v83[3 - 0])));
									v76 = (v1288 + v1289) - (411 - ((664 - 395) + 141));
									v1286 = 0 + 0;
									for v2076 = v1289, v76 do
										local v2077 = 0 - 0;
										while true do
											if (v2077 == 0) then
												v1286 = v1286 + (1982 - (362 + 1619));
												v81[v2076] = v1287[v1286];
												break;
											end
										end
									end
									v75 = v75 + (1626 - (950 + 675));
									v83 = v71[v75];
									v1289 = v83[(2 - 1) + 1];
									v81[v1289] = v81[v1289](v13(v81, v1289 + (1180 - (216 + (2843 - (517 + 1363)))), v76));
									v75 = v75 + (1288 - (485 + 802));
									v83 = v71[v75];
									v61[v83[562 - (432 + 127)]] = v81[v83[1075 - (1065 + 8)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1603 - (635 + 966)]] = v83[3 + 0];
								else
									v62[v83[3]] = v81[v83[44 - (5 + 37)]];
								end
							elseif (v84 <= (158 - 94)) then
								if (v84 <= 53) then
									if ((v84 <= (20 + (955 - (802 + 126)))) or (251 > 425)) then
										if (v84 <= (69 - 25)) then
											if (v84 > 43) then
												if (v81[v83[2]] <= v81[v83[2 + 2]]) then
													v75 = v75 + (1 - 0);
												else
													v75 = v83[3];
												end
											elseif (v83[7 - (1673 - (1660 + 8))] <= v81[v83[4]]) then
												v75 = v75 + (1 - 0);
											else
												v75 = v83[7 - 4];
											end
										elseif (v84 <= (33 + 12)) then
											local v341;
											local v342, v343;
											local v344;
											local v345;
											v345 = v83[531 - (318 + 211)];
											v344 = v81[v83[14 - 11]];
											v81[v345 + (1588 - (963 + 624))] = v344;
											v81[v345] = v344[v83[2 + 2]];
											v75 = v75 + ((3043 - 2196) - (518 + 328));
											v83 = v71[v75];
											v81[v83[4 - (183 - (38 + 143))]] = v61[v83[3 - 0]];
											v75 = v75 + (318 - ((859 - 558) + 16));
											v83 = v71[v75];
											v81[v83[(122 - (29 + 88)) - 3]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[3 + 0];
											v75 = v75 + (1 - 0) + 0;
											v83 = v71[v75];
											v345 = v83[3 - (490 - (308 + 181))];
											v342, v343 = v74(v81[v345](v13(v81, v345 + 1 + 0, v83[1 + 2])));
											v76 = (v343 + v345) - (3 - 2);
											v341 = 0 + 0;
											for v878 = v345, v76 do
												v341 = v341 + (1020 - (829 + 190));
												v81[v878] = v342[v341];
											end
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v345 = v83[1399 - (537 + 860)];
											v81[v345] = v81[v345](v13(v81, v345 + (1 - 0), v76));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											if v81[v83[4 - 2]] then
												v75 = v75 + 1 + 0;
											else
												v75 = v83[3];
											end
										elseif ((v84 > (16 + 30)) or (3584 < 972)) then
											local v1311;
											v81[v83[2]] = v62[v83[8 - 5]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v83[4]];
											v75 = v75 + (614 - (520 + 93));
											v83 = v71[v75];
											v81[v83[(119 + 159) - (259 + 17)]] = v81[v83[1 + 2]] / v83[2 + 2];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v83[594 - (396 + 195)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1311 = v83[2];
											v81[v1311] = v81[v1311](v13(v81, v1311 + 1, v83[3]));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[(2859 - (691 + 404)) - ((2394 - (870 + 1084)) + 1321)]] / v83[1833 - (1059 + 770)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[9 - 7]] = v81[v83[3]] + v81[v83[4]];
											v75 = v75 + (546 - ((553 - (47 + 82)) + 37 + 84));
											v83 = v71[v75];
											v81[v83[1 + 1]][v83[3]] = v81[v83[1351 - (641 + 706)]];
											v75 = v75 + 1 + 0 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[443 - (249 + 191)]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[1 + 1]][v83[11 - 8]] = v81[v83[431 - (183 + 244)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[732 - (434 + 296)]] = v83[9 - 6];
										elseif (v83[2] < v81[v83[4]]) then
											v75 = v75 + 1;
										else
											v75 = v83[515 - (169 + 343)];
										end
									elseif ((1834 > 1047) and (v84 <= 50)) then
										if ((851 == 851) and (v84 <= (43 + 5))) then
											local v360;
											v81[v83[2]] = v83[4 - (1 + 0)];
											v75 = v75 + (2 - (3 - 2));
											v83 = v71[v75];
											v360 = v83[2 + 0];
											v81[v360] = v81[v360](v13(v81, v360 + (2 - 1), v83[1126 - (651 + 472)]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v83[3 - 0]] = v81[v83[4]];
											v75 = v75 + (484 - ((514 - (84 + 33)) + 86));
											v83 = v71[v75];
											v81[v83[878 - (197 + 226 + 453)]] = v81[v83[1 + (6 - 4)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3 + 0];
											v75 = v75 + 1 + 0 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1193 - (50 + 1140)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v360 = v83[2 + 0];
											v81[v360] = v81[v360](v13(v81, v360 + 1 + (0 - 0), v83[3]));
											v75 = v75 + (2 - 1) + 0;
											v83 = v71[v75];
											v81[v83[2]][v83[3]] = v81[v83[5 - 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[598 - (157 + 439)]][v83[4 - (4 - 3)]] = v83[12 - 8];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v62[v83[8 - 5]];
										elseif (v84 == (967 - (782 + 136))) then
											v81[v83[857 - (112 + (1963 - (87 + 1133)))]] = v81[v83[3]] / v83[1175 - (1026 + 145)];
										else
											v81[v83[1 + (2 - 1)]] = v81[v83[3]] * v81[v83[722 - (493 + 225)]];
										end
									elseif (v84 <= 51) then
										local v380;
										v81[v83[2]] = v81[v83[11 - 8]][v83[3 + 1]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v380 = v83[1 + 1];
										v81[v380] = v81[v380]();
										v75 = v75 + ((1 + 1) - 1);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[4 - 1]];
										v75 = v75 + (1596 - (210 + 1385));
										v83 = v71[v75];
										v81[v83[1691 - (1201 + 488)]] = v83[2 + 1];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v75 = v83[5 - 2];
									elseif (v84 > 52) then
										local v1330;
										v81[v83[587 - (352 + 233)]] = v81[v83[7 - 4]][v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[8 - 5]];
										v75 = v75 + (575 - (489 + 76 + 9));
										v83 = v71[v75];
										v1330 = v83[1503 - (277 + 1224)];
										v81[v1330] = v81[v1330](v81[v1330 + (1494 - ((1330 - (205 + 462)) + 830))]);
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v61[v83[878 - (461 + 414)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										if (v81[v83[2]] <= v81[v83[2 + 2]]) then
											v75 = v75 + 1 + 0;
										else
											v75 = v83[3 + 0];
										end
									elseif ((991 >= 218) and (v81[v83[2]] ~= v81[v83[254 - (172 + 78)]])) then
										v75 = v75 + (1 - 0);
									else
										v75 = v83[2 + 1 + 0];
									end
								elseif ((v84 <= (83 - 25)) or (3469 == 3587)) then
									if (v84 <= (15 + 40)) then
										if (v84 > (19 + 35)) then
											local v391 = 0 - 0;
											local v392;
											local v393;
											local v394;
											local v395;
											while true do
												if (v391 == (2 - 0)) then
													for v2475 = v395, v76 do
														local v2476 = (0 - 0) + 0;
														while true do
															if ((v2476 == (0 + 0)) or (2109 <= 746)) then
																v392 = v392 + 1 + (1381 - (1035 + 346));
																v81[v2475] = v393[v392];
																break;
															end
														end
													end
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v395 = v83[4 - 2];
													v81[v395](v13(v81, v395 + 1 + 0, v76));
													v75 = v75 + 1 + 0 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v61[v83[(2230 - (970 + 810)) - (133 + 314)]];
													v391 = 1 + 2;
												end
												if (v391 == (217 - (199 + 14))) then
													v81[v83[2]] = v83[(10 + 0) - (19 - 12)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v395 = v83[(884 + 667) - (647 + 902)];
													v81[v395] = v81[v395](v13(v81, v395 + 1, v83[3]));
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2]] = v61[v83[236 - (85 + 148)]];
													v391 = 5;
												end
												if (((1289 - (426 + 863)) == v391) or (1779 > 3583)) then
													v392 = nil;
													v393, v394 = nil;
													v395 = nil;
													v81[v83[9 - 7]] = v61[v83[1657 - (873 + 781)]];
													v75 = v75 + (1 - (0 - 0));
													v83 = v71[v75];
													v81[v83[4 - 2]] = v83[3];
													v75 = v75 + 1 + 0;
													v391 = 1;
												end
												if (v391 == (27 - 20)) then
													v81[v395](v13(v81, v395 + (3 - 2), v83[(1391 - (601 + 787)) - 0]));
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[1949 - (414 + 1533)]] = v83[3 + 0];
													v75 = v75 + 1;
													v83 = v71[v75];
													v75 = v83[558 - ((1053 - (256 + 354)) + 112)];
													break;
												end
												if (v391 == 1) then
													v83 = v71[v75];
													v81[v83[1481 - (888 + 591)]] = v83[3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v395 = v83[2];
													v393, v394 = v74(v81[v395](v13(v81, v395 + (2 - 1), v83[1 + 2])));
													v76 = (v394 + v395) - ((5 - 2) - 2);
													v392 = 0 + 0;
													v391 = 1 + (3 - 2);
												end
												if ((1996 == 1996) and (v391 == (1 + 4))) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[3];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2]] = v83[1681 - (136 + 1542)];
													v75 = v75 + 1;
													v83 = v71[v75];
													v391 = 19 - 13;
												end
												if (v391 == (3 + 0)) then
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2 + 0]] = v61[v83[489 - (68 + 418)]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[3 + 0];
													v75 = v75 + (1093 - (770 + 322));
													v83 = v71[v75];
													v391 = 1 + 3;
												end
												if (6 == v391) then
													v395 = v83[1 + 1];
													v81[v395] = v81[v395](v13(v81, v395 + 1 + 0, v83[3 - 0]));
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[7 - 4];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v395 = v83[2 + 0];
													v391 = 7;
												end
											end
										else
											v81[v83[2 - 0]]();
										end
									elseif (v84 <= (27 + 29)) then
										v81[v83[2]] = v29(v72[v83[2 + 1]], nil, v62);
									elseif ((v84 == 57) or (2958 >= 4530)) then
										local v1340;
										local v1341;
										local v1342;
										local v1343;
										local v1344;
										local v1345;
										v1345 = v83[2 + 0];
										v81[v1345](v81[v1345 + (3 - 2)]);
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v62[v83[2 + 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v83[18 - 14]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[2 + 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1345 = v83[2];
										v81[v1345](v81[v1345 + (4 - 3)]);
										v75 = v75 + (832 - (762 + 69));
										v83 = v71[v75];
										v1345 = v83[6 - 4];
										v1344 = {};
										for v2117 = 1, #v80 do
											v1343 = v80[v2117];
											for v2477 = 0 + 0, #v1343 do
												v1342 = v1343[v2477];
												v1341 = v1342[1 + 0];
												v1340 = v1342[4 - 2];
												if (((v1341 == v81) and (v1340 >= v1345)) or (176 > 2363)) then
													local v2959 = 0;
													while true do
														if (v2959 == 0) then
															v1344[v1340] = v1341[v1340];
															v1342[1 + 0] = v1344;
															break;
														end
													end
												end
											end
										end
										v75 = v75 + 1;
										v83 = v71[v75];
										v75 = v83[1 + 2];
									else
										local v1356;
										v81[v83[2]] = v81[v83[11 - 8]][v83[161 - (8 + 149)]];
										v75 = v75 + (1321 - (1199 + 121));
										v83 = v71[v75];
										v81[v83[3 - 1]] = v61[v83[6 - 3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1356 = v83[1809 - (518 + 1289)];
										v81[v1356] = v81[v1356](v13(v81, v1356 + (1 - 0), v83[1 + 2]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v61[v83[3 + 0]];
										v75 = v75 + (470 - (304 + 165));
										v83 = v71[v75];
										v1356 = v83[2 + 0];
										v81[v1356] = v81[v1356](v13(v81, v1356 + (161 - (54 + 106)), v83[1972 - (1618 + 351)]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v61[v83[3]] = v81[v83[2 + 0]];
										v75 = v75 + (1017 - (10 + 1006));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v61[v83[1 + 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[6 - 4]][v83[1036 - (912 + 121)]] = v81[v83[2 + 2]];
										v75 = v75 + (1290 - (1140 + 149));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3 - 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v75 = v83[10 - 7];
									end
								elseif ((v84 <= (114 - 53)) or (2566 == 89)) then
									if ((1909 < 4187) and (v84 <= (11 + 48))) then
										v81[v83[6 - 4]] = v81[v83[189 - (165 + 21)]] % v81[v83[4]];
										v75 = v75 + (112 - (61 + 50));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v61[v83[14 - 11]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[1463 - (1295 + 165)]] % v81[v83[1 + 3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1399 - (819 + 578)]] = v81[v83[1405 - (331 + 1071)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[745 - (588 + 155)]] = v83[1285 - (546 + 736)];
										v75 = v75 + (1938 - (1834 + 103));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v75 = v83[1769 - (1536 + 230)];
									elseif ((263 <= 4617) and (v84 > (551 - (128 + 363)))) then
										local v1378;
										local v1379;
										v1379 = v83[1 + 1];
										v1378 = v81[v83[7 - 4]];
										v81[v1379 + 1 + 0] = v1378;
										v81[v1379] = v1378[v83[6 - 2]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[3 + 0]];
										v75 = v75 + (1010 - (615 + 394));
										v83 = v71[v75];
										v1379 = v83[2 + 0];
										v81[v1379] = v81[v1379](v13(v81, v1379 + 1 + 0, v83[9 - 6]));
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1379 = v83[2];
										v1378 = v81[v83[654 - (59 + 592)]];
										v81[v1379 + 1] = v1378;
										v81[v1379] = v1378[v83[8 - 4]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[174 - (70 + 101)]][v83[9 - 5]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1379 = v83[4 - 2];
										v81[v1379] = v81[v1379](v13(v81, v1379 + (242 - (123 + 118)), v83[1 + 2]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1401 - (653 + 746)]] = v81[v83[4 - 1]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[2 + 1];
									else
										local v1402 = 0 + 0;
										local v1403;
										local v1404;
										while true do
											if (v1402 == 1) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v61[v83[1 + 2]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[7 - 4];
												v1402 = 2 + 0;
											end
											if (v1402 == (3 - 1)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1236 - (885 + 349)]] = v83[3 + 0];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v1404 = v83[5 - 3];
												v1402 = 971 - (915 + 53);
											end
											if ((805 - (768 + 33)) == v1402) then
												v1404 = v83[2];
												v1403 = v81[v83[11 - 8]];
												v81[v1404 + (1 - 0)] = v1403;
												v81[v1404] = v1403[v83[332 - (287 + 41)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1402 = 852 - (638 + 209);
											end
											if ((749 <= 4546) and ((0 + 0) == v1402)) then
												v1403 = nil;
												v1404 = nil;
												v81[v83[1688 - (96 + 1590)]] = v81[v83[1675 - (741 + 931)]][v83[2 + 2]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[9 - 7]] = v81[v83[2 + 1]][v83[4]];
												v1402 = 1;
											end
											if (v1402 == (3 + 2)) then
												v1404 = v83[1 + 1];
												v81[v1404] = v81[v1404](v81[v1404 + (3 - 2)]);
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[12 - 9]] / v83[4 + 0];
												v75 = v75 + (495 - (64 + 430));
												v1402 = 6 + 0;
											end
											if (v1402 == 6) then
												v83 = v71[v75];
												v81[v83[365 - (106 + 257)]] = v83[3 + 0];
												v75 = v75 + (722 - (496 + 225));
												v83 = v71[v75];
												v75 = v83[5 - 2];
												break;
											end
											if (v1402 == (14 - 11)) then
												v81[v1404] = v81[v1404](v13(v81, v1404 + (1659 - (256 + 1402)), v83[1902 - (30 + 1869)]));
												v75 = v75 + (1370 - (213 + 1156));
												v83 = v71[v75];
												v81[v83[190 - (96 + 92)]] = v81[v83[1 + 2]][v81[v83[903 - (142 + 757)]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1402 = 2 + 2;
											end
										end
									end
								elseif (v84 <= 62) then
									local v408 = 0;
									local v409;
									local v410;
									while true do
										if ((80 - (32 + 47)) == v408) then
											v81[v410] = v81[v410](v13(v81, v410 + (1978 - (1053 + 924)), v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v408 = 2 + 0;
										end
										if (v408 == (2 - 0)) then
											v410 = v83[1650 - (685 + 963)];
											v409 = v81[v83[5 - 2]];
											v81[v410 + (1 - 0)] = v409;
											v408 = 1712 - (541 + 1168);
										end
										if ((1602 - (645 + 952)) == v408) then
											v81[v83[840 - (669 + 169)]] = v83[10 - 7];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v408 = 3 + 3;
										end
										if (0 == v408) then
											v409 = nil;
											v410 = nil;
											v410 = v83[2];
											v408 = 1 + 0;
										end
										if ((v408 == (769 - (181 + 584))) or (4675 < 4430)) then
											v81[v83[1397 - (665 + 730)]] = v61[v83[8 - 5]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v408 = 5;
										end
										if (v408 == (1353 - (540 + 810))) then
											v81[v410] = v409[v83[15 - 11]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v408 = 4 + 0;
										end
										if (v408 == (211 - (166 + 37))) then
											v83 = v71[v75];
											v81[v83[2]] = v83[3] ~= (1881 - (22 + 1859));
											break;
										end
										if (v408 == (1778 - (843 + 929))) then
											v81[v83[264 - (30 + 232)]] = v83[8 - 5];
											v75 = v75 + 1;
											v83 = v71[v75];
											v408 = 784 - (55 + 722);
										end
										if ((1355 <= 1609) and (v408 == (14 - 7))) then
											v410 = v83[1677 - (78 + 1597)];
											v81[v410] = v81[v410](v13(v81, v410 + 1 + 0, v83[3 + 0]));
											v75 = v75 + 1 + 0;
											v408 = 557 - (305 + 244);
										end
									end
								elseif ((4521 == 4521) and (v84 == (59 + 4))) then
									local v1405 = v83[107 - (95 + 10)];
									local v1406 = v81[v1405 + 2];
									local v1407 = v81[v1405] + v1406;
									v81[v1405] = v1407;
									if ((v1406 > (0 + 0)) or (2673 > 4542)) then
										if (v1407 <= v81[v1405 + (3 - 2)]) then
											local v2960 = 0;
											while true do
												if (v2960 == (0 - 0)) then
													v75 = v83[765 - (592 + 170)];
													v81[v1405 + (10 - 7)] = v1407;
													break;
												end
											end
										end
									elseif ((4870 >= 1986) and (v1407 >= v81[v1405 + (2 - 1)])) then
										local v2961 = 0 + 0;
										while true do
											if ((3250 == 3250) and (v2961 == (0 + 0))) then
												v75 = v83[3];
												v81[v1405 + 3] = v1407;
												break;
											end
										end
									end
								else
									local v1409;
									local v1410, v1411;
									local v1412;
									v81[v83[2]] = v61[v83[6 - 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[510 - (353 + 154)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v1412 = v83[2 - 0];
									v1410, v1411 = v74(v81[v1412](v13(v81, v1412 + 1 + 0, v83[3 + 0])));
									v76 = (v1411 + v1412) - (1 + 0);
									v1409 = 0 - 0;
									for v2141 = v1412, v76 do
										v1409 = v1409 + 1;
										v81[v2141] = v1410[v1409];
									end
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v1412 = v83[4 - 2];
									v81[v1412](v13(v81, v1412 + 1, v76));
									v75 = v75 + (87 - (7 + 79));
									v83 = v71[v75];
									v75 = v83[3];
								end
							elseif (v84 <= 75) then
								if (v84 <= (33 + 36)) then
									if ((2209 <= 3965) and (v84 <= (247 - (24 + 157)))) then
										if ((4874 > 2890) and (v84 > (129 - 64))) then
											if not v81[v83[4 - 2]] then
												v75 = v75 + 1 + 0;
											else
												v75 = v83[7 - 4];
											end
										else
											local v411;
											local v412;
											v81[v83[382 - (262 + 118)]] = v81[v83[1086 - (1038 + 45)]][v83[8 - 4]];
											v75 = v75 + (231 - (19 + 211));
											v83 = v71[v75];
											v412 = v83[115 - (88 + 25)];
											v411 = v81[v83[7 - 4]];
											v81[v412 + 1 + 0] = v411;
											v81[v412] = v411[v83[4 + 0]];
											v75 = v75 + (1037 - (1007 + 29));
											v83 = v71[v75];
											v412 = v83[1 + 1];
											v81[v412](v81[v412 + (2 - 1)]);
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v62[v83[3]];
											v75 = v75 + (812 - (340 + 471));
											v83 = v71[v75];
											v412 = v83[4 - 2];
											v81[v412] = v81[v412]();
											v75 = v75 + (590 - (276 + 313));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v61[v83[3 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1975 - (495 + 1477)]][v83[11 - 7]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[405 - (342 + 61)]] = v81[v83[2 + 1]] - v81[v83[169 - (4 + 161)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											if (v83[6 - 4] <= v81[v83[10 - 6]]) then
												v75 = v75 + 1;
											else
												v75 = v83[3];
											end
										end
									elseif ((v84 <= 67) or (1525 >= 4520)) then
										local v429;
										local v430;
										local v431, v432;
										local v433;
										local v434;
										v81[v83[499 - (322 + 175)]] = v62[v83[566 - (173 + 390)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v434 = v83[1 + 1];
										v433 = v81[v83[317 - (203 + 111)]];
										v81[v434 + 1] = v433;
										v81[v434] = v433[v83[1 + 3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v61[v83[3 + 0]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + (707 - (57 + 649));
										v83 = v71[v75];
										v81[v83[386 - (328 + 56)]] = v83[1 + 2];
										v75 = v75 + (513 - (433 + 79));
										v83 = v71[v75];
										v434 = v83[1 + 1];
										v431, v432 = v74(v81[v434](v13(v81, v434 + 1 + 0, v83[9 - 6])));
										v76 = (v432 + v434) - (4 - 3);
										v430 = 0;
										for v881 = v434, v76 do
											v430 = v430 + 1 + 0;
											v81[v881] = v431[v430];
										end
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v434 = v83[1038 - (562 + 474)];
										v81[v434] = v81[v434](v13(v81, v434 + 1, v76));
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v62[v83[908 - (76 + 829)]];
										v75 = v75 + (1674 - (1506 + 167));
										v83 = v71[v75];
										v434 = v83[2];
										v433 = v81[v83[5 - 2]];
										v81[v434 + (267 - (58 + 208))] = v433;
										v81[v434] = v433[v83[3 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v61[v83[12 - 9]];
										v75 = v75 + (338 - (258 + 79));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[5 - 2];
										v75 = v75 + (1471 - (1219 + 251));
										v83 = v71[v75];
										v81[v83[1673 - (1231 + 440)]] = v83[61 - (34 + 24)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v434 = v83[3 - 1];
										v431, v432 = v74(v81[v434](v13(v81, v434 + 1 + 0, v83[8 - 5])));
										v76 = (v432 + v434) - (3 - 2);
										v430 = 0 - 0;
										for v884 = v434, v76 do
											v430 = v430 + (3 - 2);
											v81[v884] = v431[v430];
										end
										v75 = v75 + 1;
										v83 = v71[v75];
										v434 = v83[2];
										v431, v432 = v74(v81[v434](v13(v81, v434 + (2 - 1), v76)));
										v76 = (v432 + v434) - 1;
										v430 = 1589 - (877 + 712);
										for v887 = v434, v76 do
											v430 = v430 + 1 + 0;
											v81[v887] = v431[v430];
										end
										v75 = v75 + (755 - (242 + 512));
										v83 = v71[v75];
										v434 = v83[3 - 1];
										v429 = v81[v434];
										for v890 = v434 + (628 - (92 + 535)), v76 do
											v7(v429, v81[v890]);
										end
									elseif (v84 > (54 + 14)) then
										local v1423 = 0;
										local v1424;
										local v1425;
										local v1426;
										while true do
											if ((v1423 == (1 - 0)) or (838 < 774)) then
												v1426 = 0 + 0;
												for v2962 = v1424, v83[14 - 10] do
													local v2963 = 0 + 0;
													while true do
														if ((v2963 == (0 + 0)) or (4307 <= 3577)) then
															v1426 = v1426 + 1 + 0;
															v81[v2962] = v1425[v1426];
															break;
														end
													end
												end
												break;
											end
											if ((4750 > 4087) and ((0 - 0) == v1423)) then
												v1424 = v83[2 - 0];
												v1425 = {v81[v1424](v81[v1424 + (1285 - (299 + 985))])};
												v1423 = 1 + 0;
											end
										end
									else
										v81[v83[6 - 4]] = v81[v83[96 - (86 + 7)]] % v83[16 - 12];
									end
								elseif (v84 <= (7 + 65)) then
									if ((4674 > 395) and (v84 <= (950 - (672 + 208)))) then
										local v463;
										local v464, v465;
										local v466;
										local v467;
										v467 = v83[1 + 1];
										v466 = v81[v83[135 - (14 + 118)]];
										v81[v467 + (446 - (339 + 106))] = v466;
										v81[v467] = v466[v83[4 + 0]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1397 - (440 + 955)]] = v61[v83[3 + 0]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[7 - 4];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v467 = v83[2];
										v464, v465 = v74(v81[v467](v13(v81, v467 + (354 - (260 + 93)), v83[3])));
										v76 = (v465 + v467) - (1 + 0);
										v463 = 0;
										for v891 = v467, v76 do
											v463 = v463 + 1;
											v81[v891] = v464[v463];
										end
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v467 = v83[3 - 1];
										v81[v467] = v81[v467](v13(v81, v467 + 1, v76));
										v75 = v75 + (1975 - (1181 + 793));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[310 - (105 + 202)]][v83[4 + 0]];
										v75 = v75 + (811 - (352 + 458));
										v83 = v71[v75];
										if (v81[v83[7 - 5]] or (3676 <= 204)) then
											v75 = v75 + (2 - 1);
										else
											v75 = v83[3 + 0];
										end
									elseif (v84 == (207 - 136)) then
										if (v83[951 - (438 + 511)] < v81[v83[4]]) then
											v75 = v83[1386 - (1262 + 121)];
										else
											v75 = v75 + (1069 - (728 + 340));
										end
									else
										v81[v83[2]] = v83[3] ^ v81[v83[1794 - (816 + 974)]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[3]] * v81[v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[341 - (163 + 176)]] = v61[v83[8 - 5]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[9 - 7]] = v81[v83[1 + 2]] % v81[v83[1814 - (1564 + 246)]];
										v75 = v75 + (346 - (124 + 221));
										v83 = v71[v75];
										do
											return v81[v83[2 + 0]];
										end
										v75 = v75 + (452 - (115 + 336));
										v83 = v71[v75];
										v75 = v83[6 - 3];
									end
								elseif ((v84 <= (16 + 57)) or (3067 <= 2992)) then
									v81[v83[48 - (45 + 1)]] = v83[1 + 2] ~= (1990 - (1282 + 708));
								elseif ((v84 > 74) or (2461 > 3170)) then
									local v1436 = 1212 - (583 + 629);
									local v1437;
									local v1438;
									local v1439;
									while true do
										if ((v1436 == (0 + 0)) or (1807 >= 4152)) then
											v1437 = v83[5 - 3];
											v1438 = v81[v1437];
											v1436 = 1 + 0;
										end
										if (v1436 == (1171 - (943 + 227))) then
											v1439 = v81[v1437 + 1 + 1];
											if (v1439 > (1631 - (1539 + 92))) then
												if (v1438 > v81[v1437 + (1947 - (706 + 1240))]) then
													v75 = v83[261 - (81 + 177)];
												else
													v81[v1437 + (8 - 5)] = v1438;
												end
											elseif (v1438 < v81[v1437 + (258 - (212 + 45))]) then
												v75 = v83[9 - 6];
											else
												v81[v1437 + 3] = v1438;
											end
											break;
										end
									end
								else
									local v1440 = 1946 - (708 + 1238);
									local v1441;
									local v1442;
									local v1443;
									local v1444;
									while true do
										if (v1440 == (1 + 4)) then
											v1441 = 0 + 0;
											for v2964 = v1444, v76 do
												local v2965 = 1667 - (586 + 1081);
												while true do
													if ((0 == v2965) or (4505 < 3359)) then
														v1441 = v1441 + 1;
														v81[v2964] = v1442[v1441];
														break;
													end
												end
											end
											v75 = v75 + (512 - (348 + 163));
											v1440 = 6 + 0;
										end
										if ((v1440 == (284 - (215 + 65))) or (2346 <= 1670)) then
											v1444 = v83[2];
											v1442, v1443 = v74(v81[v1444](v13(v81, v1444 + (2 - 1), v83[1862 - (1541 + 318)])));
											v76 = (v1443 + v1444) - (1 + 0);
											v1440 = 3 + 2;
										end
										if ((2999 < 4479) and (v1440 == (5 + 1))) then
											v83 = v71[v75];
											v1444 = v83[1752 - (1036 + 714)];
											v81[v1444] = v81[v1444](v13(v81, v1444 + 1 + 0, v76));
											v1440 = 7;
										end
										if ((v1440 == (2 + 0)) or (3351 <= 2740)) then
											v81[v83[1282 - (883 + 397)]] = v83[593 - (563 + 27)];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1440 = 1989 - (1369 + 617);
										end
										if (v1440 == (1490 - (85 + 1402))) then
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1440 = 407 - (274 + 129);
										end
										if ((v1440 == (217 - (12 + 205))) or (2488 <= 232)) then
											v1441 = nil;
											v1442, v1443 = nil;
											v1444 = nil;
											v1440 = 1 + 0;
										end
										if (v1440 == 1) then
											v81[v83[7 - 5]] = v61[v83[3 + 0]];
											v75 = v75 + (385 - (27 + 357));
											v83 = v71[v75];
											v1440 = 482 - (91 + 389);
										end
										if ((243 <= 273) and (v1440 == (304 - (90 + 207)))) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											if v81[v83[863 - (706 + 155)]] then
												v75 = v75 + 1;
											else
												v75 = v83[3];
											end
											break;
										end
									end
								end
							elseif (v84 <= (1875 - (730 + 1065))) then
								if (v84 <= (1640 - (1339 + 224))) then
									if ((v84 > (39 + 37)) or (647 >= 3520)) then
										local v484 = 0 + 0;
										local v485;
										local v486;
										local v487;
										local v488;
										local v489;
										while true do
											if ((452 <= 2678) and (v484 == (8 - 2))) then
												v489 = v83[845 - (268 + 575)];
												v485 = v81[v83[1297 - (919 + 375)]];
												v81[v489 + 1] = v485;
												v81[v489] = v485[v83[10 - 6]];
												break;
											end
											if (v484 == (974 - (180 + 791))) then
												v83 = v71[v75];
												v489 = v83[1807 - (323 + 1482)];
												v487, v488 = v74(v81[v489](v13(v81, v489 + (1919 - (1177 + 741)), v83[3])));
												v76 = (v488 + v489) - (1 + 0);
												v484 = 14 - 10;
											end
											if (v484 == (2 + 3)) then
												v489 = v83[3 - 1];
												v81[v489] = v81[v489](v13(v81, v489 + 1 + 0, v76));
												v75 = v75 + (110 - (96 + 13));
												v83 = v71[v75];
												v484 = 1927 - (962 + 959);
											end
											if ((v484 == (4 - 2)) or (1125 > 4951)) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1353 - (461 + 890)]] = v83[3];
												v75 = v75 + 1 + 0;
												v484 = 11 - 8;
											end
											if (v484 == (243 - (19 + 224))) then
												v485 = nil;
												v486 = nil;
												v487, v488 = nil;
												v489 = nil;
												v484 = 1 + 0;
											end
											if (v484 == (199 - (37 + 161))) then
												v81[v83[1 + 1]] = v61[v83[2 + 1]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v484 = 63 - (60 + 1);
											end
											if ((2144 < 4379) and (v484 == (927 - (826 + 97)))) then
												v486 = 0 + 0;
												for v2482 = v489, v76 do
													local v2483 = 0 - 0;
													while true do
														if (v2483 == (0 - 0)) then
															v486 = v486 + (686 - (375 + 310));
															v81[v2482] = v487[v486];
															break;
														end
													end
												end
												v75 = v75 + (2000 - (1864 + 135));
												v83 = v71[v75];
												v484 = 5;
											end
										end
									else
										local v490;
										v81[v83[4 - 2]] = v81[v83[3]][v83[1 + 3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v61[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v490 = v83[1133 - (314 + 817)];
										v81[v490](v81[v490 + 1 + 0]);
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[216 - (32 + 182)]] = v61[v83[3 + 0]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[67 - (39 + 26)]] = v81[v83[3]][v83[4]];
										v75 = v75 + (145 - (54 + 90));
										v83 = v71[v75];
										if v81[v83[200 - (45 + 153)]] then
											v75 = v75 + 1 + 0;
										else
											v75 = v83[555 - (457 + 95)];
										end
									end
								elseif (v84 <= (78 + 0)) then
									local v500 = 0 - 0;
									while true do
										if (v500 == 1) then
											v62[v83[3]] = v81[v83[4 - 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v500 = 7 - 5;
										end
										if (v500 == (1 + 1)) then
											v81[v83[6 - 4]] = v83[8 - 5];
											v75 = v75 + (749 - (485 + 263));
											v83 = v71[v75];
											v500 = 710 - (575 + 132);
										end
										if (v500 == (865 - (750 + 111))) then
											v81[v83[1012 - (445 + 565)]] = v62[v83[3 + 0]];
											break;
										end
										if (v500 == (0 + 0)) then
											v81[v83[2 - 0]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v500 = 311 - (189 + 121);
										end
										if ((2747 >= 132) and (v500 == (1 + 2))) then
											v81[v83[1349 - (634 + 713)]] = v83[541 - (493 + 45)] ^ v81[v83[4]];
											v75 = v75 + (969 - (493 + 475));
											v83 = v71[v75];
											v500 = 2 + 2;
										end
									end
								elseif (v84 > (863 - (158 + 626))) then
									do
										return v81[v83[1 + 1]];
									end
								else
									for v2175 = v83[2], v83[4 - 1] do
										v81[v2175] = nil;
									end
								end
							elseif ((602 <= 3077) and (v84 <= 83)) then
								if (v84 <= (19 + 62)) then
									local v501 = 0 + 0;
									while true do
										if ((2064 <= 2199) and (v501 == (1094 - (1035 + 56)))) then
											v81[v83[2]] = v83[962 - (114 + 845)];
											break;
										end
										if ((v501 == (0 + 0)) or (653 > 4037)) then
											v81[v83[5 - 3]] = v81[v83[3]] % v81[v83[4 + 0]];
											v75 = v75 + (1050 - (179 + 870));
											v83 = v71[v75];
											v81[v83[2 - 0]] = v61[v83[3]];
											v501 = 879 - (827 + 51);
										end
										if (v501 == 1) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[2 + 1]] % v81[v83[477 - (95 + 378)]];
											v75 = v75 + 1 + 0;
											v501 = 2 - 0;
										end
										if (v501 == 2) then
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[1014 - (334 + 677)]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v501 = 1059 - (1049 + 7);
										end
									end
								elseif ((2492 <= 3670) and (v84 > (358 - 276))) then
									v75 = v83[3];
								else
									local v1447 = 0 - 0;
									local v1448;
									local v1449;
									local v1450;
									local v1451;
									while true do
										if ((2442 == 2442) and (v1447 == (1 + 2))) then
											v1451 = v83[5 - 3];
											v1449, v1450 = v74(v81[v1451](v13(v81, v1451 + (1 - 0), v83[2 + 1])));
											v76 = (v1450 + v1451) - (1421 - (1004 + 416));
											v1448 = 1957 - (1621 + 336);
											v1447 = 4;
										end
										if ((2817 == 2817) and ((1939 - (337 + 1602)) == v1447)) then
											v1448 = nil;
											v1449, v1450 = nil;
											v1451 = nil;
											v81[v83[1519 - (1014 + 503)]] = v61[v83[3]];
											v1447 = 1016 - (446 + 569);
										end
										if ((3905 == 3905) and ((1 + 3) == v1447)) then
											for v2966 = v1451, v76 do
												local v2967 = 0 - 0;
												while true do
													if ((v2967 == (0 + 0)) or (3802 >= 4741)) then
														v1448 = v1448 + (1 - 0);
														v81[v2966] = v1449[v1448];
														break;
													end
												end
											end
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1451 = v83[507 - (223 + 282)];
											v1447 = 1 + 4;
										end
										if (v1447 == (2 - 0)) then
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1447 = 673 - (623 + 47);
										end
										if ((v1447 == (46 - (32 + 13))) or (1919 > 2409)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3 + 0];
											v75 = v75 + (1802 - (1070 + 731));
											v1447 = 2;
										end
										if (v1447 == 5) then
											v81[v1451] = v81[v1451](v13(v81, v1451 + 1 + 0, v76));
											v75 = v75 + (1405 - (1257 + 147));
											v83 = v71[v75];
											if ((615 <= 852) and v81[v83[1 + 1]]) then
												v75 = v75 + 1;
											else
												v75 = v83[5 - 2];
											end
											break;
										end
									end
								end
							elseif ((3908 >= 749) and (v84 <= (217 - (98 + 35)))) then
								local v502 = 0;
								local v503;
								local v504;
								local v505;
								local v506;
								while true do
									if ((1 + 0) == v502) then
										v81[v83[6 - 4]] = v61[v83[9 - 6]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v502 = 2 + 0;
									end
									if ((3666 > 678) and (v502 == (3 + 2))) then
										v503 = 0;
										for v2484 = v506, v76 do
											v503 = v503 + (558 - (395 + 162));
											v81[v2484] = v504[v503];
										end
										v75 = v75 + 1 + 0;
										v502 = 1947 - (816 + 1125);
									end
									if (v502 == (3 - 0)) then
										v81[v83[1150 - (701 + 447)]] = v83[3];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v502 = 6 - 2;
									end
									if (v502 == (1343 - (391 + 950))) then
										v81[v83[5 - 3]] = v83[7 - 4];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v502 = 3;
									end
									if (v502 == (0 + 0)) then
										v503 = nil;
										v504, v505 = nil;
										v506 = nil;
										v502 = 1 + 0;
									end
									if (v502 == (21 - 15)) then
										v83 = v71[v75];
										v506 = v83[1524 - (251 + 1271)];
										v81[v506](v13(v81, v506 + 1 + 0, v76));
										break;
									end
									if (v502 == (10 - 6)) then
										v506 = v83[4 - 2];
										v504, v505 = v74(v81[v506](v13(v81, v506 + (1 - 0), v83[1262 - (1147 + 112)])));
										v76 = (v505 + v506) - (1 + 0);
										v502 = 9 - 4;
									end
								end
							elseif ((912 < 2844) and (v84 == (23 + 62))) then
								local v1452;
								local v1453, v1454;
								local v1455;
								v1455 = v83[699 - (335 + 362)];
								v81[v1455] = v81[v1455](v13(v81, v1455 + 1 + 0, v76));
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v62[v83[7 - 4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[7 - 5]] = v81[v83[14 - 11]][v83[11 - 7]];
								v75 = v75 + (567 - (237 + 329));
								v83 = v71[v75];
								v81[v83[7 - 5]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1126 - (408 + 716)]] = v83[11 - 8];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[823 - (344 + 477)]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v1455 = v83[1763 - (1188 + 573)];
								v81[v1455] = v81[v1455](v13(v81, v1455 + 1, v83[7 - 4]));
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]][v83[3 + 0]] = v81[v83[12 - 8]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[4 - 2]] = v62[v83[1532 - (508 + 1021)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[1169 - (228 + 938)]][v83[689 - (332 + 353)]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[3 + 0];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[425 - (18 + 405)]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v1455 = v83[2 - 0];
								v81[v1455] = v81[v1455](v13(v81, v1455 + (979 - (194 + 784)), v83[1773 - (694 + 1076)]));
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1906 - (122 + 1782)]][v83[3 + 0]] = v81[v83[4 + 0]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[8 - 5]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1972 - (214 + 1756)]] = v83[14 - 11];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[588 - (217 + 368)];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v1455 = v83[2];
								v81[v1455] = v81[v1455](v13(v81, v1455 + 1, v83[2 + 1]));
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]][v83[1 + 2]] = v81[v83[893 - (844 + 45)]];
								v75 = v75 + (285 - (242 + 42));
								v83 = v71[v75];
								v81[v83[3 - 1]][v83[6 - 3]] = v83[4];
								v75 = v75 + (1201 - (132 + 1068));
								v83 = v71[v75];
								v81[v83[2 - 0]] = v62[v83[3]];
								v75 = v75 + (1624 - (214 + 1409));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3 + 0]][v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1636 - (497 + 1137)]] = v83[3];
								v75 = v75 + (941 - (9 + 931));
								v83 = v71[v75];
								v81[v83[291 - (181 + 108)]] = v83[2 + 1];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[3];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v1455 = v83[2];
								v81[v1455] = v81[v1455](v13(v81, v1455 + 1, v83[1 + 2]));
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]][v83[479 - (296 + 180)]] = v81[v83[1407 - (1183 + 220)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v62[v83[1268 - (1037 + 228)]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]][v83[11 - 7]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[736 - (527 + 207)]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[529 - (187 + 340)]] = v83[1873 - (1298 + 572)];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[172 - (144 + 26)]] = v83[7 - 4];
								v75 = v75 + 1;
								v83 = v71[v75];
								v1455 = v83[2];
								v81[v1455] = v81[v1455](v13(v81, v1455 + 1, v83[6 - 3]));
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[5 - 3]][v83[6 - 3]] = v81[v83[19 - 15]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 - 0]][v83[3]] = v81[v83[4]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v62[v83[205 - (5 + 197)]];
								v75 = v75 + (687 - (339 + 347));
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[10 - 7]][v83[380 - (365 + 11)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[11 - 8]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]] = v83[927 - (837 + 87)];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v1455 = v83[2];
								v1453, v1454 = v74(v81[v1455](v13(v81, v1455 + 1, v83[1673 - (837 + 833)])));
								v76 = (v1454 + v1455) - (1 + 0);
								v1452 = 1387 - (356 + 1031);
								for v2200 = v1455, v76 do
									v1452 = v1452 + 1 + 0;
									v81[v2200] = v1453[v1452];
								end
								v75 = v75 + (1647 - (73 + 1573));
								v83 = v71[v75];
								v1455 = v83[1390 - (1307 + 81)];
								v81[v1455] = v81[v1455](v13(v81, v1455 + (235 - (7 + 227)), v76));
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v62[v83[169 - (90 + 76)]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3 + 0]][v83[4 + 0]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[262 - (197 + 63)]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[1 + 2];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[1 + 2];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1371 - (618 + 751)]] = v83[3 + 0];
								v75 = v75 + (1911 - (206 + 1704));
								v83 = v71[v75];
								v1455 = v83[2];
								v81[v1455] = v81[v1455](v13(v81, v1455 + 1, v83[3]));
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 - 0]][v83[5 - 2]] = v81[v83[4]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1277 - (155 + 1120)]] = v62[v83[1509 - (396 + 1110)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[1 + 2]][v83[4 + 0]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[978 - (230 + 746)]] = v83[604 - (473 + 128)];
								v75 = v75 + (49 - (39 + 9));
								v83 = v71[v75];
								v81[v83[268 - (38 + 228)]] = v83[5 - 2];
								v75 = v75 + (474 - (106 + 367));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[1865 - (354 + 1508)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[9 - 6];
								v75 = v75 + 1;
								v83 = v71[v75];
								v1455 = v83[2 + 0];
								v81[v1455] = v81[v1455](v13(v81, v1455 + 1, v83[2 + 1]));
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1246 - (334 + 910)]][v83[3]] = v81[v83[899 - (92 + 803)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1184 - (1035 + 146)]];
								v75 = v75 + (617 - (230 + 386));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[1513 - (353 + 1157)];
								v75 = v75 + (1115 - (53 + 1061));
								v83 = v71[v75];
								v81[v83[2]] = v83[1638 - (1568 + 67)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v1455 = v83[1 + 1];
								v81[v1455] = v81[v1455](v13(v81, v1455 + (2 - 1), v83[8 - 5]));
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2 + 0]][v83[1215 - (615 + 597)]] = v81[v83[4 + 0]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2 + 0]][v83[3]] = v83[1 + 3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1901 - (1056 + 843)]] = v62[v83[5 - 2]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[2 + 1]][v83[1980 - (286 + 1690)]];
								v75 = v75 + (912 - (98 + 813));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[7 - 4];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + (508 - (263 + 244));
								v83 = v71[v75];
								v81[v83[2]] = v83[3 + 0];
								v75 = v75 + (1688 - (1502 + 185));
								v83 = v71[v75];
								v1455 = v83[1 + 1];
								v81[v1455] = v81[v1455](v13(v81, v1455 + 1, v83[14 - 11]));
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1529 - (629 + 898)]][v83[3]] = v81[v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v62[v83[3]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[368 - (12 + 353)]][v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[1914 - (1680 + 231)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3];
								v75 = v75 + (1150 - (212 + 937));
								v83 = v71[v75];
								v81[v83[2]] = v83[2 + 1];
								v75 = v75 + (1063 - (111 + 951));
								v83 = v71[v75];
								v1455 = v83[1 + 1];
								v81[v1455] = v81[v1455](v13(v81, v1455 + 1, v83[30 - (18 + 9)]));
							else
								v81[v83[1 + 1]] = v81[v83[537 - (31 + 503)]] - v81[v83[1636 - (595 + 1037)]];
							end
						elseif ((v84 <= (1573 - (189 + 1255))) or (574 > 4812)) then
							if (v84 <= (40 + 67)) then
								if (v84 <= (148 - 52)) then
									if ((3142 == 3142) and (v84 <= (1370 - (1170 + 109)))) then
										if (v84 <= (1905 - (348 + 1469))) then
											if ((2732 <= 3640) and (v84 == (1376 - (1115 + 174)))) then
												local v507 = 0 - 0;
												local v508;
												local v509;
												local v510;
												local v511;
												local v512;
												while true do
													if (v507 == (1020 - (85 + 929))) then
														v83 = v71[v75];
														v512 = v83[2 + 0];
														v511 = v81[v83[1870 - (1151 + 716)]];
														v81[v512 + 1 + 0] = v511;
														v81[v512] = v511[v83[4 + 0]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v507 = 7;
													end
													if ((1709 - (95 + 1609)) == v507) then
														v509 = 0 - 0;
														for v2487 = v512, v76 do
															v509 = v509 + (759 - (364 + 394));
															v81[v2487] = v508[v509];
														end
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v512 = v83[2];
														v81[v512] = v81[v512](v13(v81, v512 + 1, v76));
														v75 = v75 + 1 + 0;
														v507 = 6;
													end
													if ((v507 == (0 + 0)) or (1850 < 424)) then
														v508 = nil;
														v509 = nil;
														v508, v510 = nil;
														v511 = nil;
														v512 = nil;
														v81[v83[2 + 0]] = v62[v83[2 + 1]];
														v75 = v75 + 1 + 0;
														v507 = 1;
													end
													if ((1 + 1) == v507) then
														v81[v83[2]] = v61[v83[3 + 0]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v512 = v83[958 - (719 + 237)];
														v511 = v81[v83[3]];
														v81[v512 + (2 - 1)] = v511;
														v81[v512] = v511[v83[4 + 0]];
														v507 = 7 - 4;
													end
													if (v507 == (2 - 1)) then
														v83 = v71[v75];
														v81[v83[4 - 2]] = v81[v83[1994 - (761 + 1230)]][v83[197 - (80 + 113)]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v62[v83[1 + 2]];
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v507 = 2;
													end
													if (((1 + 2) == v507) or (925 <= 180)) then
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[1 + 1]] = v61[v83[1246 - (965 + 278)]];
														v75 = v75 + (1730 - (1391 + 338));
														v83 = v71[v75];
														v81[v83[4 - 2]] = v83[3 + 0];
														v75 = v75 + (1 - 0);
														v507 = 2 + 2;
													end
													if (v507 == (1415 - (496 + 912))) then
														v512 = v83[6 - 4];
														v508, v510 = v74(v81[v512](v81[v512 + 1]));
														v76 = (v510 + v512) - 1;
														v509 = 0 + 0;
														for v2490 = v512, v76 do
															v509 = v509 + 1;
															v81[v2490] = v508[v509];
														end
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v507 = 8;
													end
													if ((v507 == (1338 - (1190 + 140))) or (2692 <= 936)) then
														v512 = v83[1 + 1];
														v508 = {v81[v512](v13(v81, v512 + 1, v76))};
														v509 = 0;
														for v2493 = v512, v83[722 - (317 + 401)] do
															v509 = v509 + (950 - (303 + 646));
															v81[v2493] = v508[v509];
														end
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v75 = v83[1735 - (1675 + 57)];
														break;
													end
													if ((1308 > 1189) and (v507 == 4)) then
														v83 = v71[v75];
														v81[v83[2]] = v83[2 + 1];
														v75 = v75 + 1;
														v83 = v71[v75];
														v512 = v83[4 - 2];
														v508, v510 = v74(v81[v512](v13(v81, v512 + 1, v83[1 + 2])));
														v76 = (v510 + v512) - (978 - (338 + 639));
														v507 = 384 - (320 + 59);
													end
												end
											else
												local v513 = v83[2];
												local v514, v515 = v74(v81[v513](v13(v81, v513 + 1 + 0, v83[3])));
												v76 = (v515 + v513) - (733 - (628 + 104));
												local v516 = 0 - 0;
												for v894 = v513, v76 do
													v516 = v516 + (1892 - (439 + 1452));
													v81[v894] = v514[v516];
												end
											end
										elseif ((v84 <= (2036 - (105 + 1842))) or (316 > 4827)) then
											v81[v83[9 - 7]] = v83[7 - 4] ^ v81[v83[19 - 15]];
										elseif (v84 > 90) then
											local v1546 = v83[1 + 1];
											do
												return v13(v81, v1546, v76);
											end
										else
											local v1547;
											local v1548;
											v1548 = v83[3 - 1];
											v81[v1548] = v81[v1548](v13(v81, v1548 + 1 + 0, v83[1167 - (274 + 890)]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1548 = v83[2 + 0];
											v1547 = v81[v83[1 + 2]];
											v81[v1548 + 1 + 0] = v1547;
											v81[v1548] = v1547[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v61[v83[822 - (731 + 88)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1548 = v83[5 - 3];
											v81[v1548] = v81[v1548](v13(v81, v1548 + 1, v83[8 - 5]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1 + 2] ~= (0 + 0);
										end
									elseif ((2099 < 2841) and (v84 <= (63 + 30))) then
										if ((v84 == (250 - (139 + 19))) or (4085 < 259)) then
											local v518;
											v81[v83[1 + 1]] = v81[v83[1996 - (1687 + 306)]][v83[14 - 10]];
											v75 = v75 + (1155 - (1018 + 136));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v61[v83[13 - 10]];
											v75 = v75 + (816 - (117 + 698));
											v83 = v71[v75];
											v81[v83[483 - (305 + 176)]] = v81[v83[1 + 2]] / v83[4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[3]] + v81[v83[4 + 0]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[6 - 3]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[3]];
											v75 = v75 + (261 - (159 + 101));
											v83 = v71[v75];
											v518 = v83[9 - 7];
											v81[v518] = v81[v518](v13(v81, v518 + (3 - 2), v83[2 + 1]));
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[1 + 2]];
											v75 = v75 + (267 - (112 + 154));
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[33 - (21 + 10)]] = v62[v83[1722 - (531 + 1188)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[665 - (96 + 567)]] = v81[v83[3 - 0]][v83[2 + 2]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1697 - (867 + 828)]] = v81[v83[6 - 3]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[6 - 3]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[2 + 1]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v518 = v83[773 - (134 + 637)];
											v81[v518] = v81[v518](v13(v81, v518 + 1 + 0, v83[1160 - (775 + 382)]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]][v83[610 - (45 + 562)]] = v81[v83[866 - (545 + 317)]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1028 - (763 + 263)]] = v83[1 + 2];
										elseif (v81[v83[1752 - (512 + 1238)]] < v83[4]) then
											v75 = v83[1597 - (272 + 1322)];
										else
											v75 = v75 + 1;
										end
									elseif (v84 <= (175 - 81)) then
										local v544 = v83[1248 - (533 + 713)];
										local v545 = {v81[v544](v13(v81, v544 + (826 - (499 + 326)), v76))};
										local v546 = 0 - 0;
										for v897 = v544, v83[428 - (104 + 320)] do
											v546 = v546 + 1;
											v81[v897] = v545[v546];
										end
									elseif (v84 == (2092 - (1929 + 68))) then
										local v1564 = 1323 - (1206 + 117);
										local v1565;
										while true do
											if (v1564 == (5 + 2)) then
												v75 = v75 + (1593 - (683 + 909));
												v83 = v71[v75];
												v81[v83[5 - 3]] = v81[v83[5 - 2]][v83[781 - (772 + 5)]];
												v1564 = 1435 - (19 + 1408);
											end
											if ((290 - (134 + 154)) == v1564) then
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[3];
												v75 = v75 + (3 - 2);
												v1564 = 3;
											end
											if (((1 + 0) == v1564) or (4885 <= 348)) then
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[205 - (10 + 192)];
												v75 = v75 + (48 - (13 + 34));
												v1564 = 2;
											end
											if (v1564 == (1292 - (342 + 947))) then
												v83 = v71[v75];
												v81[v83[8 - 6]] = v83[3];
												v75 = v75 + 1;
												v1564 = 4;
											end
											if ((475 < 4062) and ((1713 - (119 + 1589)) == v1564)) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2 - 0]][v83[3]] = v81[v83[556 - (545 + 7)]];
												v1564 = 6;
											end
											if (v1564 == (10 - 6)) then
												v83 = v71[v75];
												v1565 = v83[2];
												v81[v1565] = v81[v1565](v13(v81, v1565 + 1 + 0, v83[3]));
												v1564 = 1708 - (494 + 1209);
											end
											if (v1564 == 0) then
												v1565 = nil;
												v81[v83[5 - 3]] = v83[1001 - (197 + 801)];
												v75 = v75 + (1 - 0);
												v1564 = 4 - 3;
											end
											if ((960 - (919 + 35)) == v1564) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v62[v83[3]];
												v1564 = 28 - 21;
											end
											if (v1564 == (475 - (369 + 98))) then
												v75 = v75 + (1116 - (400 + 715));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
												v1564 = 4 + 5;
											end
											if (v1564 == (1334 - (744 + 581))) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1624 - (653 + 969)]] = v83[5 - 2];
												break;
											end
										end
									else
										v81[v83[1633 - (12 + 1619)]] = #v81[v83[166 - (103 + 60)]];
									end
								elseif ((v84 <= (497 - 396)) or (3888 <= 914)) then
									if (v84 <= (428 - 330)) then
										if ((1150 == 1150) and (v84 > (462 - 365))) then
											local v547 = 1662 - (710 + 952);
											local v548;
											while true do
												if (v547 == 6) then
													v81[v83[1870 - (555 + 1313)]] = v81[v83[3 + 0]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v83[3 + 0];
													break;
												end
												if ((842 == 842) and (v547 == (1473 - (1261 + 207)))) then
													v81[v548] = v81[v548](v81[v548 + (253 - (245 + 7))]);
													v75 = v75 + (748 - (212 + 535));
													v83 = v71[v75];
													v81[v83[9 - 7]] = v81[v83[1479 - (905 + 571)]];
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v547 = 8 - 2;
												end
												if (v547 == 0) then
													v548 = nil;
													v81[v83[2]] = v81[v83[3]] % v83[15 - 11];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1465 - (522 + 941)]] = v81[v83[1514 - (292 + 1219)]];
													v75 = v75 + (1113 - (787 + 325));
													v547 = 2 - 1;
												end
												if ((2 + 0) == v547) then
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[6 - 3]] / v83[538 - (424 + 110)];
													v75 = v75 + 1;
													v83 = v71[v75];
													v548 = v83[2 + 0];
													v81[v548] = v81[v548](v81[v548 + 1]);
													v547 = 3;
												end
												if (v547 == (1 + 0)) then
													v83 = v71[v75];
													v81[v83[2]] = v62[v83[1 + 2]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[315 - (33 + 279)]][v83[4]];
													v75 = v75 + 1;
													v547 = 1 + 1;
												end
												if (v547 == (1357 - (1338 + 15))) then
													v75 = v75 + (1424 - (528 + 895));
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[2 + 1]] / v83[1928 - (1606 + 318)];
													v75 = v75 + (1820 - (298 + 1521));
													v83 = v71[v75];
													v548 = v83[8 - 6];
													v547 = 315 - (154 + 156);
												end
												if (v547 == 3) then
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v81[v83[2]] = v62[v83[5 - 2]];
													v75 = v75 + (1116 - (712 + 403));
													v83 = v71[v75];
													v81[v83[452 - (168 + 282)]] = v81[v83[3]][v83[8 - 4]];
													v547 = 4 + 0;
												end
											end
										else
											local v549 = 0 + 0;
											while true do
												if ((1894 <= 2417) and (v549 == (5 - 3))) then
													v81[v83[2]] = v81[v83[1454 - (1242 + 209)]] % v81[v83[683 - (20 + 659)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v549 = 3 + 0;
												end
												if (v549 == (4 - 1)) then
													do
														return v81[v83[3 - 1]];
													end
													v75 = v75 + (620 - (427 + 192));
													v83 = v71[v75];
													v549 = 8 - 4;
												end
												if (v549 == (1 + 0)) then
													v81[v83[1949 - (1427 + 520)]] = v61[v83[2 + 1]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v549 = 7 - 5;
												end
												if ((v549 == (4 + 0)) or (4128 <= 2799)) then
													v75 = v83[1235 - (712 + 520)];
													break;
												end
												if (v549 == 0) then
													v81[v83[4 - 2]] = v81[v83[1349 - (565 + 781)]] * v81[v83[569 - (35 + 530)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v549 = 1;
												end
											end
										end
									elseif (v84 <= (352 - 253)) then
										v81[v83[1380 - (1330 + 48)]] = v81[v83[3 + 0]][v83[1 + 3]];
									elseif (v84 > (174 - 74)) then
										local v1567;
										v81[v83[8 - 6]] = v81[v83[1172 - (854 + 315)]][v83[4]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v83[3] ^ v81[v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[47 - (31 + 13)]] * v81[v83[5 - 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1567 = v83[2];
										do
											return v81[v1567](v13(v81, v1567 + (2 - 1), v83[3]));
										end
										v75 = v75 + 1;
										v83 = v71[v75];
										v1567 = v83[2 + 0];
										do
											return v13(v81, v1567, v76);
										end
										v75 = v75 + 1;
										v83 = v71[v75];
										v75 = v83[566 - (281 + 282)];
									else
										v81[v83[2]] = v81[v83[8 - 5]] % v81[v83[3 + 1]];
									end
								elseif ((2146 > 1050) and (v84 <= (1053 - (216 + 733)))) then
									if ((v84 <= (1949 - (137 + 1710))) or (4536 <= 714)) then
										local v552 = 0 - 0;
										local v553;
										local v554;
										while true do
											if (v552 == (538 - (100 + 438))) then
												v553 = nil;
												v554 = nil;
												v554 = v83[1367 - (205 + 1160)];
												v81[v554] = v81[v554](v13(v81, v554 + 1 + 0, v83[3]));
												v552 = 1;
											end
											if (v552 == (3 + 1)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[1308 - (535 + 770)];
												v75 = v75 + 1 + 0;
												v552 = 3 + 2;
											end
											if ((1997 - (211 + 1783)) == v552) then
												v81[v83[1 + 1]] = v61[v83[1432 - (1236 + 193)]];
												v75 = v75 + (911 - (793 + 117));
												v83 = v71[v75];
												v81[v83[2]] = v83[1895 - (1607 + 285)];
												v552 = 864 - (747 + 113);
											end
											if ((1978 - (80 + 1896)) == v552) then
												v81[v554 + 1] = v553;
												v81[v554] = v553[v83[19 - 15]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v552 = 3;
											end
											if (((8 - 3) == v552) or (3612 <= 2781)) then
												v83 = v71[v75];
												v554 = v83[2 + 0];
												v81[v554] = v81[v554](v13(v81, v554 + (2 - 1), v83[2 + 1]));
												v75 = v75 + (2 - 1);
												v552 = 4 + 2;
											end
											if (v552 == (1 + 0)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v554 = v83[4 - 2];
												v553 = v81[v83[457 - (246 + 208)]];
												v552 = 1894 - (614 + 1278);
											end
											if (v552 == (3 + 3)) then
												v83 = v71[v75];
												v81[v83[316 - (249 + 65)]] = v83[6 - 3] ~= (1275 - (726 + 549));
												break;
											end
										end
									elseif (v84 > (70 + 33)) then
										local v1576 = 0;
										local v1577;
										while true do
											if (v1576 == (1431 - (916 + 508))) then
												v75 = v83[9 - 6];
												break;
											end
											if (v1576 == (4 + 1)) then
												v75 = v75 + (324 - (140 + 183));
												v83 = v71[v75];
												v1577 = v83[2];
												v1576 = 5 + 1;
											end
											if (v1576 == (564 - (297 + 267))) then
												v1577 = nil;
												v81[v83[2 + 0]] = v81[v83[345 - (37 + 305)]][v83[1270 - (323 + 943)]];
												v75 = v75 + 1;
												v1576 = 1 + 0;
											end
											if ((1465 <= 4830) and ((4 - 0) == v1576)) then
												v83 = v71[v75];
												v1577 = v83[1537 - (394 + 1141)];
												do
													return v81[v1577](v13(v81, v1577 + 1 + 0, v83[1 + 2]));
												end
												v1576 = 1 + 4;
											end
											if (v1576 == (3 - 0)) then
												v83 = v71[v75];
												v81[v83[2 - 0]] = v81[v83[3 + 0]] * v81[v83[4 + 0]];
												v75 = v75 + (530 - (87 + 442));
												v1576 = 4;
											end
											if (v1576 == (811 - (13 + 792))) then
												do
													return v13(v81, v1577, v76);
												end
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1576 = 3 + 4;
											end
											if (v1576 == (1 + 0)) then
												v83 = v71[v75];
												v81[v83[1867 - (1231 + 634)]] = -v81[v83[1769 - (1362 + 404)]];
												v75 = v75 + (2 - 1);
												v1576 = 2;
											end
											if (v1576 == (2 + 0)) then
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[1019 - (660 + 356)] ^ v81[v83[5 - 1]];
												v75 = v75 + 1 + 0;
												v1576 = 1953 - (1111 + 839);
											end
										end
									else
										local v1578 = 951 - (496 + 455);
										local v1579;
										local v1580;
										local v1581;
										local v1582;
										while true do
											if (v1578 == 8) then
												v1582 = v83[700 - (66 + 632)];
												v1580, v1581 = v74(v81[v1582](v13(v81, v1582 + (1 - 0), v83[1139 - (441 + 695)])));
												v76 = (v1581 + v1582) - (2 - 1);
												v1579 = 0;
												for v2968 = v1582, v76 do
													local v2969 = 0 - 0;
													while true do
														if (0 == v2969) then
															v1579 = v1579 + (4 - 3);
															v81[v2968] = v1580[v1579];
															break;
														end
													end
												end
												v75 = v75 + 1 + 0;
												v1578 = 1847 - (286 + 1552);
											end
											if (v1578 == (1286 - (1016 + 261))) then
												v83 = v71[v75];
												v1582 = v83[1322 - (708 + 612)];
												v81[v1582](v13(v81, v1582 + 1, v76));
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[2 + 1];
												v1578 = 389 - (113 + 266);
											end
											if ((1263 <= 3823) and ((1174 - (979 + 191)) == v1578)) then
												v83 = v71[v75];
												v1582 = v83[2 - 0];
												v81[v1582] = v81[v1582](v13(v81, v1582 + 1, v83[3]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1737 - (339 + 1396)]] = v83[1 + 2];
												v1578 = 4 + 1;
											end
											if (v1578 == (1 - 0)) then
												v81[v83[2 + 0]] = v83[1 + 2];
												v75 = v75 + (348 - (187 + 160));
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[9 - 6];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1578 = 2;
											end
											if (v1578 == (6 - 4)) then
												v1582 = v83[1 + 1];
												v81[v1582] = v81[v1582](v13(v81, v1582 + 1, v83[1 + 2]));
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[330 - (56 + 272)]] = v61[v83[3]];
												v75 = v75 + 1;
												v1578 = 2 + 1;
											end
											if (v1578 == (9 + 1)) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v75 = v83[3];
												break;
											end
											if ((36 == 36) and (v1578 == (5 + 2))) then
												v81[v83[642 - (455 + 185)]] = v83[3];
												v75 = v75 + (789 - (757 + 31));
												v83 = v71[v75];
												v81[v83[2001 - (762 + 1237)]] = v83[3];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v1578 = 277 - (265 + 4);
											end
											if ((3648 <= 3797) and (v1578 == (7 - 4))) then
												v83 = v71[v75];
												v81[v83[2]] = v83[2 + 1];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[5 - 2];
												v75 = v75 + (2 - 1);
												v1578 = 1 + 3;
											end
											if (v1578 == (13 - 8)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v1582 = v83[3 - 1];
												v81[v1582](v13(v81, v1582 + (1 - 0), v83[1737 - (1691 + 43)]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1578 = 6;
											end
											if ((128 < 2466) and (v1578 == (0 - 0))) then
												v1579 = nil;
												v1580, v1581 = nil;
												v1582 = nil;
												v81[v83[1 + 1]] = v61[v83[10 - 7]];
												v75 = v75 + (177 - (127 + 49));
												v83 = v71[v75];
												v1578 = 1681 - (281 + 1399);
											end
											if ((v1578 == (1665 - (184 + 1475))) or (3016 == 2370)) then
												v81[v83[2 - 0]] = v62[v83[6 - 3]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v61[v83[3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1578 = 1298 - (260 + 1031);
											end
										end
									end
								elseif (v84 <= 105) then
									v81[v83[1179 - (313 + 864)]] = v81[v83[695 - (655 + 37)]][v81[v83[4]]];
								elseif ((v84 == (91 + 15)) or (761 > 4318)) then
									local v1583;
									v81[v83[2]] = v81[v83[4 - 1]][v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3 + 0]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v1583 = v83[772 - (383 + 387)];
									v81[v1583] = v81[v1583](v81[v1583 + 1]);
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v61[v83[9 - 6]];
									v75 = v75 + 1;
									v83 = v71[v75];
									if ((v81[v83[2]] <= v81[v83[2 + 2]]) or (4532 <= 1223)) then
										v75 = v75 + 1 + 0;
									else
										v75 = v83[513 - (304 + 206)];
									end
								else
									local v1592 = 225 - (182 + 43);
									local v1593;
									local v1594;
									local v1595;
									while true do
										if ((v1592 == 0) or (695 == 3826)) then
											v1593 = v72[v83[3]];
											v1594 = nil;
											v1592 = 776 - (264 + 511);
										end
										if (v1592 == (1 + 0)) then
											v1595 = {};
											v1594 = v10({}, {__index=function(v2970, v2971)
												local v2972 = 0;
												local v2973;
												while true do
													if (v2972 == (0 - 0)) then
														v2973 = v1595[v2971];
														return v2973[982 - (128 + 853)][v2973[1704 - (1635 + 67)]];
													end
												end
											end,__newindex=function(v2974, v2975, v2976)
												local v2977 = v1595[v2975];
												v2977[1 + 0][v2977[1 + 1]] = v2976;
											end});
											v1592 = 199 - (131 + 66);
										end
										if ((v1592 == (6 - 4)) or (4346 <= 3273)) then
											for v2979 = 1, v83[19 - 15] do
												v75 = v75 + 1 + 0;
												local v2980 = v71[v75];
												if (v2980[1 + 0] == (177 - 61)) then
													v1595[v2979 - (1 - 0)] = {v81,v2980[2 + 1]};
												else
													v1595[v2979 - (2 - 1)] = {v61,v2980[79 - (73 + 3)]};
												end
												v80[#v80 + (2 - 1)] = v1595;
											end
											v81[v83[2]] = v29(v1593, v1594, v62);
											break;
										end
									end
								end
							elseif (v84 <= 118) then
								if (v84 <= (529 - 417)) then
									if ((3615 == 3615) and (v84 <= (255 - 146))) then
										if (v84 == (1863 - (1668 + 87))) then
											local v557;
											local v558, v559;
											local v560;
											v81[v83[1 + 1]] = v61[v83[1902 - (296 + 1603)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[108 - (79 + 27)]] = v83[3 + 0];
											v75 = v75 + (1008 - (700 + 307));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1802 - (1477 + 322)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v560 = v83[2];
											v558, v559 = v74(v81[v560](v13(v81, v560 + 1 + 0, v83[6 - 3])));
											v76 = (v559 + v560) - (1 + 0);
											v557 = 0 - 0;
											for v900 = v560, v76 do
												local v901 = 0 + 0;
												while true do
													if (v901 == (0 - 0)) then
														v557 = v557 + (2 - 1);
														v81[v900] = v558[v557];
														break;
													end
												end
											end
											v75 = v75 + 1;
											v83 = v71[v75];
											v560 = v83[2];
											v81[v560] = v81[v560](v13(v81, v560 + 1, v76));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											if ((4253 > 1013) and v81[v83[4 - 2]]) then
												v75 = v75 + (1 - 0);
											else
												v75 = v83[5 - 2];
											end
										else
											local v570;
											v81[v83[1788 - (20 + 1766)]] = v81[v83[5 - 2]][v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[811 - (88 + 721)]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v570 = v83[439 - (93 + 344)];
											v81[v570] = v81[v570](v13(v81, v570 + (1214 - (960 + 253)), v83[1 + 2]));
										end
									elseif (v84 <= (326 - 216)) then
										local v581 = 0 - 0;
										local v582;
										local v583;
										local v584;
										local v585;
										while true do
											if ((3484 > 2897) and (v581 == (1417 - (74 + 1342)))) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[476 - (33 + 441)]] = v83[8 - 5];
												v75 = v75 + 1;
												v581 = 1421 - (64 + 1355);
											end
											if (v581 == (7 - 2)) then
												v81[v585](v13(v81, v585 + (12 - (5 + 6)), v76));
												v75 = v75 + 1;
												v83 = v71[v75];
												v75 = v83[1 + 2];
												break;
											end
											if (v581 == 4) then
												for v2499 = v585, v76 do
													local v2500 = 0 + 0;
													while true do
														if ((0 == v2500) or (4095 >= 4757)) then
															v582 = v582 + (447 - (369 + 77));
															v81[v2499] = v583[v582];
															break;
														end
													end
												end
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v585 = v83[740 - (438 + 300)];
												v581 = 299 - (50 + 244);
											end
											if ((1505 < 4558) and (v581 == (1203 - (95 + 1106)))) then
												v83 = v71[v75];
												v81[v83[2]] = v83[5 - 2];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v581 = 1899 - (1741 + 155);
											end
											if (v581 == (0 - 0)) then
												v582 = nil;
												v583, v584 = nil;
												v585 = nil;
												v81[v83[2 - 0]] = v61[v83[5 - 2]];
												v581 = 1 + 0;
											end
											if (v581 == (2 + 1)) then
												v585 = v83[2];
												v583, v584 = v74(v81[v585](v13(v81, v585 + 1 + 0, v83[3])));
												v76 = (v584 + v585) - (2 - 1);
												v582 = 0;
												v581 = 9 - 5;
											end
										end
									elseif (v84 == (1888 - (1263 + 514))) then
										local v1597;
										local v1598;
										v81[v83[499 - (73 + 424)]] = v62[v83[7 - 4]];
										v75 = v75 + (309 - (93 + 215));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[10 - 7]][v83[1939 - (1756 + 179)]];
										v75 = v75 + (1680 - (550 + 1129));
										v83 = v71[v75];
										v1598 = v83[109 - (57 + 50)];
										v1597 = v81[v83[632 - (30 + 599)]];
										v81[v1598 + 1 + 0] = v1597;
										v81[v1598] = v1597[v83[4 - 0]];
										v75 = v75 + (919 - (794 + 124));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v61[v83[1 + 2]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1929 - (1299 + 628)]] = v83[5 - 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[8 - 5];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1598 = v83[5 - 3];
										v81[v1598] = v81[v1598](v13(v81, v1598 + (1446 - (335 + 1110)), v83[3 + 0]));
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[3 - 1]] = {};
										v75 = v75 + (333 - (268 + 64));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v61[v83[1281 - (243 + 1035)]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[9 - 7]] = v83[12 - 9];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1598 = v83[2];
										v81[v1598] = v81[v1598](v13(v81, v1598 + (1 - 0), v83[103 - (90 + 10)]));
										v75 = v75 + (805 - (209 + 595));
										v83 = v71[v75];
										v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
										v75 = v75 + (806 - (603 + 202));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v61[v83[9 - 6]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[1 + 2];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[8 - 6]] = v83[3];
										v75 = v75 + (280 - (174 + 105));
										v83 = v71[v75];
										v1598 = v83[2];
										v81[v1598] = v81[v1598](v13(v81, v1598 + (3 - 2), v83[3]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[915 - (532 + 381)]][v81[v83[3 + 0]]] = v81[v83[843 - (137 + 702)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v61[v83[1 + 2]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v83[1889 - (1819 + 67)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1598 = v83[2];
										v81[v1598] = v81[v1598](v13(v81, v1598 + (1358 - (259 + 1098)), v83[3]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[1 + 3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1598 = v83[2];
										v81[v1598](v13(v81, v1598 + (3 - 2), v83[2 + 1]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										do
											return;
										end
									else
										v81[v83[2]] = v61[v83[3]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[1708 - (667 + 1039)]] = v81[v83[3]][v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1021 - (274 + 745)]] = v81[v83[3]][v83[4 + 0]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[432 - (288 + 142)]] = v81[v83[1309 - (301 + 1005)]][v83[2 + 2]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
									end
								elseif ((v84 <= (1988 - (674 + 1199))) or (2665 <= 923)) then
									if (v84 <= 113) then
										local v586 = 0 + 0;
										local v587;
										local v588;
										while true do
											if (v586 == 8) then
												v81[v83[2 + 0]] = v81[v83[8 - 5]];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v588 = v83[2];
												v586 = 9;
											end
											if ((4374 >= 3325) and (v586 == 4)) then
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[1 + 2]] - v81[v83[449 - (92 + 353)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v586 = 12 - 7;
											end
											if (v586 == (1 - 0)) then
												v83 = v71[v75];
												v81[v83[5 - 3]] = v81[v83[2 + 1]][v83[6 - 2]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v586 = 8 - 6;
											end
											if (v586 == 11) then
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[5 - 2]] + v81[v83[269 - (34 + 231)]];
												break;
											end
											if (v586 == 0) then
												v587 = nil;
												v588 = nil;
												v81[v83[1319 - (930 + 387)]] = v81[v83[3]][v83[4 + 0]];
												v75 = v75 + 1 + 0;
												v586 = 2 - 1;
											end
											if ((1600 == 1600) and ((700 - (389 + 308)) == v586)) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[4 - 2]] = v81[v83[8 - 5]][v83[2 + 2]];
												v75 = v75 + (323 - (125 + 197));
												v586 = 1001 - (339 + 658);
											end
											if (v586 == (14 - 8)) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v588 = v83[1350 - (743 + 605)];
												v587 = v81[v83[3 + 0]];
												v586 = 1 + 6;
											end
											if ((18 - 13) == v586) then
												v81[v83[2]] = v81[v83[8 - 5]][v83[4]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v61[v83[252 - (197 + 52)]];
												v586 = 6;
											end
											if (v586 == 7) then
												v81[v588 + 1] = v587;
												v81[v588] = v587[v83[8 - 4]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v586 = 5 + 3;
											end
											if (v586 == (6 + 4)) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[6 - 4]] = v81[v83[6 - 3]] * v81[v83[4]];
												v75 = v75 + 1;
												v586 = 5 + 6;
											end
											if (v586 == (2 - 0)) then
												v81[v83[1099 - (97 + 1000)]] = v61[v83[10 - 7]];
												v75 = v75 + (1846 - (143 + 1702));
												v83 = v71[v75];
												v81[v83[3 - 1]] = v81[v83[372 - (40 + 329)]][v83[4 + 0]];
												v586 = 2 + 1;
											end
											if ((v586 == (13 - 4)) or (4214 <= 3078)) then
												v81[v588] = v81[v588](v13(v81, v588 + 1 + 0, v83[68 - (9 + 56)]));
												v75 = v75 + (585 - (531 + 53));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[3]] - v83[777 - (89 + 684)];
												v586 = 7 + 3;
											end
										end
									elseif ((v84 > 114) or (3754 <= 2910)) then
										v81[v83[1 + 1]] = v83[1 + 2] ~= (0 - 0);
										v75 = v75 + 1 + 0;
									else
										local v1645 = 0 + 0;
										while true do
											if (v1645 == 3) then
												v81[v83[2]] = v81[v83[616 - (238 + 375)]][v83[4]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1645 = 4;
											end
											if ((v1645 == (2 + 0)) or (2832 > 3705)) then
												v81[v83[2 - 0]] = v62[v83[3]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1645 = 3;
											end
											if (v1645 == 0) then
												v81[v83[2]][v83[3 + 0]] = v83[11 - 7];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v1645 = 2 - 1;
											end
											if (v1645 == (1 - 0)) then
												v81[v83[2]] = v61[v83[11 - 8]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1645 = 2 - 0;
											end
											if (v1645 == (5 + 0)) then
												v81[v83[1 + 1]][v83[2 + 1]] = v81[v83[466 - (428 + 34)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1645 = 6;
											end
											if (v1645 == 4) then
												v81[v83[1 + 1]] = v81[v83[3]][v83[4]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v1645 = 10 - 5;
											end
											if (v1645 == (16 - 9)) then
												v75 = v83[921 - (223 + 695)];
												break;
											end
											if (v1645 == (18 - 12)) then
												v81[v83[513 - (329 + 182)]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1645 = 11 - 4;
											end
										end
									end
								elseif (v84 <= (16 + 100)) then
									v81[v83[1 + 1]] = v81[v83[2 + 1]];
								elseif (v84 > (248 - 131)) then
									if v81[v83[2 - 0]] then
										v75 = v75 + (1201 - (177 + 1023));
									else
										v75 = v83[5 - 2];
									end
								else
									local v1646 = 0 + 0;
									local v1647;
									while true do
										if ((v1646 == (0 - 0)) or (172 > 500)) then
											v1647 = v83[2];
											v81[v1647](v13(v81, v1647 + (1466 - (120 + 1345)), v76));
											break;
										end
									end
								end
							elseif (v84 <= (460 - (8 + 329))) then
								if ((v84 <= (245 - (19 + 106))) or (64 > 4846)) then
									if ((377 < 2363) and (v84 == (424 - 305))) then
										local v591;
										v81[v83[2 - 0]] = v62[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v591 = v83[5 - 3];
										v81[v591] = v81[v591]();
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]][v83[3]] = v81[v83[15 - 11]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v61[v83[3]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v61[v83[1506 - (957 + 546)]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]][v83[2 + 2]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[706 - (227 + 476)]] + v83[8 - 4];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[4 - 1]] + v83[5 - 1];
										v75 = v75 + (955 - (166 + 788));
										v83 = v71[v75];
										v81[v83[2]][v83[989 - (21 + 965)]] = v81[v83[700 - (127 + 569)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1 + 2];
									elseif (v81[v83[1 + 1]] == v81[v83[5 - 1]]) then
										v75 = v75 + 1 + 0;
									else
										v75 = v83[7 - 4];
									end
								elseif (v84 <= 121) then
									v81[v83[1 + 1]] = v62[v83[1 + 2]];
								elseif (v84 > (1414 - (1162 + 130))) then
									local v1649 = 0 - 0;
									while true do
										if (1 == v1649) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[6 - 3]][v83[940 - (889 + 47)]];
											v75 = v75 + 1 + 0;
											v1649 = 1266 - (1153 + 111);
										end
										if ((3451 == 3451) and (v1649 == (3 - 0))) then
											v81[v83[2 + 0]][v83[2 + 1]] = v81[v83[1 + 3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											do
												return;
											end
											break;
										end
										if ((397 < 1521) and (v1649 == (0 + 0))) then
											v81[v83[3 - 1]] = v61[v83[3 + 0]];
											v75 = v75 + (97 - (23 + 73));
											v83 = v71[v75];
											v81[v83[287 - (26 + 259)]] = v61[v83[2 + 1]];
											v1649 = 1 - 0;
										end
										if (v1649 == (6 - 4)) then
											v83 = v71[v75];
											v81[v83[1631 - (1094 + 535)]] = v81[v83[1 + 2]] - v83[1880 - (1554 + 322)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1649 = 1428 - (989 + 436);
										end
									end
								else
									local v1650 = 1178 - (816 + 362);
									local v1651;
									local v1652;
									local v1653;
									while true do
										if (v1650 == (3 - 1)) then
											v81[v83[2]] = v83[7 - 4];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1650 = 3;
										end
										if ((4620 >= 3650) and (v1650 == (22 - 16))) then
											if (v1651 > (0 - 0)) then
												if (v1652 > v81[v1653 + (2 - 1)]) then
													v75 = v83[13 - 10];
												else
													v81[v1653 + 1 + 2] = v1652;
												end
											elseif (v1652 < v81[v1653 + (764 - (86 + 677))]) then
												v75 = v83[2 + 1];
											else
												v81[v1653 + 1 + 2] = v1652;
											end
											break;
										end
										if (v1650 == (1030 - (263 + 763))) then
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + (859 - (649 + 209));
											v83 = v71[v75];
											v1650 = 22 - 17;
										end
										if ((2423 >= 2062) and (v1650 == 0)) then
											v1651 = nil;
											v1652 = nil;
											v1653 = nil;
											v1650 = 732 - (643 + 88);
										end
										if (v1650 == (1774 - (54 + 1715))) then
											v1653 = v83[2];
											v1652 = v81[v1653];
											v1651 = v81[v1653 + 2];
											v1650 = 23 - 17;
										end
										if ((2482 >= 1421) and (v1650 == 3)) then
											v81[v83[5 - 3]] = #v81[v83[5 - 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1650 = 1 + 3;
										end
										if (v1650 == 1) then
											v81[v83[2]] = v81[v83[11 - 8]];
											v75 = v75 + (1384 - (132 + 1251));
											v83 = v71[v75];
											v1650 = 2;
										end
									end
								end
							elseif (v84 <= (126 + 0)) then
								if (v84 <= (306 - 182)) then
									local v610;
									local v611;
									v611 = v83[2 + 0];
									v610 = v81[v83[3]];
									v81[v611 + 1] = v610;
									v81[v611] = v610[v83[462 - (185 + 273)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v61[v83[8 - 5]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1226 - (361 + 863)]] = v81[v83[8 - 5]][v83[4]];
									v75 = v75 + (1328 - (443 + 884));
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[3]][v83[1 + 3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v611 = v83[2];
									v81[v611] = v81[v611](v13(v81, v611 + 1 + 0, v83[3 + 0]));
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v61[v83[750 - (16 + 731)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v83[2 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									if (v81[v83[2 + 0]] <= v81[v83[764 - (527 + 233)]]) then
										v75 = v75 + 1 + 0;
									else
										v75 = v83[6 - 3];
									end
								elseif (v84 > (108 + 17)) then
									local v1655 = 1785 - (1107 + 678);
									local v1656;
									while true do
										if ((969 <= 1118) and ((3 + 0) == v1655)) then
											v83 = v71[v75];
											v1656 = v83[2];
											v81[v1656] = v81[v1656](v81[v1656 + 1 + 0]);
											v75 = v75 + 1;
											v1655 = 54 - (4 + 46);
										end
										if (v1655 == (3 - 2)) then
											v81[v83[3 - 1]] = v81[v83[2 + 1]][v83[8 - 4]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1398 - (1262 + 134)]] = v61[v83[6 - 3]];
											v1655 = 1 + 1;
										end
										if (v1655 == (3 + 1)) then
											v83 = v71[v75];
											if (v81[v83[797 - (383 + 412)]] or (1988 > 2884)) then
												v75 = v75 + 1 + 0;
											else
												v75 = v83[3];
											end
											break;
										end
										if (v1655 == (1 + 1)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3 + 0]];
											v75 = v75 + 1;
											v1655 = 3 - 0;
										end
										if (v1655 == (0 + 0)) then
											v1656 = nil;
											v81[v83[5 - 3]] = v61[v83[3]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1655 = 2 - 1;
										end
									end
								else
									local v1657 = 0 + 0;
									local v1658;
									while true do
										if (v1657 == (710 - (667 + 40))) then
											v75 = v75 + (1311 - (436 + 874));
											v83 = v71[v75];
											v75 = v83[3];
											break;
										end
										if ((403 <= 640) and (v1657 == (1607 - (762 + 844)))) then
											v81[v83[2 - 0]] = v62[v83[6 - 3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1658 = v83[1 + 1];
											v1657 = 478 - (209 + 267);
										end
										if (v1657 == (0 - 0)) then
											v1658 = nil;
											v81[v83[5 - 3]]();
											v75 = v75 + (1712 - (1611 + 100));
											v83 = v71[v75];
											v1657 = 1 + 0;
										end
										if (v1657 == (786 - (14 + 770))) then
											v81[v1658] = v81[v1658]();
											v75 = v75 + (1785 - (1165 + 619));
											v83 = v71[v75];
											v81[v83[2 - 0]][v83[3]] = v81[v83[385 - (229 + 152)]];
											v1657 = 197 - (107 + 87);
										end
									end
								end
							elseif (v84 <= 127) then
								local v627 = 0 - 0;
								local v628;
								while true do
									if ((v627 == 0) or (307 > 2305)) then
										v628 = v83[1 + 1];
										v81[v628] = v81[v628]();
										break;
									end
								end
							elseif (v84 == 128) then
								v81[v83[2 + 0]][v81[v83[14 - 11]]] = v81[v83[15 - 11]];
							else
								local v1661;
								local v1662;
								local v1663;
								v1663 = v83[2];
								v1662 = v81[v83[3 + 0]];
								v81[v1663 + (15 - (13 + 1))] = v1662;
								v81[v1663] = v1662[v83[4 + 0]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3];
								v75 = v75 + (1059 - (987 + 71));
								v83 = v71[v75];
								v81[v83[5 - 3]] = v62[v83[3 - 0]];
								v75 = v75 + (700 - (514 + 185));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]][v83[7 - 3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[7 - 5]] = v61[v83[1507 - (771 + 733)]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[1170 - (407 + 760)]][v83[4]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3 + 0]][v83[4]];
								v75 = v75 + (1855 - (169 + 1685));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[394 - (41 + 350)]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v1663 = v83[2];
								v81[v1663] = v81[v1663](v13(v81, v1663 + (2 - 1), v83[3]));
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[8 - 6]] = {};
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v61[v83[890 - (790 + 97)]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[2 + 1]][v83[249 - (235 + 10)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[3 - 1]][v81[v83[1186 - (887 + 296)]]] = v81[v83[4]];
								v75 = v75 + (1046 - (512 + 533));
								v83 = v71[v75];
								v81[v83[1426 - (662 + 762)]] = {};
								v75 = v75 + (678 - (334 + 343));
								v83 = v71[v75];
								v81[v83[6 - 4]] = v81[v83[492 - (198 + 291)]][v83[1 + 3]];
								v75 = v75 + (575 - (141 + 433));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[14 - 11]][v83[3 + 1]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v1663 = v83[779 - (227 + 550)];
								v1661 = v81[v1663];
								v1662 = v83[7 - 4];
								for v2353 = 2 - 1, v1662 do
									v1661[v2353] = v81[v1663 + v2353];
								end
							end
						elseif (v84 <= (254 - (72 + 31))) then
							if (v84 <= 140) then
								if (v84 <= (482 - (89 + 259))) then
									if (v84 <= 131) then
										if (v84 > (114 + 16)) then
											local v629;
											local v630, v631;
											local v632;
											v81[v83[2]] = v61[v83[3 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[2 + 1];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1405 - (1333 + 70)]] = v83[1835 - (701 + 1131)];
											v75 = v75 + (128 - (55 + 72));
											v83 = v71[v75];
											v632 = v83[158 - (99 + 57)];
											v630, v631 = v74(v81[v632](v13(v81, v632 + 1, v83[3])));
											v76 = (v631 + v632) - (1 - 0);
											v629 = 0 + 0;
											for v902 = v632, v76 do
												v629 = v629 + (1580 - (1243 + 336));
												v81[v902] = v630[v629];
											end
											v75 = v75 + (1330 - (774 + 555));
											v83 = v71[v75];
											v632 = v83[2];
											v81[v632](v13(v81, v632 + 1, v76));
										else
											v81[v83[1 + 1]] = v81[v83[802 - (150 + 649)]] % v81[v83[3 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v61[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[1987 - (1122 + 862)]] % v81[v83[7 - 3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[2 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + (744 - (549 + 194));
											v83 = v71[v75];
											v75 = v83[2 + 1];
										end
									elseif (v84 <= (525 - 393)) then
										local v651;
										v81[v83[1 + 1]][v83[3 - 0]] = v81[v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[7 - 5]] = {};
										v75 = v75 + (1704 - (453 + 1250));
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[3 + 0]];
										v75 = v75 + (576 - (203 + 372));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[8 - 5];
										v75 = v75 + (1383 - (978 + 404));
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v651 = v83[320 - (56 + 262)];
										v81[v651] = v81[v651](v13(v81, v651 + 1 + 0, v83[117 - (108 + 6)]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1955 - (653 + 1299)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[1925 - (1042 + 880)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v651 = v83[1004 - (16 + 986)];
										v81[v651] = v81[v651](v13(v81, v651 + (1219 - (700 + 518)), v83[9 - 6]));
									elseif ((v84 == (160 - 27)) or (899 >= 3509)) then
										local v1694 = 1511 - (617 + 894);
										local v1695;
										local v1696;
										while true do
											if (v1694 == (11 - 5)) then
												v75 = v83[461 - (271 + 187)];
												break;
											end
											if ((2842 < 2963) and (v1694 == (1587 - (731 + 853)))) then
												v81[v1696](v81[v1696 + (3 - 2)]);
												v75 = v75 + 1;
												v83 = v71[v75];
												v1694 = 1525 - (199 + 1322);
											end
											if ((9 - 4) == v1694) then
												v61[v83[2 + 1]] = v81[v83[1662 - (1291 + 369)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1694 = 6;
											end
											if ((3445 <= 3472) and (v1694 == (0 + 0))) then
												v1695 = nil;
												v1696 = nil;
												v1696 = v83[2 + 0];
												v1694 = 1;
											end
											if ((1262 > 847) and (v1694 == (1 + 3))) then
												for v2982 = v83[687 - (561 + 124)], v83[3] do
													v81[v2982] = nil;
												end
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1694 = 858 - (25 + 828);
											end
											if (v1694 == (2 - 1)) then
												v1695 = v81[v83[3]];
												v81[v1696 + (1 - 0)] = v1695;
												v81[v1696] = v1695[v83[4]];
												v1694 = 592 - (99 + 491);
											end
											if ((1303 < 3627) and (v1694 == (50 - (18 + 30)))) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v1696 = v83[3 - 1];
												v1694 = 4 - 1;
											end
										end
									else
										v81[v83[2]][v83[1 + 2]] = v81[v83[13 - 9]];
									end
								elseif ((2628 >= 420) and (v84 <= (869 - (501 + 231)))) then
									if (v84 <= 135) then
										local v670;
										local v671;
										v81[v83[2]] = v81[v83[3 + 0]][v83[1702 - (470 + 1228)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[689 - (537 + 149)]][v83[4]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v61[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[9 - 6]][v83[4]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[2 + 1]][v83[3 + 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3 + 0]] - v81[v83[1 + 3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[4 - 1]][v83[2 + 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[581 - (134 + 445)]] = v61[v83[5 - 2]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v671 = v83[2 + 0];
										v670 = v81[v83[11 - 8]];
										v81[v671 + 1] = v670;
										v81[v671] = v670[v83[4]];
										v75 = v75 + (261 - (36 + 224));
										v83 = v71[v75];
										v81[v83[1862 - (1033 + 827)]] = v81[v83[1849 - (1002 + 844)]];
										v75 = v75 + (1351 - (1126 + 224));
										v83 = v71[v75];
										v671 = v83[1 + 1];
										v81[v671] = v81[v671](v13(v81, v671 + 1 + 0, v83[9 - 6]));
										v75 = v75 + (65 - (48 + 16));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3]] - v83[19 - 15];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[1092 - (910 + 179)]] * v81[v83[7 - 3]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1381 - (933 + 446)]] = v81[v83[2 + 1]] + v81[v83[4]];
									elseif (v84 > (1660 - (248 + 1276))) then
										local v1699 = v83[2];
										local v1700 = v81[v83[3 + 0]];
										v81[v1699 + 1] = v1700;
										v81[v1699] = v1700[v83[2 + 2]];
									else
										local v1704 = 0 - 0;
										local v1705;
										local v1706;
										local v1707;
										local v1708;
										while true do
											if ((4640 > 314) and (v1704 == 0)) then
												v1705 = nil;
												v1706, v1707 = nil;
												v1708 = nil;
												v81[v83[6 - 4]] = v61[v83[1548 - (151 + 1394)]];
												v1704 = 945 - (929 + 15);
											end
											if ((v1704 == 4) or (2851 >= 4059)) then
												for v2984 = v1708, v76 do
													local v2985 = 1996 - (1173 + 823);
													while true do
														if ((v2985 == (0 - 0)) or (471 > 2873)) then
															v1705 = v1705 + 1;
															v81[v2984] = v1706[v1705];
															break;
														end
													end
												end
												v75 = v75 + (1777 - (482 + 1294));
												v83 = v71[v75];
												v1708 = v83[3 - 1];
												v1704 = 3 + 2;
											end
											if (2 == v1704) then
												v83 = v71[v75];
												v81[v83[1308 - (1125 + 181)]] = v83[3];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v1704 = 2 + 1;
											end
											if (v1704 == (4 - 1)) then
												v1708 = v83[1191 - (626 + 563)];
												v1706, v1707 = v74(v81[v1708](v13(v81, v1708 + (1251 - (153 + 1097)), v83[3])));
												v76 = (v1707 + v1708) - (3 - 2);
												v1705 = 0 + 0;
												v1704 = 4;
											end
											if (v1704 == (12 - 7)) then
												v81[v1708] = v81[v1708](v13(v81, v1708 + 1 + 0, v76));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												if v81[v83[2]] then
													v75 = v75 + 1 + 0;
												else
													v75 = v83[3 + 0];
												end
												break;
											end
											if (v1704 == (1 + 0)) then
												v75 = v75 + (1158 - (199 + 958));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + (2 - 1);
												v1704 = 4 - 2;
											end
										end
									end
								elseif (v84 <= (1314 - (1169 + 7))) then
									local v694 = 1873 - (751 + 1122);
									local v695;
									local v696;
									local v697;
									while true do
										if (v694 == (1 + 0)) then
											v697 = v83[3 + 0];
											for v2502 = 1, v697 do
												v696[v2502] = v81[v695 + v2502];
											end
											break;
										end
										if (v694 == (0 + 0)) then
											v695 = v83[2];
											v696 = v81[v695];
											v694 = 1 + 0;
										end
									end
								elseif (v84 > (235 - 96)) then
									local v1709 = 1181 - (589 + 592);
									local v1710;
									local v1711;
									local v1712;
									local v1713;
									local v1714;
									while true do
										if (v1709 == 3) then
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1 + 2];
											v75 = v75 + (25 - (13 + 11));
											v83 = v71[v75];
											v1714 = v83[2];
											v1709 = 3 + 1;
										end
										if ((465 == 465) and (v1709 == (1 + 1))) then
											v81[v83[1262 - (684 + 576)]] = v61[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v1709 = 3;
										end
										if ((769 <= 777) and (v1709 == (1 + 0))) then
											v1713 = v81[v83[3]];
											v81[v1714 + (1 - 0)] = v1713;
											v81[v1714] = v1713[v83[4 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1709 = 2 + 0;
										end
										if ((585 == 585) and (v1709 == (3 + 1))) then
											v1711, v1712 = v74(v81[v1714](v13(v81, v1714 + 1, v83[1 + 2])));
											v76 = (v1712 + v1714) - (1 + 0);
											v1710 = 1848 - (230 + 1618);
											for v2986 = v1714, v76 do
												v1710 = v1710 + 1;
												v81[v2986] = v1711[v1710];
											end
											v75 = v75 + 1 + 0;
											v1709 = 5;
										end
										if (v1709 == (2 + 3)) then
											v83 = v71[v75];
											v1714 = v83[2 + 0];
											v81[v1714] = v81[v1714](v13(v81, v1714 + (204 - (131 + 72)), v76));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1709 = 210 - (144 + 60);
										end
										if (v1709 == (24 - 18)) then
											if v81[v83[2 - 0]] then
												v75 = v75 + 1 + 0;
											else
												v75 = v83[14 - 11];
											end
											break;
										end
										if ((13 == 13) and (0 == v1709)) then
											v1710 = nil;
											v1711, v1712 = nil;
											v1713 = nil;
											v1714 = nil;
											v1714 = v83[1 + 1];
											v1709 = 1;
										end
									end
								else
									local v1715 = 0;
									local v1716;
									while true do
										if ((3828 >= 107) and (v1715 == (1922 - (523 + 1399)))) then
											v1716 = v83[2];
											do
												return v13(v81, v1716, v1716 + v83[3 + 0]);
											end
											break;
										end
									end
								end
							elseif ((v84 <= (549 - (72 + 332))) or (1010 > 4795)) then
								if (v84 <= (1118 - (269 + 707))) then
									if (v84 == (279 - 138)) then
										local v698 = 0;
										local v699;
										local v700;
										local v701;
										local v702;
										local v703;
										while true do
											if ((2108 >= 1838) and (v698 == (14 - 8))) then
												v83 = v71[v75];
												v703 = v83[132 - (123 + 7)];
												v81[v703] = v81[v703](v13(v81, v703 + 1 + 0, v83[3 + 0]));
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v81[v83[2]][v81[v83[7 - 4]]] = v83[1092 - (38 + 1050)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v61[v83[3]];
												v75 = v75 + 1 + 0;
												v698 = 4 + 3;
											end
											if ((v698 == (836 - (426 + 397))) or (1293 <= 384)) then
												v81[v703] = v81[v703](v13(v81, v703 + (1407 - (751 + 655)), v76));
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												if v81[v83[2]] then
													v75 = v75 + 1 + 0;
												else
													v75 = v83[1248 - (39 + 1206)];
												end
												break;
											end
											if (v698 == (12 - 8)) then
												v75 = v75 + (842 - (566 + 275));
												v83 = v71[v75];
												v81[v83[937 - (167 + 768)]] = v83[2 + 1];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v703 = v83[1 + 1];
												v81[v703] = v81[v703](v13(v81, v703 + 1 + 0, v83[3 - 0]));
												v75 = v75 + (16 - (8 + 7));
												v83 = v71[v75];
												v81[v83[1685 - (1510 + 173)]][v81[v83[4 - 1]]] = v83[4];
												v698 = 1 + 4;
											end
											if ((260 - (30 + 223)) == v698) then
												v83 = v71[v75];
												v81[v83[2]] = v83[1259 - (300 + 956)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[124 - (22 + 100)]] = v83[6 - 3];
												v75 = v75 + (283 - (47 + 235));
												v83 = v71[v75];
												v703 = v83[6 - 4];
												v81[v703] = v81[v703](v13(v81, v703 + 1 + 0, v83[489 - (21 + 465)]));
												v75 = v75 + 1 + 0;
												v698 = 6 + 2;
											end
											if (v698 == (2 + 3)) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v61[v83[1220 - (553 + 664)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[81 - (73 + 5)];
												v75 = v75 + (1716 - (1128 + 587));
												v83 = v71[v75];
												v81[v83[2]] = v83[11 - 8];
												v75 = v75 + 1;
												v698 = 696 - (558 + 132);
											end
											if ((2486 < 4363) and (v698 == (32 - 20))) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v703 = v83[2];
												v700, v701 = v74(v81[v703](v13(v81, v703 + 1 + 0, v83[3 + 0])));
												v76 = (v701 + v703) - 1;
												v699 = 0 + 0;
												for v2505 = v703, v76 do
													v699 = v699 + 1 + 0;
													v81[v2505] = v700[v699];
												end
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v703 = v83[1 + 1];
												v698 = 7 + 6;
											end
											if (1 == v698) then
												v81[v83[773 - (294 + 477)]] = v83[2 + 1];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v703 = v83[2];
												v81[v703] = v81[v703](v13(v81, v703 + (1 - 0), v83[1 + 2]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]][v81[v83[6 - 3]]] = v83[986 - (97 + 885)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v698 = 2 - 0;
											end
											if (v698 == (374 - (271 + 94))) then
												v81[v83[1605 - (777 + 826)]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v703 = v83[2];
												v81[v703] = v81[v703](v13(v81, v703 + 1, v83[1358 - (117 + 1238)]));
												v75 = v75 + (1716 - (686 + 1029));
												v83 = v71[v75];
												v81[v83[1358 - (1074 + 282)]] = v62[v83[1620 - (1359 + 258)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v698 = 22 - 12;
											end
											if (v698 == 8) then
												v83 = v71[v75];
												v81[v83[2]][v81[v83[1938 - (1730 + 205)]]] = v83[532 - (67 + 461)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v61[v83[3]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[1 + 2];
												v75 = v75 + (630 - (129 + 500));
												v83 = v71[v75];
												v698 = 9;
											end
											if (v698 == 3) then
												v81[v703] = v81[v703](v13(v81, v703 + (1712 - (1157 + 554)), v83[3 - 0]));
												v75 = v75 + (608 - (82 + 525));
												v83 = v71[v75];
												v81[v83[2 + 0]][v81[v83[6 - 3]]] = v83[4];
												v75 = v75 + (1624 - (948 + 675));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v61[v83[3 + 0]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[855 - (406 + 447)]] = v83[120 - (91 + 26)];
												v698 = 13 - 9;
											end
											if (v698 == (2 + 0)) then
												v81[v83[2]] = v61[v83[989 - (968 + 18)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v703 = v83[269 - (172 + 95)];
												v698 = 9 - 6;
											end
											if (v698 == (275 - (260 + 5))) then
												v703 = v83[5 - 3];
												v81[v703] = v81[v703]();
												v75 = v75 + (820 - (265 + 554));
												v83 = v71[v75];
												v81[v83[2]][v81[v83[1574 - (1440 + 131)]]] = v81[v83[11 - 7]];
												v75 = v75 + (1396 - (253 + 1142));
												v83 = v71[v75];
												v703 = v83[255 - (133 + 120)];
												v702 = v81[v83[5 - 2]];
												v81[v703 + 1] = v702;
												v698 = 1967 - (809 + 1147);
											end
											if (v698 == (508 - (178 + 319))) then
												v81[v703] = v702[v83[7 - 3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1272 - (1255 + 15)]] = v61[v83[1545 - (1221 + 321)]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[11 - 8];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3 + 0];
												v698 = 12;
											end
											if (v698 == (0 - 0)) then
												v699 = nil;
												v700, v701 = nil;
												v702 = nil;
												v703 = nil;
												v81[v83[2]] = v61[v83[410 - (204 + 203)]];
												v75 = v75 + (79 - (48 + 30));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[1967 - (1472 + 492)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v698 = 2 - 1;
											end
										end
									else
										local v704 = v83[2 + 0];
										local v705 = v83[615 - (258 + 353)];
										local v706 = v704 + (1996 - (1382 + 612));
										local v707 = {v81[v704](v81[v704 + 1], v81[v706])};
										for v905 = 1, v705 do
											v81[v706 + v905] = v707[v905];
										end
										local v708 = v707[1];
										if v708 then
											v81[v706] = v708;
											v75 = v83[1 + 2];
										else
											v75 = v75 + 1 + 0;
										end
									end
								elseif ((3201 < 4872) and (v84 <= 143)) then
									local v709 = v83[5 - 3];
									v81[v709] = v81[v709](v81[v709 + 1 + 0]);
								elseif ((v84 > (263 - (35 + 84))) or (4577 < 1084)) then
									local v1719;
									v81[v83[217 - (75 + 140)]] = v81[v83[3]][v83[14 - 10]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1801 - (923 + 876)]] = v81[v83[3]][v83[10 - 6]];
									v75 = v75 + (813 - (284 + 528));
									v83 = v71[v75];
									v81[v83[1021 - (867 + 152)]] = v62[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v1719 = v83[2];
									v81[v1719] = v81[v1719]();
									v75 = v75 + (1107 - (709 + 397));
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[3]][v83[40 - (21 + 15)]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									if v81[v83[3 - 1]] then
										v75 = v75 + 1;
									else
										v75 = v83[3];
									end
								else
									do
										return;
									end
								end
							elseif ((v84 <= (32 + 116)) or (2611 <= 2372)) then
								if (v84 <= 146) then
									v81[v83[5 - 3]] = v83[7 - 4] + v81[v83[2 + 2]];
								elseif (v84 == (282 - (97 + 38))) then
									v81[v83[82 - (52 + 28)]] = v61[v83[2 + 1]];
									v75 = v75 + (850 - (59 + 790));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1 + 2]][v83[944 - (467 + 473)]];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[7 - 4]] + v83[9 - 5];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]][v83[2 + 1]] = v81[v83[8 - 4]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v62[v83[1 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[2 + 1]][v83[241 - (58 + 179)]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1255 - (677 + 576)]] = v83[2 + 1];
								else
									v81[v83[3 - 1]] = v81[v83[223 - (88 + 132)]] + v81[v83[4 + 0]];
								end
							elseif (v84 <= (740 - 591)) then
								v81[v83[6 - 4]] = v61[v83[294 - (12 + 279)]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[950 - (652 + 295)]][v83[1 + 3]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[991 - (848 + 141)]] = v81[v83[743 - (372 + 368)]][v83[3 + 1]];
								v75 = v75 + (1131 - (542 + 588));
								v83 = v71[v75];
								v81[v83[820 - (6 + 812)]] = v81[v83[3]][v83[1709 - (1599 + 106)]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1 + 1]][v83[3]] = v81[v83[2 + 2]];
							elseif ((3917 == 3917) and (v84 == 150)) then
								v81[v83[7 - 5]] = v81[v83[5 - 2]] + v83[4];
							else
								local v1747;
								v81[v83[1 + 1]] = v61[v83[1 + 2]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3]][v83[1 + 3]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[1932 - (1690 + 239)]][v83[13 - 9]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v1747 = v83[2];
								v81[v1747](v81[v1747 + (1 - 0)]);
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3];
							end
						elseif (v84 <= (647 - 485)) then
							if ((660 < 1210) and (v84 <= (2024 - (1736 + 132)))) then
								if (v84 <= (82 + 71)) then
									if ((v84 == (498 - 346)) or (859 >= 1205)) then
										local v723 = v83[2];
										v81[v723](v13(v81, v723 + (4 - 3), v83[1 + 2]));
									else
										local v724;
										v81[v83[34 - (27 + 5)]] = v81[v83[1 + 2]][v83[3 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v61[v83[3 + 0]];
										v75 = v75 + (1118 - (771 + 346));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1637 - (1577 + 57)]][v83[6 - 2]];
										v75 = v75 + (1081 - (684 + 396));
										v83 = v71[v75];
										v724 = v83[5 - 3];
										v81[v724](v81[v724 + (1197 - (700 + 496))]);
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v61[v83[3 + 0]];
										v75 = v75 + (253 - (65 + 187));
										v83 = v71[v75];
										v81[v83[941 - (827 + 112)]] = v81[v83[3]][v83[3 + 1]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[14 - 11];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v75 = v83[1 + 2];
									end
								elseif (v84 <= (1350 - (551 + 645))) then
									v81[v83[345 - (166 + 177)]] = v81[v83[1859 - (1361 + 495)]][v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]][v83[8 - 4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[226 - (148 + 76)]] = v81[v83[10 - 7]] - v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1745 - (735 + 1007)]][v83[283 - (111 + 168)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									if ((3748 == 3748) and (v81[v83[1 + 1]] < v81[v83[7 - 3]])) then
										v75 = v75 + 1 + 0;
									else
										v75 = v83[3 + 0];
									end
								elseif ((v84 == (7 + 148)) or (3857 == 4664)) then
									v61[v83[3]] = v81[v83[8 - 6]];
								else
									local v1759 = v83[2 + 0];
									local v1760, v1761 = v74(v81[v1759](v81[v1759 + (933 - (147 + 785))]));
									v76 = (v1761 + v1759) - 1;
									local v1762 = 666 - (483 + 183);
									for v2449 = v1759, v76 do
										v1762 = v1762 + (2 - 1);
										v81[v2449] = v1760[v1762];
									end
								end
							elseif ((2748 >= 868) and (v84 <= (130 + 29))) then
								if (v84 <= (2068 - (1790 + 121))) then
									local v745 = 0;
									local v746;
									local v747;
									while true do
										if (v745 == (0 - 0)) then
											v746 = v83[1541 - (259 + 1280)];
											v747 = v81[v746];
											v745 = 1585 - (160 + 1424);
										end
										if (v745 == (1 + 0)) then
											for v2509 = v746 + 1 + 0, v76 do
												v7(v747, v81[v2509]);
											end
											break;
										end
									end
								elseif ((258 < 2095) and (v84 == (928 - (479 + 291)))) then
									v81[v83[3 - 1]] = v81[v83[974 - (569 + 402)]] % v81[v83[1309 - (635 + 670)]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[7 - 5]] = v61[v83[601 - (42 + 556)]];
									v75 = v75 + (1402 - (1246 + 155));
									v83 = v71[v75];
									v81[v83[734 - (31 + 701)]] = v81[v83[9 - 6]] - v83[4];
									v75 = v75 + (500 - (393 + 106));
									v83 = v71[v75];
									v81[v83[1173 - (727 + 444)]] = v81[v83[8 - 5]] - v81[v83[2 + 2]];
									v75 = v75 + (654 - (269 + 384));
									v83 = v71[v75];
									do
										return v81[v83[1571 - (598 + 971)]];
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[9 - 6];
								elseif (v83[9 - 7] == v81[v83[11 - 7]]) then
									v75 = v75 + (1446 - (800 + 645));
								else
									v75 = v83[1 + 2];
								end
							elseif (v84 <= (950 - (687 + 103))) then
								v81[v83[1164 - (142 + 1020)]][v83[3]] = v83[9 - 5];
							elseif (v84 > (27 + 134)) then
								local v1770;
								v81[v83[515 - (306 + 207)]] = v61[v83[3]];
								v75 = v75 + (1405 - (112 + 1292));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v61[v83[955 - (587 + 365)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1717 - (829 + 886)]] = v83[3];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[3];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v1770 = v83[6 - 4];
								v81[v1770] = v81[v1770](v13(v81, v1770 + 1, v83[3 + 0]));
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v61[v83[4 - 1]];
								v75 = v75 + (978 - (613 + 364));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[6 - 3];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v1770 = v83[5 - 3];
								v81[v1770] = v81[v1770](v13(v81, v1770 + 1 + 0, v83[1942 - (1467 + 472)]));
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v83[1550 - (1077 + 470)];
							else
								local v1787;
								v1787 = v83[1 + 1];
								v81[v1787] = v81[v1787]();
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v61[v83[3]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[431 - (12 + 417)]] = v81[v83[7 - 4]][v83[3 + 1]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[5 - 2]] - v81[v83[4]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								if (v83[2] < v81[v83[4]]) then
									v75 = v75 + 1 + 0;
								else
									v75 = v83[2 + 1];
								end
							end
						elseif (v84 <= (26 + 141)) then
							if (v84 <= 164) then
								if (v84 > 163) then
									v81[v83[5 - 3]] = v81[v83[3]] - v83[1109 - (924 + 181)];
								else
									local v751;
									local v752, v753;
									local v754;
									v81[v83[799 - (263 + 534)]] = v62[v83[1 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[5 - 2]][v83[11 - 7]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[709 - (562 + 145)]] = v81[v83[1 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[3 + 0];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v754 = v83[2];
									v752, v753 = v74(v81[v754](v13(v81, v754 + 1 + 0, v83[3])));
									v76 = (v753 + v754) - (1 + 0);
									v751 = 0;
									for v908 = v754, v76 do
										v751 = v751 + (1877 - (1459 + 417));
										v81[v908] = v752[v751];
									end
									v75 = v75 + (287 - (194 + 92));
									v83 = v71[v75];
									v754 = v83[1387 - (1057 + 328)];
									v81[v754] = v81[v754](v13(v81, v754 + (2 - 1), v76));
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[2]] = v62[v83[535 - (5 + 527)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[782 - (342 + 438)]] = v81[v83[2 + 1]][v83[2 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]][v83[1 + 2]] = v81[v83[1 + 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v62[v83[5 - 2]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[14 - (6 + 6)]] = v81[v83[3]][v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[2 + 1]];
									v75 = v75 + (1254 - (206 + 1047));
									v83 = v71[v75];
									v81[v83[1114 - (470 + 642)]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1070 - (552 + 515)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v754 = v83[2 + 0];
									v752, v753 = v74(v81[v754](v13(v81, v754 + 1 + 0, v83[2 + 1])));
									v76 = (v753 + v754) - (1 + 0);
									v751 = 0 + 0;
									for v911 = v754, v76 do
										local v912 = 1051 - (701 + 350);
										while true do
											if (v912 == (0 + 0)) then
												v751 = v751 + 1 + 0;
												v81[v911] = v752[v751];
												break;
											end
										end
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v754 = v83[2 - 0];
									v81[v754] = v81[v754](v13(v81, v754 + 1, v76));
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v62[v83[7 - 4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1 + 2]][v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v83[1349 - (281 + 1065)];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[7 - 5]] = v83[1214 - (1114 + 97)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1915 - (279 + 1634)]] = v83[1283 - (1213 + 67)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[193 - (65 + 126)]] = v83[3 + 0];
									v75 = v75 + (1086 - (189 + 896));
									v83 = v71[v75];
									v754 = v83[1 + 1];
									v81[v754] = v81[v754](v13(v81, v754 + (1964 - (1872 + 91)), v83[6 - 3]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[6 - 4]][v83[3 + 0]] = v81[v83[2 + 2]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[78 - (22 + 54)]] = v62[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[7 - 4]][v83[2 + 2]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[1536 - (553 + 981)]] = v83[3 + 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[3 - 0];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[1900 - (1320 + 577)];
									v75 = v75 + (850 - (667 + 182));
									v83 = v71[v75];
									v754 = v83[1290 - (1115 + 173)];
									v81[v754] = v81[v754](v13(v81, v754 + 1, v83[4 - 1]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]][v83[1758 - (1375 + 380)]] = v81[v83[2 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[28 - (12 + 14)]] = v62[v83[3]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[3]][v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[7 - 4];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[4 - 1];
									v75 = v75 + (732 - (354 + 377));
									v83 = v71[v75];
									v81[v83[9 - 7]] = v83[7 - 4];
									v75 = v75 + (1983 - (263 + 1719));
									v83 = v71[v75];
									v754 = v83[2];
									v81[v754] = v81[v754](v13(v81, v754 + 1 + 0, v83[362 - (335 + 24)]));
									v75 = v75 + (952 - (882 + 69));
									v83 = v71[v75];
									v81[v83[1688 - (657 + 1029)]][v83[1203 - (685 + 515)]] = v81[v83[1642 - (745 + 893)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[774 - (274 + 498)]][v83[1 + 2]] = v83[2 + 2];
									v75 = v75 + (1607 - (1035 + 571));
									v83 = v71[v75];
									v81[v83[1 + 1]][v83[2 + 1]] = v81[v83[14 - 10]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v62[v83[3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[227 - (109 + 115)]][v83[4]];
									v75 = v75 + (1400 - (1047 + 352));
									v83 = v71[v75];
									v81[v83[1767 - (852 + 913)]] = v81[v83[3 + 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1347 - (384 + 961)]] = v83[6 - 3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[7 - 5]] = v83[595 - (591 + 1)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v754 = v83[2];
									v752, v753 = v74(v81[v754](v13(v81, v754 + 1 + 0, v83[1473 - (218 + 1252)])));
									v76 = (v753 + v754) - (1 + 0);
									v751 = 356 - (321 + 35);
									for v913 = v754, v76 do
										v751 = v751 + (395 - (239 + 155));
										v81[v913] = v752[v751];
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v754 = v83[44 - (41 + 1)];
									v81[v754] = v81[v754](v13(v81, v754 + 1, v76));
									v75 = v75 + (201 - (80 + 120));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v62[v83[5 - 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[14 - 11]][v83[8 - 4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[8 - 6]] = v83[4 - 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1228 - (165 + 1061)]] = v83[3 + 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1646 - (596 + 1047)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v754 = v83[2 + 0];
									v81[v754] = v81[v754](v13(v81, v754 + (1 - 0), v83[2 + 1]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[739 - (185 + 552)]][v83[2 + 1]] = v81[v83[605 - (507 + 94)]];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[2]] = v62[v83[1 + 2]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1740 - (569 + 1168)]][v83[7 - 3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[353 - (118 + 233)]] = v83[347 - (279 + 65)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[6 - 3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (1819 - (1414 + 404));
									v83 = v71[v75];
									v81[v83[758 - (347 + 409)]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v754 = v83[2 + 0];
									v81[v754] = v81[v754](v13(v81, v754 + 1 + 0, v83[1581 - (420 + 1158)]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]][v83[614 - (406 + 205)]] = v81[v83[13 - 9]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v62[v83[3 + 0]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[63 - (28 + 33)]] = v81[v83[1 + 2]][v83[1011 - (858 + 149)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[1510 - (829 + 678)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1219 - (143 + 1073)];
									v75 = v75 + (1816 - (898 + 917));
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[2 + 1];
									v75 = v75 + (1470 - (882 + 587));
									v83 = v71[v75];
									v754 = v83[2 + 0];
									v81[v754] = v81[v754](v13(v81, v754 + 1 + 0, v83[267 - (140 + 124)]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]][v83[1538 - (1105 + 430)]] = v81[v83[10 - 6]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[4 - 2]][v83[4 - 1]] = v83[4 + 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v83[2 + 1]] = v83[1 + 3];
									v75 = v75 + (1992 - (1047 + 944));
									v83 = v71[v75];
									v81[v83[1304 - (206 + 1096)]][v83[3]] = v81[v83[198 - (30 + 164)]];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v62[v83[1477 - (1383 + 91)]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[5 - 2]][v83[1664 - (1174 + 486)]];
									v75 = v75 + (428 - (172 + 255));
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[6 - 3]];
									v75 = v75 + (1529 - (594 + 934));
									v83 = v71[v75];
									v81[v83[570 - (211 + 357)]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[3 + 0];
								end
							elseif (v84 <= (1579 - (159 + 1255))) then
								local v854 = 0 + 0;
								local v855;
								while true do
									if (v854 == (777 - (24 + 753))) then
										v855 = v83[2];
										v81[v855](v81[v855 + 1 + 0]);
										break;
									end
								end
							elseif ((590 == 590) and (v84 == (213 - 47))) then
								local v1796 = 1132 - (898 + 234);
								local v1797;
								while true do
									if ((v1796 == (539 - (333 + 202))) or (4436 == 244)) then
										v83 = v71[v75];
										if not v81[v83[1 + 1]] then
											v75 = v75 + 1 + 0;
										else
											v75 = v83[5 - 2];
										end
										break;
									end
									if (v1796 == (1279 - (1018 + 261))) then
										v1797 = nil;
										v81[v83[4 - 2]] = v81[v83[134 - (93 + 38)]][v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1796 = 1 + 0;
									end
									if (v1796 == (2 + 1)) then
										v83 = v71[v75];
										v1797 = v83[2];
										v81[v1797] = v81[v1797](v13(v81, v1797 + 1, v83[1 + 2]));
										v75 = v75 + 1 + 0;
										v1796 = 8 - 4;
									end
									if (v1796 == (3 - 2)) then
										v81[v83[5 - 3]] = v83[14 - 11];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[1 + 2];
										v1796 = 2 - 0;
									end
									if (v1796 == 2) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[422 - (14 + 406)]] = v83[5 - 2];
										v75 = v75 + (3 - 2);
										v1796 = 1633 - (20 + 1610);
									end
								end
							elseif (v81[v83[2]] == v83[2 + 2]) then
								v75 = v75 + (2 - 1);
							else
								v75 = v83[3];
							end
						elseif ((v84 <= (503 - 333)) or (1891 >= 3411)) then
							if ((484 <= 2889) and (v84 <= (685 - (243 + 274)))) then
								v81[v83[1624 - (1437 + 185)]] = v83[9 - 6] * v81[v83[2 + 2]];
							elseif (v84 > 169) then
								v81[v83[7 - 5]] = v83[3 + 0];
							else
								local v1800 = v83[2];
								v81[v1800] = v81[v1800](v13(v81, v1800 + 1 + 0, v83[819 - (326 + 490)]));
							end
						elseif (v84 <= (120 + 51)) then
							v81[v83[205 - (181 + 22)]] = -v81[v83[78 - (35 + 40)]];
						elseif (v84 == (689 - 517)) then
							local v1802;
							local v1803, v1804;
							local v1805;
							local v1806;
							v1806 = v83[2];
							v1805 = v81[v83[3 - 0]];
							v81[v1806 + 1 + 0] = v1805;
							v81[v1806] = v1805[v83[4]];
							v75 = v75 + (879 - (297 + 581));
							v83 = v71[v75];
							v81[v83[2]] = v61[v83[1 + 2]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 - 0]] = v83[3];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[6 - 4]] = v83[2 + 1];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v1806 = v83[2];
							v1803, v1804 = v74(v81[v1806](v13(v81, v1806 + (4 - 3), v83[1740 - (1505 + 232)])));
							v76 = (v1804 + v1806) - 1;
							v1802 = 1318 - (415 + 903);
							for v2455 = v1806, v76 do
								local v2456 = 0 - 0;
								while true do
									if ((v2456 == 0) or (6 >= 1169)) then
										v1802 = v1802 + (1 - 0);
										v81[v2455] = v1803[v1802];
										break;
									end
								end
							end
							v75 = v75 + (718 - (155 + 562));
							v83 = v71[v75];
							v1806 = v83[1 + 1];
							v81[v1806] = v81[v1806](v13(v81, v1806 + (118 - (71 + 46)), v76));
							v75 = v75 + 1;
							v83 = v71[v75];
							if v81[v83[2 - 0]] then
								v75 = v75 + 1;
							else
								v75 = v83[3];
							end
						else
							local v1820;
							local v1821;
							local v1822, v1823;
							local v1824;
							v1824 = v83[687 - (436 + 249)];
							v81[v1824](v81[v1824 + (1622 - (56 + 1565))]);
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[986 - (80 + 904)]] = v81[v83[1 + 2]];
							v75 = v75 + (801 - (595 + 205));
							v83 = v71[v75];
							v81[v83[4 - 2]] = v61[v83[3]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[4 - 2]] = v83[3 + 0];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[6 - 4]] = v83[2 + 1];
							v75 = v75 + (666 - (400 + 265));
							v83 = v71[v75];
							v1824 = v83[3 - 1];
							v1822, v1823 = v74(v81[v1824](v13(v81, v1824 + 1, v83[1 + 2])));
							v76 = (v1823 + v1824) - (2 - 1);
							v1821 = 0 + 0;
							for v2457 = v1824, v76 do
								local v2458 = 0;
								while true do
									if (v2458 == 0) then
										v1821 = v1821 + 1;
										v81[v2457] = v1822[v1821];
										break;
									end
								end
							end
							v75 = v75 + (1672 - (962 + 709));
							v83 = v71[v75];
							v1824 = v83[2];
							v81[v1824](v13(v81, v1824 + 1 + 0, v76));
							v75 = v75 + 1;
							v83 = v71[v75];
							v1824 = v83[2 + 0];
							v1820 = v81[v83[3 + 0]];
							v81[v1824 + (3 - 2)] = v1820;
							v81[v1824] = v1820[v83[4]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[783 - (636 + 145)]] = v61[v83[298 - (282 + 13)]];
							v75 = v75 + (1149 - (366 + 782));
							v83 = v71[v75];
							v81[v83[2]] = v83[3];
							v75 = v75 + (90 - (10 + 79));
							v83 = v71[v75];
							v81[v83[1709 - (1297 + 410)]] = v83[10 - 7];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v1824 = v83[280 - (262 + 16)];
							v81[v1824] = v81[v1824](v13(v81, v1824 + (2 - 1), v83[2 + 1]));
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[1852 - (1056 + 794)]] = v83[1351 - (741 + 607)] ~= (1756 - (730 + 1026));
						end
						v75 = v75 + 1;
						break;
					end
				end
			end
		end;
	end
	return v29(v28(), {}, v17)(...);
end
return vv9(), ...);