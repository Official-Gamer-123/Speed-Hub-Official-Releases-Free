--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.7) ~  Much Love, Ferib 

]]--

local v0 = tonumber;
local v1 = string.byte;
local v2 = string.char;
local v3 = string.sub;
local v4 = string.gsub;
local v5 = string.rep;
local v6 = table.concat;
local v7 = table.insert;
local v8 = math.ldexp;
local v9 = getfenv or function()
	return _ENV;
end;
local v10 = setmetatable;
local v11 = pcall;
local v12 = select;
local v13 = unpack or table.unpack;
local v14 = tonumber;
local function v15(v16, v17, ...)
	local v18 = 1;
	local v19;
	v16 = v4(v3(v16, 5), "..", function(v30)
		if (v1(v30, 2) == 79) then
			v19 = v0(v3(v30, 1, 1));
			return "";
		else
			local v80 = v2(v0(v30, 16));
			if v19 then
				local v89 = 0;
				local v90;
				while true do
					if (v89 == 1) then
						return v90;
					end
					if (v89 == 0) then
						v90 = v5(v80, v19);
						v19 = nil;
						v89 = 1;
					end
				end
			else
				return v80;
			end
		end
	end);
	local function v20(v31, v32, v33)
		if v33 then
			local v81 = 0;
			local v82;
			while true do
				if (v81 == 0) then
					v82 = (v31 / (((1 + 4) - 3) ^ (v32 - (2 - 1)))) % ((3 - 1) ^ (((v33 - (2 - (878 - (282 + 595)))) - (v32 - (620 - (555 + 64)))) + 1));
					return v82 - (v82 % (932 - (857 + (1711 - (1523 + 114)))));
				end
			end
		else
			local v83 = ((513 + 57) - (367 + 201)) ^ (v32 - (928 - (214 + 713)));
			return (((v31 % (v83 + v83)) >= v83) and (1 + 0)) or 0;
		end
	end
	local function v21()
		local v34 = v1(v16, v18, v18);
		v18 = v18 + 1;
		return v34;
	end
	local function v22()
		local v35, v36 = v1(v16, v18, v18 + (2 - 0));
		v18 = v18 + (1067 - (68 + 997));
		return (v36 * (1526 - (226 + 1044))) + v35;
	end
	local function v23()
		local v37, v38, v39, v40 = v1(v16, v18, v18 + (12 - 9));
		v18 = v18 + (121 - (32 + 85));
		return (v40 * 16777216) + (v39 * 65536) + (v38 * (251 + 5)) + v37;
	end
	local function v24()
		local v41 = v23();
		local v42 = v23();
		local v43 = 1;
		local v44 = (v20(v42, 1 + 0, 20) * ((959 - (892 + 65)) ^ (75 - 43))) + v41;
		local v45 = v20(v42, (23 + 15) - 17, 31);
		local v46 = ((v20(v42, 58 - 26) == (351 - (87 + (345 - 82)))) and -((1368 - (1069 + 118)) - (67 + 113))) or (1 + 0);
		if (v45 == (0 - 0)) then
			if (v44 == (0 + (0 - 0))) then
				return v46 * (0 - 0);
			else
				v45 = (1 + 2) - 2;
				v43 = 952 - (802 + 150);
			end
		elseif (v45 == (5511 - 3464)) then
			return ((v44 == ((0 - 0) - 0)) and (v46 * (1 / (0 + 0)))) or (v46 * NaN);
		end
		return v8(v46, v45 - (2020 - (915 + 82))) * (v43 + (v44 / ((5 - 3) ^ 52)));
	end
	local function v25(v47)
		local v48;
		if not v47 then
			v47 = v23();
			if (v47 == 0) then
				return "";
			end
		end
		v48 = v3(v16, v18, (v18 + v47) - (1 + 0));
		v18 = v18 + v47;
		local v49 = {};
		for v64 = 792 - (368 + 423), #v48 do
			v49[v64] = v2(v1(v3(v48, v64, v64)));
		end
		return v6(v49);
	end
	local v26 = v23;
	local function v27(...)
		return {...}, v12("#", ...);
	end
	local function v28()
		local v50 = (function()
			return 0 + 0;
		end)();
		local v51 = (function()
			return;
		end)();
		local v52 = (function()
			return;
		end)();
		local v53 = (function()
			return;
		end)();
		local v54 = (function()
			return;
		end)();
		local v55 = (function()
			return;
		end)();
		local v56 = (function()
			return;
		end)();
		local v57 = (function()
			return;
		end)();
		while true do
			if (v50 ~= (2 + 0)) then
			else
				v57 = (function()
					return {};
				end)();
				for v91 = #".", v56 do
					local v92 = (function()
						return 0;
					end)();
					local v93 = (function()
						return;
					end)();
					local v94 = (function()
						return;
					end)();
					while true do
						if ((254 - (163 + 91)) == v92) then
							local v111 = (function()
								return 0;
							end)();
							local v112 = (function()
								return;
							end)();
							while true do
								if (v111 == 0) then
									v112 = (function()
										return 1930 - (1869 + 61);
									end)();
									while true do
										if (v112 == (0 + 0)) then
											local v121 = (function()
												return 0 - 0;
											end)();
											while true do
												if (v121 ~= 0) then
												else
													v93 = (function()
														return v21();
													end)();
													v94 = (function()
														return nil;
													end)();
													v121 = (function()
														return 1;
													end)();
												end
												if (v121 == (1 - 0)) then
													v112 = (function()
														return 1 + 0;
													end)();
													break;
												end
											end
										end
										if (v112 == 1) then
											v92 = (function()
												return 1;
											end)();
											break;
										end
									end
									break;
								end
							end
						end
						if (v92 == (1 - 0)) then
							if (v93 == #"/") then
								v94 = (function()
									return v21() ~= 0;
								end)();
							elseif (v93 == 2) then
								v94 = (function()
									return v24();
								end)();
							elseif (v93 == #"xxx") then
								v94 = (function()
									return v25();
								end)();
							end
							v57[v91] = (function()
								return v94;
							end)();
							break;
						end
					end
				end
				v55[#"-19"] = (function()
					return v21();
				end)();
				v50 = (function()
					return 3;
				end)();
			end
			if (v50 == (0 + 0)) then
				v51 = (function()
					return function(v102, v103, v104)
						local v105 = (function()
							return 0;
						end)();
						local v106 = (function()
							return;
						end)();
						while true do
							if (0 ~= v105) then
							else
								v106 = (function()
									return 0;
								end)();
								while true do
									if (0 == v106) then
										local v117 = (function()
											return 1474 - (1329 + 145);
										end)();
										while true do
											if (v117 == (971 - (140 + 831))) then
												v102[v103 - #"}"] = (function()
													return v104();
												end)();
												return v102, v103, v104;
											end
										end
									end
								end
								break;
							end
						end
					end;
				end)();
				v52 = (function()
					return {};
				end)();
				v53 = (function()
					return {};
				end)();
				v50 = (function()
					return 1851 - (1409 + 441);
				end)();
			end
			if (v50 == (719 - (15 + 703))) then
				local v88 = (function()
					return 0 + 0;
				end)();
				while true do
					if (v88 ~= (439 - (262 + 176))) then
					else
						v56 = (function()
							return v23();
						end)();
						v50 = (function()
							return 2;
						end)();
						break;
					end
					if (0 ~= v88) then
					else
						v54 = (function()
							return {};
						end)();
						v55 = (function()
							return {v52,v53,nil,v54};
						end)();
						v88 = (function()
							return 689 - (198 + 490);
						end)();
					end
				end
			end
			if (v50 == 3) then
				for v95 = #"]", v23() do
					local v96 = (function()
						return v21();
					end)();
					if (v20(v96, #"\\", #"[") ~= 0) then
					else
						local v107 = (function()
							return 0 - 0;
						end)();
						local v108 = (function()
							return;
						end)();
						local v109 = (function()
							return;
						end)();
						local v110 = (function()
							return;
						end)();
						while true do
							if ((6 - 3) ~= v107) then
							else
								if (v20(v109, #"gha", #"91(") == #"[") then
									v110[#"xnxx"] = (function()
										return v57[v110[#"asd1"]];
									end)();
								end
								v52[v95] = (function()
									return v110;
								end)();
								break;
							end
							if (v107 == 2) then
								if (v20(v109, #"!", #"!") ~= #"~") then
								else
									v110[1208 - (696 + 510)] = (function()
										return v57[v110[2]];
									end)();
								end
								if (v20(v109, 2, 2) ~= #"!") then
								else
									v110[#"gha"] = (function()
										return v57[v110[#"nil"]];
									end)();
								end
								v107 = (function()
									return 5 - 2;
								end)();
							end
							if (v107 == (1262 - (1091 + 171))) then
								v108 = (function()
									return v20(v96, 1 + 1, #"asd");
								end)();
								v109 = (function()
									return v20(v96, #".com", 18 - 12);
								end)();
								v107 = (function()
									return 3 - 2;
								end)();
							end
							if (v107 == 1) then
								local v115 = (function()
									return 374 - (123 + 251);
								end)();
								local v116 = (function()
									return;
								end)();
								while true do
									if (v115 == 0) then
										v116 = (function()
											return 0;
										end)();
										while true do
											if (v116 ~= 0) then
											else
												v110 = (function()
													return {v22(),v22(),nil,nil};
												end)();
												if (v108 == (698 - (208 + 490))) then
													local v902 = (function()
														return 0;
													end)();
													local v903 = (function()
														return;
													end)();
													while true do
														if (v902 == (0 + 0)) then
															v903 = (function()
																return 0;
															end)();
															while true do
																if (v903 ~= (0 + 0)) then
																else
																	v110[#"nil"] = (function()
																		return v22();
																	end)();
																	v110[#"asd1"] = (function()
																		return v22();
																	end)();
																	break;
																end
															end
															break;
														end
													end
												elseif (v108 == #" ") then
													v110[#"xnx"] = (function()
														return v23();
													end)();
												elseif (v108 == (838 - (660 + 176))) then
													v110[#"19("] = (function()
														return v23() - ((1 + 1) ^ 16);
													end)();
												elseif (v108 ~= #"91(") then
												else
													local v2535 = (function()
														return 0;
													end)();
													local v2536 = (function()
														return;
													end)();
													while true do
														if (v2535 == 0) then
															v2536 = (function()
																return 0;
															end)();
															while true do
																if (v2536 == 0) then
																	v110[#"xnx"] = (function()
																		return v23() - ((204 - (14 + 188)) ^ 16);
																	end)();
																	v110[#".com"] = (function()
																		return v22();
																	end)();
																	break;
																end
															end
															break;
														end
													end
												end
												v116 = (function()
													return 1;
												end)();
											end
											if (v116 ~= (676 - (534 + 141))) then
											else
												v107 = (function()
													return 2;
												end)();
												break;
											end
										end
										break;
									end
								end
							end
						end
					end
				end
				for v97 = #",", v23() do
					v53, v97, v28 = (function()
						return v51(v53, v97, v28);
					end)();
				end
				return v55;
			end
		end
	end
	local function v29(v58, v59, v60)
		local v61 = v58[(2 - 1) + 0];
		local v62 = v58[1 + 1];
		local v63 = v58[3 + 0 + 0];
		return function(...)
			local v66 = v61;
			local v67 = v62;
			local v68 = v63;
			local v69 = v27;
			local v70 = 1 + 0;
			local v71 = -1;
			local v72 = {};
			local v73 = {...};
			local v74 = v12("#", ...) - 1;
			local v75 = {};
			local v76 = {};
			for v84 = 0, v74 do
				if ((1166 >= 558) and (v84 >= v68)) then
					v72[v84 - v68] = v73[v84 + (1 - 0)];
				else
					v76[v84] = v73[v84 + (2 - 1)];
				end
			end
			local v77 = (v74 - v68) + 1 + (0 - 0);
			local v78;
			local v79;
			while true do
				v78 = v66[v70];
				v79 = v78[1 + 0];
				if (v79 <= (477 - (115 + 281))) then
					if (v79 <= (93 - 53)) then
						if (v79 <= (16 + 3)) then
							if (v79 <= (21 - 12)) then
								if (v79 <= (14 - 10)) then
									if (v79 <= 1) then
										if ((965 == 965) and (v79 > 0)) then
											local v123;
											v76[v78[2]] = v76[v78[870 - (550 + 317)]] % v78[5 - 1];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[2 - 0]] = v76[v78[8 - 5]];
											v70 = v70 + (286 - (134 + 151));
											v78 = v66[v70];
											v76[v78[1667 - (970 + 695)]] = v60[v78[5 - 2]];
											v70 = v70 + (1991 - (582 + 1408));
											v78 = v66[v70];
											v76[v78[2]] = v76[v78[3 + 0]][v78[(28 - 15) - 9]];
											v70 = v70 + (1 - 0);
											v78 = v66[v70];
											v76[v78[938 - (889 + 47)]] = v76[v78[11 - (6 + 2)]] / v78[1828 - (1195 + (1893 - (1153 + 111)))];
											v70 = v70 + ((1 - 0) - (0 + 0));
											v78 = v66[v70];
											v123 = v78[2];
											v76[v123] = v76[v123](v76[v123 + (242 - (187 + 54))]);
											v70 = v70 + (781 - (162 + 618));
											v78 = v66[v70];
											v76[v78[2 + 0]] = v60[v78[2 + 0 + 1]];
											v70 = v70 + (1 - 0);
											v78 = v66[v70];
											v76[v78[1 + 1]] = v76[v78[4 - 1]][v78[1 + 3]];
											v70 = v70 + (1637 - (1373 + 263));
											v78 = v66[v70];
											v76[v78[1002 - (451 + 549)]] = v76[v78[1 + 2]] / v78[5 - 1];
											v70 = v70 + (1 - 0);
											v78 = v66[v70];
											v123 = v78[1386 - (746 + 638)];
											v76[v123] = v76[v123](v76[v123 + 1]);
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[2 - 0]] = v76[v78[344 - (218 + 123)]];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[1583 - (1535 + 46)]] = v76[v78[3 + 0]];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[2]] = v78[3];
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v70 = v78[563 - (306 + 254)];
										else
											local v145 = 0;
											local v146;
											local v147;
											local v148;
											local v149;
											while true do
												if (v145 == (1 + 1)) then
													for v1947 = v146, v71 do
														local v1948 = 0;
														while true do
															if ((0 == v1948) or (1813 > 1941)) then
																v149 = v149 + 1;
																v76[v1947] = v147[v149];
																break;
															end
														end
													end
													break;
												end
												if ((4740 == 4740) and (v145 == (0 - 0))) then
													v146 = v78[1469 - (899 + 568)];
													v147, v148 = v69(v76[v146](v13(v76, v146 + 1 + 0, v78[3])));
													v145 = 1;
												end
												if (v145 == (2 - 1)) then
													v71 = (v148 + v146) - (604 - (268 + 335));
													v149 = 290 - (60 + 230);
													v145 = 2;
												end
											end
										end
									elseif (v79 <= (574 - (200 + 226 + 146))) then
										local v150;
										local v151;
										local v152;
										v152 = v78[1 + 1];
										v151 = v76[v78[3]];
										v76[v152 + 1] = v151;
										v76[v152] = v151[v78[1460 - (282 + 1174)]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[813 - (76 + 493 + 242)]] = v78[8 - 5];
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v76[v78[1026 - (706 + 318)]] = v60[v78[1254 - (721 + 530)]];
										v70 = v70 + (1272 - ((1779 - 834) + 326));
										v78 = v66[v70];
										v76[v78[4 - 2]] = v76[v78[3 + 0]][v78[704 - (271 + 429)]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[2]] = v59[v78[3 + 0]];
										v70 = v70 + (1501 - (1408 + 92));
										v78 = v66[v70];
										v76[v78[1088 - (461 + 625)]] = v76[v78[3]][v78[1292 - (993 + 295)]];
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v76[v78[2]] = v76[v78[3]][v78[3 + 1]];
										v70 = v70 + (1172 - (418 + 753));
										v78 = v66[v70];
										v76[v78[1 + 1]] = v60[v78[(97 - (23 + 73)) + 2]];
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v76[v78[1 + (286 - (26 + 259))]] = v76[v78[(232 + 300) - (406 + 123)]][v78[4]];
										v70 = v70 + (1770 - (1749 + 20));
										v78 = v66[v70];
										v152 = v78[1 + 1];
										v76[v152] = v76[v152](v13(v76, v152 + (1323 - (1249 + 73)), v78[2 + 1]));
										v70 = v70 + (1146 - (466 + (1059 - 380)));
										v78 = v66[v70];
										v76[v78[2]] = {};
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[4 - 2]] = v59[v78[8 - 5]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[1902 - (106 + 1794)]] = v76[v78[(3 - 2) + 2]][v78[1633 - (1094 + 535)]];
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v76[v78[5 - 3]][v76[v78[7 - 4]]] = v76[v78[4]];
										v70 = v70 + (115 - (4 + 110));
										v78 = v66[v70];
										v76[v78[2]] = {};
										v70 = v70 + (585 - (57 + 527));
										v78 = v66[v70];
										v76[v78[1429 - (41 + 1386)]] = v76[v78[3]][v78[107 - (17 + 10 + 76)]];
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v76[v78[3 - 1]] = v76[v78[3]][v78[11 - 7]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v152 = v78[168 - (122 + 44)];
										v150 = v76[v152];
										v151 = v78[5 - (1878 - (1554 + 322))];
										for v904 = 3 - 2, v151 do
											v150[v904] = v76[v152 + v904];
										end
									elseif (v79 > ((1428 - (989 + 436)) + 0)) then
										local v939;
										local v940, v941;
										local v942;
										local v943;
										v943 = v78[2];
										v942 = v76[v78[1 + 2]];
										v76[v943 + 1] = v942;
										v76[v943] = v942[v78[4]];
										v70 = v70 + (1 - (1178 - (816 + 362)));
										v78 = v66[v70];
										v76[v78[67 - (30 + (67 - 32))]] = v59[v78[3]];
										v70 = v70 + 1 + (0 - 0);
										v78 = v66[v70];
										v76[v78[1259 - (1043 + 214)]] = v78[11 - 8];
										v70 = v70 + (1213 - (323 + 889));
										v78 = v66[v70];
										v76[v78[5 - 3]] = v78[(2149 - 1566) - (361 + 219)];
										v70 = v70 + (321 - (53 + 267));
										v78 = v66[v70];
										v943 = v78[1 + 1];
										v940, v941 = v69(v76[v943](v13(v76, v943 + (414 - ((27 - 12) + 398)), v78[985 - (18 + 964)])));
										v71 = (v941 + v943) - 1;
										v939 = 0 - 0;
										for v1542 = v943, v71 do
											local v1543 = 0 + 0;
											while true do
												if ((0 + 0) == v1543) then
													v939 = v939 + (851 - (20 + 830));
													v76[v1542] = v940[v939];
													break;
												end
											end
										end
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v943 = v78[128 - (116 + 10)];
										v76[v943] = v76[v943](v13(v76, v943 + 1, v71));
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v943 = v78[4 - 2];
										v942 = v76[v78[13 - 10]];
										v76[v943 + (739 - (542 + 196))] = v942;
										v76[v943] = v942[v78[8 - 4]];
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v76[v78[2 + 0]] = v59[v78[2 + 1]];
										v70 = v70 + ((1 + 1) - 1);
										v78 = v66[v70];
										v76[v78[2]] = v76[v78[3]][v78[4]];
										v70 = v70 + (2 - 1);
										v78 = v66[v70];
										v943 = v78[1553 - (1126 + 425)];
										v76[v943] = v76[v943](v13(v76, v943 + 1, v78[3]));
										v70 = v70 + (406 - (118 + 287));
										v78 = v66[v70];
										v76[v78[7 - 5]] = v76[v78[1124 - (118 + (1766 - (86 + 677)))]];
										v70 = v70 + 1;
										v78 = v66[v70];
										if v76[v78[5 - 3]] then
											v70 = v70 + 1 + 0;
										else
											v70 = v78[380 - (142 + 235)];
										end
									else
										do
											return;
										end
									end
								elseif ((345 <= 3537) and (v79 <= 6)) then
									if (v79 > (22 - 17)) then
										if (v76[v78[1 + 0 + 1]] ~= v76[v78[981 - ((1579 - (263 + 763)) + 424)]]) then
											v70 = v70 + (1 - 0);
										else
											v70 = v78[3 + 0];
										end
									else
										v76[v78[2 + 0]] = -v76[v78[3]];
									end
								elseif (v79 <= (5 + 2)) then
									local v186;
									local v187;
									v187 = v78[1 + 0 + 1];
									v76[v187] = v76[v187](v13(v76, v187 + 1 + 0, v78[3]));
									v70 = v70 + 1;
									v78 = v66[v70];
									v187 = v78[4 - 2];
									v186 = v76[v78[7 - 4]];
									v76[v187 + (2 - 1)] = v186;
									v76[v187] = v186[v78[(860 - (649 + 209)) + 2]];
									v70 = v70 + ((17 - 13) - 3);
									v78 = v66[v70];
									v76[v78[755 - (239 + 514)]] = v76[v78[2 + 1]];
									v70 = v70 + (1330 - (797 + 532));
									v78 = v66[v70];
									v76[v78[2 + 0]] = v78[2 + 1];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[1204 - (373 + 829)]] = v78[3];
									v70 = v70 + 1;
									v78 = v66[v70];
									v187 = v78[2];
									v76[v187] = v76[v187](v13(v76, v187 + (732 - (476 + 255)), v78[1133 - (369 + 761)]));
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2 - 0]] = v78[5 - 2] ~= (238 - (64 + 174));
								elseif ((v79 == (2 + 6)) or (4934 == 3962)) then
									v76[v78[2 - 0]][v76[v78[339 - (144 + 192)]]] = v78[220 - (42 + 174)];
								else
									local v972;
									v76[v78[733 - (643 + 88)]] = v76[v78[3 + (1769 - (54 + 1715))]] % v78[(15 - 11) + 0];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2]] = v76[v78[1507 - (363 + 1141)]];
									v70 = v70 + (1581 - (1183 + (1128 - 731)));
									v78 = v66[v70];
									v76[v78[2]] = v60[v78[8 - 5]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2]] = v76[v78[3 + 0]][v78[1979 - (1913 + 62)]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[(9 - 4) - 3]] = v76[v78[3]] / v78[1937 - (454 + 111 + 1368)];
									v70 = v70 + ((1 + 2) - 2);
									v78 = v66[v70];
									v972 = v78[1663 - (1477 + (697 - 513))];
									v76[v972] = v76[v972](v76[v972 + ((1384 - (132 + 1251)) - 0)]);
									v70 = v70 + 1 + 0 + 0;
									v78 = v66[v70];
									v76[v78[858 - (564 + 292)]] = v60[v78[4 - 1]];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[306 - (244 + 60)]] = v76[v78[3]][v78[4 + 0]];
									v70 = v70 + (477 - (41 + 435));
									v78 = v66[v70];
									v76[v78[1003 - (938 + 63)]] = v76[v78[3 + 0]] / v78[1129 - ((2319 - 1383) + 189)];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v972 = v78[1615 - (1565 + 48)];
									v76[v972] = v76[v972](v76[v972 + 1]);
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[1140 - (606 + 176 + 356)]] = v76[v78[270 - (176 + 91)]];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[2 - 0]] = v76[v78[1095 - (975 + 117)]];
									v70 = v70 + (1876 - (157 + 1718));
									v78 = v66[v70];
									v76[v78[2]] = v78[3 + 0];
								end
							elseif ((3649 > 701) and (v79 <= 14)) then
								if (v79 <= (38 - 27)) then
									if (v79 == (34 - 24)) then
										v76[v78[2]] = v76[v78[1021 - (697 + 321)]] % v76[v78[10 - 6]];
										v70 = v70 + (1 - 0);
										v78 = v66[v70];
										v76[v78[4 - 2]] = v59[v78[2 + 1]];
										v70 = v70 + (1 - 0);
										v78 = v66[v70];
										v76[v78[5 - 3]] = v76[v78[1230 - ((780 - (185 + 273)) + 905)]] % v76[v78[4]];
										v70 = v70 + (612 - (147 + 455 + 9));
										v78 = v66[v70];
										v76[v78[1191 - (449 + 740)]] = v76[v78[3]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[874 - (826 + 46)]] = v78[(2727 - 1777) - (245 + 702)];
									else
										local v212;
										local v213;
										local v212, v214;
										local v215;
										local v216;
										v76[v78[6 - 4]] = v60[v78[1 + 2]];
										v70 = v70 + (1899 - (260 + 1638));
										v78 = v66[v70];
										v76[v78[(166 + 276) - (382 + 58)]] = v76[v78[3]][v78[4]];
										v70 = v70 + (3 - 2);
										v78 = v66[v70];
										v76[v78[2]] = v60[v78[3 + 0]];
										v70 = v70 + (1 - 0);
										v78 = v66[v70];
										v76[v78[2]] = v59[v78[3]];
										v70 = v70 + (2 - 1);
										v78 = v66[v70];
										v216 = v78[1207 - (902 + 303)];
										v215 = v76[v78[5 - 2]];
										v76[v216 + (2 - 1)] = v215;
										v76[v216] = v215[v78[1 + 3]];
										v70 = v70 + (1691 - (1121 + 569));
										v78 = v66[v70];
										v76[v78[216 - (22 + 192)]] = v59[v78[3]];
										v70 = v70 + (684 - (483 + (1424 - (361 + 863))));
										v78 = v66[v70];
										v76[v78[1465 - (1404 + 59)]] = v78[3];
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[2]] = v78[8 - 5];
										v70 = v70 + 1;
										v78 = v66[v70];
										v216 = v78[2 - 0];
										v212, v214 = v69(v76[v216](v13(v76, v216 + 1, v78[3])));
										v71 = (v214 + v216) - 1;
										v213 = 0;
										for v907 = v216, v71 do
											local v908 = 765 - (468 + 297);
											while true do
												if (v908 == (562 - ((910 - 576) + 228))) then
													v213 = v213 + (3 - (1329 - (443 + 884)));
													v76[v907] = v212[v213];
													break;
												end
											end
										end
										v70 = v70 + (2 - (2 - 1));
										v78 = v66[v70];
										v216 = v78[2 - (0 + 0)];
										v76[v216] = v76[v216](v13(v76, v216 + 1 + 0, v71));
										v70 = v70 + (237 - (141 + 95));
										v78 = v66[v70];
										v216 = v78[2 + 0];
										v215 = v76[v78[3]];
										v76[v216 + (2 - 1)] = v215;
										v76[v216] = v215[v78[4]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v216 = v78[2];
										v212, v214 = v69(v76[v216](v76[v216 + 1]));
										v71 = (v214 + v216) - 1;
										v213 = 0 - 0;
										for v909 = v216, v71 do
											v213 = v213 + 1 + 0;
											v76[v909] = v212[v213];
										end
										v70 = v70 + 1;
										v78 = v66[v70];
										v216 = v78[5 - 3];
										v212 = {v76[v216](v13(v76, v216 + 1, v71))};
										v213 = 0 + 0;
										for v912 = v216, v78[5 - 1] do
											v213 = v213 + 1;
											v76[v912] = v212[v213];
										end
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v70 = v78[3];
									end
								elseif (v79 <= (175 - (92 + 71))) then
									v76[v78[1 + 1]] = v76[v78[4 - 1]] / v78[769 - (457 + 117 + 191)];
								elseif (v79 == (11 + 2 + 0)) then
									local v993;
									v76[v78[2]] = v76[v78[3]][v78[4]];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[2 + (0 - 0)]] = v59[v78[(1599 - (16 + 731)) - (254 + 595)]];
									v70 = v70 + (127 - (55 + 71));
									v78 = v66[v70];
									v76[v78[2 - 0]] = v78[1793 - (573 + 1217)];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[1 + 1]] = v78[3];
									v70 = v70 + (1 - 0);
									v78 = v66[v70];
									v993 = v78[941 - (714 + 225)];
									v76[v993] = v76[v993](v13(v76, v993 + (2 - 1), v78[3 - 0]));
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2]] = v59[v78[3 - 0]];
									v70 = v70 + (807 - (118 + 688));
									v78 = v66[v70];
									v993 = v78[50 - (25 + 23)];
									v76[v993] = v76[v993](v13(v76, v993 + 1 + 0, v78[1889 - (927 + 959)]));
									v70 = v70 + ((2 + 1) - 2);
									v78 = v66[v70];
									v59[v78[735 - (16 + 716)]] = v76[v78[2]];
									v70 = v70 + (1 - 0);
									v78 = v66[v70];
									v76[v78[99 - (11 + 86)]] = v59[v78[6 - 3]];
									v70 = v70 + (286 - (175 + 110));
									v78 = v66[v70];
									v76[v78[4 - 2]][v78[14 - 11]] = v76[v78[4]];
									v70 = v70 + (1797 - (503 + 1293));
									v78 = v66[v70];
									v76[v78[(3 + 2) - 3]] = v78[3];
								elseif (v76[v78[2 + 0]] == v76[v78[4]]) then
									v70 = v70 + 1;
								else
									v70 = v78[3];
								end
							elseif (v79 <= 16) then
								if (v79 > ((826 + 250) - (810 + 251))) then
									v76[v78[2 + 0]] = v29(v67[v78[1 + 2]], nil, v60);
								else
									local v243 = 0;
									local v244;
									local v245;
									local v246;
									while true do
										if (v243 == 1) then
											v246 = 0 + 0;
											for v1953 = v244, v78[4] do
												local v1954 = 533 - (43 + 490);
												while true do
													if ((v1954 == (733 - (711 + 22))) or (1985 >= 2687)) then
														v246 = v246 + 1;
														v76[v1953] = v245[v246];
														break;
													end
												end
											end
											break;
										end
										if ((0 - 0) == v243) then
											v244 = v78[2];
											v245 = {v76[v244](v76[v244 + 1 + 0])};
											v243 = 1 - 0;
										end
									end
								end
							elseif ((v79 <= (2 + 11 + 4)) or (987 >= 4907)) then
								local v247 = 1744 - (1344 + (911 - 511));
								local v248;
								while true do
									if ((405 - (219 + 36 + (1935 - (1107 + 678)))) == v247) then
										v248 = nil;
										v248 = v78[2 + 0];
										v76[v248](v13(v76, v248 + 1 + 0, v78[12 - 9]));
										v70 = v70 + (3 - 2);
										v247 = 1740 - (404 + 1335);
									end
									if ((v247 == (409 - (183 + 223))) or (4104 < 453)) then
										v76[v78[2 - 0]] = v76[v78[2 + 1 + 0]][v78[4 + 0]];
										v70 = v70 + 1 + (50 - (4 + 46));
										v78 = v66[v70];
										if ((4167 >= 1973) and v76[v78[339 - (10 + 327)]]) then
											v70 = v70 + 1 + 0;
										else
											v70 = v78[341 - (118 + 220)];
										end
										break;
									end
									if (v247 == 2) then
										v248 = v78[1 + 1];
										v76[v248] = v76[v248]();
										v70 = v70 + (450 - ((407 - 299) + 341));
										v78 = v66[v70];
										v247 = 2 + 1;
									end
									if ((2048 >= 1829) and (v247 == (4 - 3))) then
										v78 = v66[v70];
										v76[v78[1495 - (711 + (1437 - 655))]] = v60[v78[3]];
										v70 = v70 + (1 - 0);
										v78 = v66[v70];
										v247 = 471 - (270 + 199);
									end
								end
							elseif (v79 == (6 + 12)) then
								v59[v78[1822 - (580 + 1239)]] = v76[v78[5 - (2 + 1)]];
							else
								v76[v78[2 + 0]] = v76[v78[1 + 2]] * v76[v78[4]];
							end
						elseif (v79 <= (13 + 16)) then
							if (v79 <= 24) then
								if (v79 <= (54 - 33)) then
									if (v79 == (13 + 7)) then
										local v249 = 1167 - (645 + 522);
										local v250;
										local v251;
										local v252;
										local v253;
										local v254;
										while true do
											if (v249 == 0) then
												v250 = nil;
												v251 = nil;
												v252, v253 = nil;
												v249 = 1791 - ((2133 - 1123) + 780);
											end
											if (v249 == 7) then
												v76[v254] = v76[v254](v13(v76, v254 + 1, v71));
												v70 = v70 + 1 + 0;
												v78 = v66[v70];
												v249 = (60 - 22) - 30;
											end
											if (v249 == (26 - 17)) then
												v76[v254] = v250[v78[1840 - (1045 + 791)]];
												break;
											end
											if ((2342 >= 859) and (v249 == (1397 - (1262 + 134)))) then
												v254 = nil;
												v76[v78[4 - 2]] = v59[v78[4 - 1]];
												v70 = v70 + (506 - ((867 - 516) + 154));
												v249 = 1576 - (1281 + 293);
											end
											if (v249 == 4) then
												v78 = v66[v70];
												v254 = v78[268 - (28 + 238)];
												v252, v253 = v69(v76[v254](v13(v76, v254 + (2 - 1), v78[1562 - (344 + 1037 + 178)])));
												v249 = 5 + 0;
											end
											if (v249 == (5 + 0)) then
												v71 = (v253 + v254) - 1;
												v251 = 0 + 0;
												for v1955 = v254, v71 do
													local v1956 = 0 - 0;
													while true do
														if ((2821 > 2453) and (v1956 == (0 + 0 + 0))) then
															v251 = v251 + (796 - (383 + 412));
															v76[v1955] = v252[v251];
															break;
														end
													end
												end
												v249 = 476 - (381 + 70 + 19);
											end
											if (v249 == 8) then
												v254 = v78[2 + 0];
												v250 = v76[v78[3 + 0]];
												v76[v254 + (1 - 0)] = v250;
												v249 = 1165 - (1074 + 6 + 76);
											end
											if (v249 == (12 - (3 + 3))) then
												v70 = v70 + (1785 - (214 + 1570));
												v78 = v66[v70];
												v254 = v78[2];
												v249 = 1462 - (990 + 465);
											end
											if (v249 == (1 + 1)) then
												v78 = v66[v70];
												v76[v78[1 + 1]] = v78[3 + 0 + 0];
												v70 = v70 + (3 - 2);
												v249 = 1729 - (1638 + 30 + 58);
											end
											if ((4218 > 3810) and (v249 == ((862 - 233) - (512 + 114)))) then
												v78 = v66[v70];
												v76[v78[5 - 3]] = v78[5 - 2];
												v70 = v70 + (3 - 2);
												v249 = 4;
											end
										end
									else
										local v255 = 0 + 0;
										local v256;
										local v257;
										local v258;
										local v259;
										while true do
											if ((v255 == (1 + 4)) or (2163 > 4184)) then
												v76[v259](v13(v76, v259 + 1, v71));
												break;
											end
											if ((v255 == 2) or (786 >= 821)) then
												v78 = v66[v70];
												v76[v78[2 + 0]] = v78[3];
												v70 = v70 + (3 - 2);
												v78 = v66[v70];
												v255 = 3;
											end
											if ((1997 - (109 + 1885)) == v255) then
												v259 = v78[2];
												v257, v258 = v69(v76[v259](v13(v76, v259 + (1470 - (1090 + 179 + 200)), v78[8 - 5])));
												v71 = (v258 + v259) - (1 - 0);
												v256 = 815 - (98 + 717);
												v255 = 4;
											end
											if (v255 == 0) then
												v256 = nil;
												v257, v258 = nil;
												v259 = nil;
												v76[v78[2]] = v76[v78[829 - (802 + 24)]];
												v255 = 1;
											end
											if (v255 == 1) then
												v70 = v70 + (1 - 0);
												v78 = v66[v70];
												v76[v78[2]] = v78[3];
												v70 = v70 + (1 - 0);
												v255 = 1 + (1 - 0);
											end
											if (4 == v255) then
												for v1957 = v259, v71 do
													v256 = v256 + (2 - 1) + 0;
													v76[v1957] = v257[v256];
												end
												v70 = v70 + 1 + 0 + 0;
												v78 = v66[v70];
												v259 = v78[1 + 1];
												v255 = 13 - 8;
											end
										end
									end
								elseif (v79 <= (73 - 51)) then
									local v260 = 0 + (707 - (667 + 40));
									local v261;
									while true do
										if ((v260 == (2 + 2)) or (776 > 3893)) then
											v70 = v70 + 1;
											v78 = v66[v70];
											v70 = v78[3 + 0];
											break;
										end
										if (v260 == (3 + 0)) then
											v70 = v70 + 1;
											v78 = v66[v70];
											v261 = v78[1 + 1];
											do
												return v13(v76, v261, v71);
											end
											v260 = 1437 - (797 + 636);
										end
										if (v260 == 0) then
											v261 = nil;
											v76[v78[9 - 7]] = v76[v78[1622 - ((2737 - (436 + 874)) + 192)]][v78[2 + 2]];
											v70 = v70 + (2 - 1);
											v78 = v66[v70];
											v260 = 1;
										end
										if (v260 == (1 + 0)) then
											v76[v78[1608 - (762 + 844)]] = v78[2 + 1] ^ v76[v78[330 - (192 + (232 - 98))]];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[1278 - (316 + 960)]] = v76[v78[2 + 1]] * v76[v78[4]];
											v260 = 2 + 0;
										end
										if ((2 + 0) == v260) then
											v70 = v70 + 1;
											v78 = v66[v70];
											v261 = v78[7 - 5];
											do
												return v76[v261](v13(v76, v261 + (552 - (83 + 468)), v78[1809 - ((2754 - 1552) + 604)]));
											end
											v260 = 13 - 10;
										end
									end
								elseif (v79 == 23) then
									local v1016;
									local v1017, v1018;
									local v1019;
									v76[v78[2 - 0]] = v76[v78[3]];
									v70 = v70 + (2 - (1 + 0));
									v78 = v66[v70];
									v76[v78[327 - (45 + 280)]] = v59[v78[3 + 0]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[2]] = v59[v78[3]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[2]] = v59[v78[3 + 0]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2 + 0]] = v59[v78[3]];
									v70 = v70 + 1 + 0 + 0;
									v78 = v66[v70];
									v76[v78[3 - 1]] = v76[v78[3]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[(2389 - (209 + 267)) - ((623 - 283) + 1571)]] = v76[v78[2 + 1]];
									v70 = v70 + ((4987 - 3214) - (1733 + 39));
									v78 = v66[v70];
									v76[v78[5 - 3]] = v76[v78[3]] + v78[1038 - (125 + 909)];
									v70 = v70 + (1949 - (1096 + 852));
									v78 = v66[v70];
									v76[v78[2]] = v76[v78[2 + 1]] + v78[5 - 1];
									v70 = v70 + 1;
									v78 = v66[v70];
									v1019 = v78[2 + 0];
									v1017, v1018 = v69(v76[v1019](v13(v76, v1019 + 1, v78[(2226 - (1611 + 100)) - (409 + 103)])));
									v71 = (v1018 + v1019) - ((180 + 57) - (46 + 190));
									v1016 = 784 - (14 + 770);
									for v1597 = v1019, v71 do
										local v1598 = 95 - (51 + 44);
										while true do
											if (v1598 == (0 + 0)) then
												v1016 = v1016 + ((3102 - (1165 + 619)) - (1114 + 203));
												v76[v1597] = v1017[v1016];
												break;
											end
										end
									end
									v70 = v70 + (727 - (228 + 498));
									v78 = v66[v70];
									v1019 = v78[1 + 1];
									v76[v1019] = v76[v1019](v13(v76, v1019 + (1 - 0) + 0, v71));
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[665 - (174 + 489)]] = v59[v78[7 - 4]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[1907 - (830 + 1075)]] = v59[v78[527 - (303 + 221)]];
									v70 = v70 + (1270 - (231 + 1038));
									v78 = v66[v70];
									v76[v78[2 + 0]] = v76[v78[384 - (229 + 152)]];
									v70 = v70 + (1163 - (171 + 991));
									v78 = v66[v70];
									v76[v78[2]] = #v76[v78[12 - 9]];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[4 - 2]] = v76[v78[3 + 0]] % v76[v78[4]];
									v70 = v70 + (3 - 2);
									v78 = v66[v70];
									v76[v78[5 - 3]] = v78[4 - 1] + v76[v78[12 - 8]];
									v70 = v70 + (1249 - (111 + 1137));
									v78 = v66[v70];
									v76[v78[160 - (91 + 67)]] = #v76[v78[8 - 5]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[1 + 1]] = v76[v78[526 - (423 + 100)]] % v76[v78[1 + 3]];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[(196 - (107 + 87)) + 0]] = v78[3] + v76[v78[775 - (326 + 445)]];
									v70 = v70 + (4 - 3);
									v78 = v66[v70];
									v76[v78[2]] = v76[v78[(10 - 4) - 3]] + v78[9 - 5];
									v70 = v70 + (712 - (530 + 181));
									v78 = v66[v70];
									v1019 = v78[883 - (614 + 267)];
									v1017, v1018 = v69(v76[v1019](v13(v76, v1019 + (33 - (19 + 13)), v78[3])));
									v71 = (v1018 + v1019) - (1 - 0);
									v1016 = 0;
									for v1599 = v1019, v71 do
										local v1600 = 0 - 0;
										while true do
											if (v1600 == 0) then
												v1016 = v1016 + (2 - 1);
												v76[v1599] = v1017[v1016];
												break;
											end
										end
									end
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v1019 = v78[3 - 1];
									v1017, v1018 = v69(v76[v1019](v13(v76, v1019 + 1, v71)));
									v71 = (v1018 + v1019) - 1;
									v1016 = 0 - 0;
									for v1601 = v1019, v71 do
										local v1602 = 1812 - (1293 + 519);
										while true do
											if ((0 - (0 + 0)) == v1602) then
												v1016 = v1016 + (2 - 1);
												v76[v1601] = v1017[v1016];
												break;
											end
										end
									end
									v70 = v70 + (1 - 0);
									v78 = v66[v70];
									v1019 = v78[8 - 6];
									v76[v1019] = v76[v1019](v13(v76, v1019 + 1, v71));
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[2 + 0]] = v76[v78[3]] % v78[1 + 3];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v1019 = v78[1 + 1 + 0];
									v1017, v1018 = v69(v76[v1019](v76[v1019 + 1 + 0]));
									v71 = (v1018 + v1019) - (1 + 0);
									v1016 = 1096 - (709 + 387);
									for v1603 = v1019, v71 do
										local v1604 = 1858 - (673 + 1185);
										while true do
											if (v1604 == 0) then
												v1016 = v1016 + ((9 - 7) - (3 - 2));
												v76[v1603] = v1017[v1016];
												break;
											end
										end
									end
									v70 = v70 + (3 - 2);
									v78 = v66[v70];
									v1019 = v78[2 - 0];
									v76[v1019](v13(v76, v1019 + 1 + 0 + 0, v71));
								else
									local v1049;
									local v1050, v1051;
									local v1052;
									v76[v78[2 + 0]] = v59[v78[(17 - (13 + 1)) - 0]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2]] = v78[3 + 0];
									v70 = v70 + (1 - 0);
									v78 = v66[v70];
									v76[v78[2]] = v78[3];
									v70 = v70 + (1 - 0);
									v78 = v66[v70];
									v1052 = v78[2];
									v1050, v1051 = v69(v76[v1052](v13(v76, v1052 + (1881 - (446 + 1434)), v78[3])));
									v71 = (v1051 + v1052) - (1284 - (1040 + 154 + 89));
									v1049 = (1058 - (987 + 71)) - 0;
									for v1605 = v1052, v71 do
										v1049 = v1049 + (1848 - (559 + (3667 - 2379)));
										v76[v1605] = v1050[v1049];
									end
									v70 = v70 + 1;
									v78 = v66[v70];
									v1052 = v78[2];
									v76[v1052] = v76[v1052](v13(v76, v1052 + 1, v71));
									v70 = v70 + (1932 - (609 + 1322));
									v78 = v66[v70];
									v76[v78[456 - (13 + 441)]] = v59[v78[10 - 7]];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[9 - 7]] = v76[v78[(1 - 0) + 2]][v78[14 - 10]];
									v70 = v70 + 1;
									v78 = v66[v70];
									if (v76[v78[1 + 1]] == v76[v78[2 + 2]]) then
										v70 = v70 + (2 - 1);
									else
										v70 = v78[3];
									end
								end
							elseif (v79 <= ((714 - (514 + 185)) + 11)) then
								if (v79 > ((6 + 39) - (39 - 19))) then
									v76[v78[2 + 0]][v78[3]] = v78[3 + 1];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[(7 - 5) + 0]] = v59[v78[(1507 - (771 + 733)) + 0]];
									v70 = v70 + (434 - (153 + 280));
									v78 = v66[v70];
									v76[v78[5 - 3]] = v60[v78[3]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[(1 - 0) + 1]] = v76[v78[2 + 1]][v78[(8 - 4) + (1167 - (407 + 760))]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2]] = v76[v78[4 - 1]][v78[4]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[669 - (89 + 578)]][v78[3 + 0]] = v76[v78[8 - 4]];
									v70 = v70 + (1050 - (572 + 477));
									v78 = v66[v70];
									v76[v78[1 + 1]] = v78[2 + 1];
									v70 = v70 + 1;
									v78 = v66[v70];
									v70 = v78[1 + 2];
								else
									local v278 = 86 - (84 + 2);
									local v279;
									while true do
										if (v278 == ((0 + 0) - 0)) then
											v279 = v78[2];
											do
												return v76[v279](v13(v76, v279 + 1 + 0, v78[(24 + 821) - (497 + 345)]));
											end
											break;
										end
									end
								end
							elseif ((v79 <= (1 + 26)) or (1920 > 3487)) then
								v76[v78[2 + 0]] = v78[(1855 - (169 + 1685)) + 2] ^ v76[v78[1337 - (605 + 728)]];
							elseif ((840 < 4049) and (v79 > (20 + 8))) then
								local v1065 = 0 - 0;
								local v1066;
								local v1067;
								local v1068;
								local v1069;
								local v1070;
								while true do
									if (v1065 == (1 + 6)) then
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[7 - 5]] = v76[v78[3]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v1065 = 8;
									end
									if ((v1065 == (5 + 0)) or (688 > 2840)) then
										v70 = v70 + 1;
										v78 = v66[v70];
										v1070 = v78[1 + 1];
										v76[v1070](v13(v76, v1070 + (2 - 1), v71));
										v70 = v70 + 1 + (391 - (41 + 350));
										v1065 = 495 - (457 + (87 - 55));
									end
									if (v1065 == (2 + 2)) then
										v1070 = v78[1404 - (832 + 570)];
										v1068, v1069 = v69(v76[v1070](v13(v76, v1070 + 1 + (0 - 0), v78[1 + 2])));
										v71 = (v1069 + v1070) - 1;
										v1067 = (0 - 0) - 0;
										for v2453 = v1070, v71 do
											v1067 = v1067 + 1 + 0;
											v76[v2453] = v1068[v1067];
										end
										v1065 = 801 - (588 + 208);
									end
									if (v1065 == (0 - 0)) then
										v1066 = nil;
										v1067 = nil;
										v1068, v1069 = nil;
										v1070 = nil;
										v1070 = v78[1802 - (884 + 916)];
										v1065 = 1 - 0;
									end
									if ((v1065 == (2 + 0)) or (1643 > 1773)) then
										v78 = v66[v70];
										v76[v78[655 - (232 + 421)]] = v76[v78[3]];
										v70 = v70 + (1890 - (1569 + 320));
										v78 = v66[v70];
										v76[v78[1 + 1]] = v78[3];
										v1065 = 1 + 2;
									end
									if (v1065 == ((46 - 26) - 14)) then
										v78 = v66[v70];
										v1070 = v78[607 - (316 + 289)];
										v1066 = v76[v78[7 - 4]];
										v76[v1070 + 1 + 0 + 0] = v1066;
										v76[v1070] = v1066[v78[(2344 - (790 + 97)) - (666 + (3578 - 2791))]];
										v1065 = 432 - (360 + 65);
									end
									if (v1065 == (8 + 0)) then
										v76[v78[256 - (79 + 175)]] = v78[4 - 1];
										break;
									end
									if ((v1065 == (3 + 0)) or (2774 < 2244)) then
										v70 = v70 + ((1 + 1) - 1);
										v78 = v66[v70];
										v76[v78[3 - 1]] = v78[(306 + 596) - (503 + 396)];
										v70 = v70 + (182 - (92 + 89));
										v78 = v66[v70];
										v1065 = 7 - 3;
									end
									if ((710 == 710) and (v1065 == (1 + 0))) then
										v76[v1070](v76[v1070 + 1 + 0]);
										v70 = v70 + (3 - 2);
										v78 = v66[v70];
										v76[v78[(246 - (235 + 10)) + 1]] = v76[v78[3]];
										v70 = v70 + (2 - 1);
										v1065 = 2 + 0;
									end
								end
							else
								local v1071 = 0 + 0;
								local v1072;
								local v1073;
								local v1074;
								while true do
									if ((3137 <= 3516) and (v1071 == (2 - 1))) then
										v1074 = v76[v1072 + 2 + 0];
										if (v1074 > (0 + 0)) then
											if (v1073 > v76[v1072 + (1 - 0)]) then
												v70 = v78[3];
											else
												v76[v1072 + (1247 - (485 + 759))] = v1073;
											end
										elseif ((4639 >= 4543) and (v1073 < v76[v1072 + 1])) then
											v70 = v78[(11 - 5) - 3];
										else
											v76[v1072 + 3] = v1073;
										end
										break;
									end
									if (v1071 == (1189 - (442 + 747))) then
										v1072 = v78[2];
										v1073 = v76[v1072];
										v1071 = 1136 - (832 + 303);
									end
								end
							end
						elseif ((1512 < 3311) and (v79 <= (980 - (88 + 858)))) then
							if (v79 <= (10 + 21)) then
								if (v79 > (25 + (1188 - (887 + 296)))) then
									local v281 = 0 + 0;
									local v282;
									while true do
										if (v281 == (789 - (766 + 23))) then
											v282 = v78[2];
											v76[v282] = v76[v282]();
											break;
										end
									end
								else
									local v283;
									v76[v78[9 - 7]] = v76[v78[3]][v78[5 - 1]];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[2]] = v59[v78[(1055 - (512 + 533)) - 7]];
									v70 = v70 + ((2498 - (662 + 762)) - (1036 + 37));
									v78 = v66[v70];
									v283 = v78[2 + 0];
									v76[v283](v76[v283 + (1 - 0)]);
									v70 = v70 + 1 + (677 - (334 + 343));
									v78 = v66[v70];
									v76[v78[1482 - (641 + 839)]] = v59[v78[916 - (910 + 3)]];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[2]] = v76[v78[(5652 - 3965) - (1466 + 218)]][v78[4]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									if (v76[v78[2]] or (2268 <= 1742)) then
										v70 = v70 + (1149 - (556 + 592));
									else
										v70 = v78[2 + 1];
									end
								end
							elseif (v79 <= ((1329 - (198 + 291)) - (329 + 479))) then
								local v293 = v78[856 - (174 + 680)];
								local v294 = v76[v78[(1 + 9) - 7]];
								v76[v293 + (1 - 0)] = v294;
								v76[v293] = v294[v78[3 + 1]];
							elseif (v79 > (772 - (396 + 343))) then
								local v1076;
								v76[v78[1 + 1]] = v60[v78[1480 - (29 + 1448)]];
								v70 = v70 + (1390 - (135 + 1254));
								v78 = v66[v70];
								v76[v78[(581 - (141 + 433)) - 5]] = v76[v78[13 - 10]][v78[3 + 1]];
								v70 = v70 + (1528 - (389 + 1138));
								v78 = v66[v70];
								v76[v78[576 - (102 + 472)]] = v78[3 + 0];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v78[3];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[1547 - (320 + 1225)]] = v78[5 - 2];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v1076 = v78[2];
								v76[v1076] = v76[v1076](v13(v76, v1076 + (1465 - (157 + 1307)), v78[3]));
								v70 = v70 + (1860 - (821 + 1038));
								v78 = v66[v70];
								v76[v78[4 - 2]][v78[14 - 11]] = v76[v78[4]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[3 - 1]] = v78[2 + 1];
								v70 = v70 + (2 - (1 + 0));
								v78 = v66[v70];
								v70 = v78[1029 - (834 + 192)];
							else
								local v1095;
								v76[v78[1 + 1]] = v76[v78[1 + 2]][v78[1 + 3]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2 - 0]] = v78[307 - ((1077 - (227 + 550)) + 4)];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[5 - 3]] = v78[365 - (112 + 250)];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[1 + 1]] = v78[3];
								v70 = v70 + ((4 - 2) - 1);
								v78 = v66[v70];
								v1095 = v78[2 + 0];
								v76[v1095] = v76[v1095](v13(v76, v1095 + 1, v78[(5 - 3) + 1]));
							end
						elseif (v79 <= (28 + 9)) then
							if (v79 <= (138 - (72 + 31))) then
								local v298 = 0;
								local v299;
								while true do
									if (v298 == (0 + 0)) then
										v299 = v78[2];
										v76[v299](v76[v299 + 1 + (348 - (89 + 259))]);
										break;
									end
								end
							elseif (v79 > (1450 - (1001 + 413))) then
								if (v76[v78[4 - 2]] < v78[4 + 0]) then
									v70 = v70 + (883 - (244 + 638));
								else
									v70 = v78[696 - (627 + 66)];
								end
							else
								local v1106 = 0 - 0;
								local v1107;
								local v1108;
								local v1109;
								local v1110;
								while true do
									if (v1106 == 1) then
										v71 = (v1109 + v1107) - (603 - (451 + 61 + 90));
										v1110 = 1906 - (1665 + 241);
										v1106 = 1 + 1;
									end
									if (v1106 == ((1478 - 759) - (373 + 344))) then
										for v2456 = v1107, v71 do
											v1110 = v1110 + 1 + 0 + 0;
											v76[v2456] = v1108[v1110];
										end
										break;
									end
									if (v1106 == (0 + 0)) then
										v1107 = v78[5 - 3];
										v1108, v1109 = v69(v76[v1107](v76[v1107 + 1]));
										v1106 = 1 - 0;
									end
								end
							end
						elseif (v79 <= (1137 - (35 + 1064))) then
							local v300;
							local v301;
							local v302;
							v76[v78[2 + (0 - 0)]] = v76[v78[6 - 3]];
							v70 = v70 + 1 + (1403 - (1333 + 70));
							v78 = v66[v70];
							v76[v78[2]] = v78[1239 - (298 + 938)];
							v70 = v70 + (1260 - (233 + 1026));
							v78 = v66[v70];
							v76[v78[1668 - (636 + 1030)]] = #v76[v78[(1834 - (701 + 1131)) + 1]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[1 + 1]] = v78[1 + 2];
							v70 = v70 + (222 - (55 + (293 - (55 + 72))));
							v78 = v66[v70];
							v302 = v78[2];
							v301 = v76[v302];
							v300 = v76[v302 + 2];
							if ((v300 > (0 + 0)) or (2899 > 4676)) then
								if (v301 > v76[v302 + 1 + (156 - (99 + 57))]) then
									v70 = v78[11 - 8];
								else
									v76[v302 + 3] = v301;
								end
							elseif (v301 < v76[v302 + (298 - (36 + 261))]) then
								v70 = v78[4 - 1];
							else
								v76[v302 + (1371 - (34 + 1334))] = v301;
							end
						elseif ((v79 == (15 + 24)) or (4258 <= 2507)) then
							local v1111 = 0;
							local v1112;
							local v1113;
							local v1114;
							local v1115;
							while true do
								if (v1111 == 2) then
									v76[v78[2]] = v78[3 + 0];
									v70 = v70 + (1284 - (1035 + 248));
									v78 = v66[v70];
									v1111 = 24 - (20 + 1);
								end
								if (v1111 == (0 + 0)) then
									v1112 = nil;
									v1113, v1114 = nil;
									v1115 = nil;
									v1111 = 320 - (134 + 185);
								end
								if ((1139 - (549 + 584)) == v1111) then
									v78 = v66[v70];
									v1115 = v78[687 - ((526 - 212) + 194 + 177)];
									v76[v1115] = v76[v1115](v13(v76, v1115 + (3 - 2), v71));
									v1111 = (2554 - (1243 + 336)) - (478 + 490);
								end
								if (v1111 == (1 + 0)) then
									v76[v78[1174 - (786 + 386)]] = v59[v78[3]];
									v70 = v70 + (3 - 2);
									v78 = v66[v70];
									v1111 = 1381 - (1055 + 324);
								end
								if (v1111 == ((2676 - (774 + 555)) - (1093 + 118 + 129))) then
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									if (v76[v78[1 + (800 - (150 + 649))]] or (3506 == 1216)) then
										v70 = v70 + (3 - 2);
									else
										v70 = v78[9 - 6];
									end
									break;
								end
								if (v1111 == 5) then
									v1112 = 0 - 0;
									for v2459 = v1115, v71 do
										v1112 = v1112 + (2 - (1 + 0));
										v76[v2459] = v1113[v1112];
									end
									v70 = v70 + 1;
									v1111 = 3 + 3;
								end
								if (v1111 == 4) then
									v1115 = v78[2];
									v1113, v1114 = v69(v76[v1115](v13(v76, v1115 + (3 - 2), v78[3])));
									v71 = (v1114 + v1115) - (3 - 2);
									v1111 = 4 + 1;
								end
								if (v1111 == (7 - 4)) then
									v76[v78[2]] = v78[691 - (364 + 324)];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v1111 = 4;
								end
							end
						else
							local v1116 = 0 - 0;
							local v1117;
							local v1118;
							local v1119;
							while true do
								if ((v1116 == 0) or (3763 < 682)) then
									v1117 = v67[v78[1 + 2]];
									v1118 = nil;
									v1116 = 1;
								end
								if (v1116 == (8 - 6)) then
									for v2462 = 1 - 0, v78[11 - 7] do
										v70 = v70 + (1269 - (1249 + 19));
										local v2463 = v66[v70];
										if (v2463[1] == (122 + (19 - 6))) then
											v1119[v2462 - (3 - 2)] = {v76,v2463[232 - (73 + 156)]};
										else
											v1119[v2462 - (1 + 0)] = {v59,v2463[3]};
										end
										v75[#v75 + (3 - 2)] = v1119;
									end
									v76[v78[472 - (224 + 246)]] = v29(v1117, v1118, v60);
									break;
								end
								if (v1116 == (1 - 0)) then
									v1119 = {};
									v1118 = v10({}, {__index=function(v2465, v2466)
										local v2467 = v1119[v2466];
										return v2467[1 - 0][v2467[2]];
									end,__newindex=function(v2468, v2469, v2470)
										local v2471 = v1119[v2469];
										v2471[1][v2471[1 + 1]] = v2470;
									end});
									v1116 = 1 + 1;
								end
							end
						end
					elseif (v79 <= (45 + 15)) then
						if (v79 <= (99 - (94 - 45))) then
							if (v79 <= (149 - 104)) then
								if (v79 <= (555 - (203 + 310))) then
									if ((v79 == (2034 - (1238 + 755))) or (4535 <= 850)) then
										local v314;
										local v315, v316;
										local v317;
										v76[v78[1 + 1]] = v59[v78[(3521 - (1122 + 862)) - (709 + 825)]];
										v70 = v70 + (1 - 0);
										v78 = v66[v70];
										v76[v78[2 - 0]] = v78[867 - (196 + 668)];
										v70 = v70 + (3 - 2);
										v78 = v66[v70];
										v76[v78[3 - 1]] = v78[5 - 2];
										v70 = v70 + (834 - (171 + 662));
										v78 = v66[v70];
										v317 = v78[95 - (4 + 89)];
										v315, v316 = v69(v76[v317](v13(v76, v317 + (3 - 2), v78[2 + 1])));
										v71 = (v316 + v317) - ((1 + 3) - (5 - 2));
										v314 = 0;
										for v915 = v317, v71 do
											v314 = v314 + 1 + 0;
											v76[v915] = v315[v314];
										end
										v70 = v70 + (1487 - (22 + 13 + 1451));
										v78 = v66[v70];
										v317 = v78[1455 - (28 + 1425)];
										v76[v317] = v76[v317](v13(v76, v317 + (1994 - (941 + 1052)), v71));
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										if ((2103 >= 1896) and v76[v78[1516 - (822 + 692)]]) then
											v70 = v70 + 1;
										else
											v70 = v78[3 - 0];
										end
									else
										local v328;
										v76[v78[1 + 1]] = v76[v78[300 - (45 + 252)]][v78[4 + 0]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[2]] = v78[2 + 1];
										v70 = v70 + (2 - 1);
										v78 = v66[v70];
										v76[v78[2]] = v78[436 - (114 + 319)];
										v70 = v70 + (1 - 0);
										v78 = v66[v70];
										v76[v78[2]] = v78[3 - 0];
										v70 = v70 + 1;
										v78 = v66[v70];
										v328 = v78[2 + 0];
										v76[v328] = v76[v328](v13(v76, v328 + ((1 + 0) - 0), v78[3]));
										v70 = v70 + (1 - 0);
										v78 = v66[v70];
										if not v76[v78[1965 - (556 + (2150 - (549 + 194)))]] then
											v70 = v70 + 1;
										else
											v70 = v78[1209 - (741 + 465)];
										end
									end
								elseif (v79 <= (508 - (170 + 295))) then
									local v338;
									local v339;
									v339 = v78[2 + 0];
									v338 = v76[v78[3 + 0]];
									v76[v339 + (2 - 1)] = v338;
									v76[v339] = v338[v78[4 + 0]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2 + 0]] = v59[v78[3]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[1232 - (957 + 273)]] = v76[v78[1 + 2]][v78[2 + 2]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[7 - 5]] = v76[v78[7 - 4]][v78[4]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v339 = v78[2];
									v76[v339] = v76[v339](v13(v76, v339 + (2 - 1), v78[14 - 11]));
									v70 = v70 + ((1178 + 603) - (389 + 1391));
									v78 = v66[v70];
									v76[v78[2]] = v59[v78[2 + 1]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[4 - 2]] = v76[v78[(3795 - 2841) - (783 + 168)]][v78[13 - 9]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									if (v76[v78[313 - (309 + 2)]] <= v76[v78[(1 + 11) - 8]]) then
										v70 = v70 + (1213 - (1090 + 122));
									else
										v70 = v78[3];
									end
								elseif ((v79 == (15 + 29)) or (2767 < 2407)) then
									local v1123;
									local v1124;
									local v1125;
									local v1126;
									local v1127;
									local v1128;
									v1128 = v78[2];
									v76[v1128](v76[v1128 + (3 - (2 - 0))]);
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[(955 + 165) - ((2258 - 1630) + 490)]] = v60[v78[(1704 - (453 + 1250)) + 2]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[4 - 2]] = v76[v78[3]][v78[18 - 14]];
									v70 = v70 + (775 - (431 + 343));
									v78 = v66[v70];
									v76[v78[3 - 1]] = v76[v78[8 - 5]];
									v70 = v70 + 1 + (0 - 0);
									v78 = v66[v70];
									v1128 = v78[1 + 1 + 0];
									v76[v1128](v76[v1128 + (1696 - (556 + 1139))]);
									v70 = v70 + 1;
									v78 = v66[v70];
									v1128 = v78[17 - (6 + 9)];
									v1127 = {};
									for v1612 = 1 + 0, #v75 do
										v1126 = v75[v1612];
										for v1966 = 0 + 0, #v1126 do
											v1125 = v1126[v1966];
											v1124 = v1125[170 - (28 + 141)];
											v1123 = v1125[577 - (203 + 372)];
											if ((v1124 == v76) and (v1123 >= v1128)) then
												v1127[v1123] = v1124[v1123];
												v1125[1] = v1127;
											end
										end
									end
									v70 = v70 + 1 + 0 + 0;
									v78 = v66[v70];
									do
										return;
									end
								else
									v76[v78[2 - 0]] = v78[3 + 0] ^ v76[v78[(3846 - 2525) - (486 + 831)]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[5 - 3]] = v76[v78[10 - (1389 - (978 + 404))]] * v76[v78[1 + 3]];
									v70 = v70 + (3 - 2);
									v78 = v66[v70];
									v76[v78[1265 - (668 + (1907 - 1312))]] = v59[v78[3 + 0]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[5 - 3]] = v76[v78[(261 + 32) - (23 + 267)]] % v76[v78[1948 - (1129 + 815)]];
									v70 = v70 + (388 - (371 + 16));
									v78 = v66[v70];
									do
										return v76[v78[(2070 - (56 + 262)) - (1326 + 424)]];
									end
									v70 = v70 + (1 - 0);
									v78 = v66[v70];
									v70 = v78[10 - 7];
								end
							elseif (v79 <= (165 - (36 + 52 + 30))) then
								if (v79 == (160 - (108 + 6))) then
									v76[v78[773 - (720 + 51)]] = v76[v78[6 - 3]] * v78[1780 - (421 + 1355)];
								else
									v76[v78[2 - 0]] = v76[v78[2 + 1]] % v78[3 + 1];
								end
							elseif (v79 <= (1131 - (286 + 797))) then
								v76[v78[7 - 5]] = v76[v78[3]] % v76[v78[(6 + 0) - 2]];
							elseif (v79 > (488 - (397 + 42))) then
								local v1145;
								local v1146, v1147;
								local v1148;
								v76[v78[1 + 1]] = v59[v78[803 - (24 + 776)]];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v76[v78[787 - (222 + (2515 - (653 + 1299)))]] = v78[6 - (3 + 0)];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2 + 0]] = v78[193 - (23 + 167)];
								v70 = v70 + (1799 - (690 + 1108));
								v78 = v66[v70];
								v1148 = v78[2];
								v1146, v1147 = v69(v76[v1148](v13(v76, v1148 + 1 + 0, v78[3 + 0])));
								v71 = (v1147 + v1148) - (849 - (40 + 326 + 482));
								v1145 = 0 + 0;
								for v1614 = v1148, v71 do
									local v1615 = (0 - 0) - 0;
									while true do
										if ((282 < 386) and (v1615 == (0 + 0))) then
											v1145 = v1145 + (1923 - (1042 + 880)) + 0;
											v76[v1614] = v1146[v1145];
											break;
										end
									end
								end
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v1148 = v78[573 - (47 + 524)];
								v76[v1148] = v76[v1148](v13(v76, v1148 + 1 + 0 + 0, v71));
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								if v76[v78[2]] then
									v70 = v70 + ((1003 - (16 + 986)) - 0);
								else
									v70 = v78[6 - (1221 - (700 + 518))];
								end
							else
								local v1159;
								local v1160;
								v76[v78[(5627 - 3899) - (1165 + 561)]] = v59[v78[1 + 2]];
								v70 = v70 + (3 - (2 - 0));
								v78 = v66[v70];
								v76[v78[1 + 1]][v78[482 - (341 + 138)]] = v76[v78[2 + 2]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[3 - 1]] = v59[v78[329 - (89 + 237)]];
								v70 = v70 + (3 - 2);
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[6 - 3]][v78[4]];
								v70 = v70 + (882 - (581 + 300));
								v78 = v66[v70];
								v1160 = v78[1222 - (855 + 365)];
								v1159 = v76[v78[3]];
								v76[v1160 + (2 - 1)] = v1159;
								v76[v1160] = v1159[v78[2 + (1513 - (617 + 894))]];
							end
						elseif ((v79 <= (1290 - (1030 + 205))) or (1651 >= 3921)) then
							if (v79 <= (49 + 3)) then
								if ((1976 == 1976) and (v79 == (48 + 3))) then
									local v360 = 286 - (156 + 130);
									local v361;
									local v362;
									local v363;
									local v364;
									local v365;
									while true do
										if ((4080 >= 780) and (v360 == 14)) then
											v76[v78[4 - (3 - 1)]] = v78[4 - (459 - (271 + 187))];
											v70 = v70 + (1 - 0);
											v78 = v66[v70];
											v365 = v78[1 + 1];
											v76[v365] = v76[v365](v13(v76, v365 + 1 + (1584 - (731 + 853)), v78[3]));
											v70 = v70 + (70 - ((34 - 24) + (1580 - (199 + 1322))));
											v78 = v66[v70];
											v76[v78[1 + 1]] = v76[v78[(27 - 13) - 11]][v78[(607 + 560) - (671 + 492)]];
											v360 = 12 + 3;
										end
										if (v360 == (1219 - (369 + 846))) then
											v76[v78[1 + 1]] = v78[3 + 0];
											v70 = v70 + (1946 - (1036 + 909));
											v78 = v66[v70];
											v76[v78[2 + 0]] = v78[4 - (1661 - (1291 + 369))];
											v70 = v70 + (204 - (11 + 192));
											v78 = v66[v70];
											v365 = v78[2 + 0];
											v363, v364 = v69(v76[v365](v13(v76, v365 + (176 - (135 + 40)), v78[6 - 3])));
											v360 = 4 + 1 + 0;
										end
										if (((6 - 3) == v360) or (1594 <= 492)) then
											v70 = v70 + (1 - 0);
											v78 = v66[v70];
											v76[v78[178 - (50 + 126)]] = v76[v78[3]][v78[11 - 7]];
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[1415 - (1233 + 180)]] = v78[972 - (522 + 447)];
											v70 = v70 + (1422 - (107 + 1314));
											v78 = v66[v70];
											v360 = 2 + 2;
										end
										if ((2549 > 1932) and (v360 == (21 - 14))) then
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[3 - (1 + 0)]] = v78[3];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[7 - 5]] = v78[3];
											v70 = v70 + 1;
											v78 = v66[v70];
											v360 = 6 + 2;
										end
										if (v360 == (1937 - (716 + 1194))) then
											v78 = v66[v70];
											v76[v78[2]] = v60[v78[1 + 0 + 2]];
											v70 = v70 + (686 - (561 + 124)) + 0;
											v78 = v66[v70];
											v365 = v78[505 - (74 + 429)];
											v76[v365] = v76[v365]();
											v70 = v70 + 1;
											v78 = v66[v70];
											v360 = 53 - 25;
										end
										if (v360 == (17 + 17)) then
											v76[v365] = v76[v365](v13(v76, v365 + (2 - 1), v78[3 + 0]));
											v70 = v70 + (2 - 1);
											v78 = v66[v70];
											v76[v78[2]][v76[v78[7 - 4]]] = v78[437 - (279 + 154)];
											break;
										end
										if (v360 == (806 - (454 + 324))) then
											v76[v78[2 + 0]][v78[20 - (12 + 5)]] = v78[3 + 1];
											v70 = v70 + ((2 + 0) - 1);
											v78 = v66[v70];
											v76[v78[1 + 1]] = {};
											v70 = v70 + (1094 - ((1130 - (25 + 828)) + 816));
											v78 = v66[v70];
											v76[v78[8 - 6]] = v76[v78[1186 - (1058 + 125)]];
											v70 = v70 + 1 + 0;
											v360 = 1004 - (815 + (403 - 243));
										end
										if (v360 == ((44 - 19) - 19)) then
											v78 = v66[v70];
											v365 = v78[4 - 2];
											v361 = v76[v78[(591 - (99 + 491)) + 2]];
											v76[v365 + (2 - 1)] = v361;
											v76[v365] = v361[v78[(1950 - (18 + 30)) - (41 + 1857)]];
											v70 = v70 + (1894 - ((2956 - 1734) + 671));
											v78 = v66[v70];
											v76[v78[2]] = v76[v78[7 - (7 - 3)]];
											v360 = 9 - (2 - 0);
										end
										if ((v360 == (1214 - (229 + 953))) or (1357 == 4978)) then
											v76[v365] = v76[v365](v13(v76, v365 + 1, v78[3]));
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[2]][v76[v78[1777 - (1111 + 663)]]] = v78[1583 - (249 + 625 + (2355 - 1650))];
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[2 + 0]] = v76[v78[3]];
											v70 = v70 + 1;
											v360 = 68 - 35;
										end
										if (v360 == ((733 - (501 + 231)) + 21)) then
											v78 = v66[v70];
											v76[v78[681 - (565 + 77 + 37)]] = v60[v78[1 + 2]];
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v365 = v78[2];
											v76[v365] = v76[v365]();
											v70 = v70 + (2 - 1);
											v78 = v66[v70];
											v360 = 23;
										end
										if (v360 == (483 - (233 + 221))) then
											v78 = v66[v70];
											v76[v78[4 - (1700 - (470 + 1228))]] = v78[3 + 0 + 0];
											v70 = v70 + ((999 + 543) - (718 + 823));
											v78 = v66[v70];
											v76[v78[2 + 0]] = v78[808 - (266 + 539)];
											v70 = v70 + (2 - 1);
											v78 = v66[v70];
											v365 = v78[1227 - (636 + 589)];
											v360 = 71 - (727 - (537 + 149));
										end
										if (((10 - 5) == v360) or (465 < 295)) then
											v71 = (v364 + v365) - 1;
											v362 = 0 + 0;
											for v1971 = v365, v71 do
												v362 = v362 + 1 + 0;
												v76[v1971] = v363[v362];
											end
											v70 = v70 + (1 - 0);
											v78 = v66[v70];
											v365 = v78[1017 - (355 + 302 + 358)];
											v76[v365] = v76[v365](v13(v76, v365 + 1, v71));
											v70 = v70 + ((3 - 1) - 1);
											v360 = 13 - 7;
										end
										if (v360 == 15) then
											v70 = v70 + (1188 - (1151 + 36));
											v78 = v66[v70];
											v76[v78[2 + 0]] = v76[v78[1 + 2]][v78[11 - 7]];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[6 - 4]] = v60[v78[3]];
											v70 = v70 + (1833 - (1552 + 280));
											v78 = v66[v70];
											v360 = 850 - ((190 - 126) + 770);
										end
										if ((4572 >= 3652) and ((9 + 3) == v360)) then
											v365 = v78[4 - 2];
											v76[v365] = v76[v365](v13(v76, v365 + 1 + 0, v71));
											v70 = v70 + (1244 - (157 + 1086));
											v78 = v66[v70];
											v365 = v78[3 - 1];
											v361 = v76[v78[13 - 10]];
											v76[v365 + (1 - 0)] = v361;
											v76[v365] = v361[v78[4]];
											v360 = 16 - 3;
										end
										if ((v360 == (830 - (599 + 220))) or (4690 <= 3679)) then
											v78 = v66[v70];
											v365 = v78[3 - 1];
											v363, v364 = v69(v76[v365](v13(v76, v365 + (1932 - (1813 + 118)), v78[3 + 0])));
											v71 = (v364 + v365) - (1218 - (841 + 376));
											v362 = (0 + 0) - 0;
											for v1974 = v365, v71 do
												v362 = v362 + 1;
												v76[v1974] = v363[v362];
											end
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v360 = 32 - 20;
										end
										if ((v360 == (875 - (464 + 395))) or (566 > 3535)) then
											v76[v78[5 - (2 + 1)]] = v76[v78[3]][v78[4]];
											v70 = v70 + 1 + 0 + 0;
											v78 = v66[v70];
											v76[v78[839 - (467 + 161 + 209)]] = v78[5 - 2];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[2 + 0]] = v78[10 - 7];
											v70 = v70 + 1 + 0;
											v360 = 39 - 22;
										end
										if (v360 == ((381 + 140) - (150 + 370))) then
											v70 = v70 + (1283 - (74 + 1208));
											v78 = v66[v70];
											v76[v78[1 + 1]] = v78[3];
											v70 = v70 + 1;
											v78 = v66[v70];
											v365 = v78[2 + 0];
											v76[v365] = v76[v365](v13(v76, v365 + (1 - 0), v78[7 - (2 + 2)]));
											v70 = v70 + 1;
											v360 = 9 - 7;
										end
										if ((4146 > 2099) and (v360 == (7 + 2))) then
											v70 = v70 + (391 - (14 + 376));
											v78 = v66[v70];
											v76[v78[3 - 1]] = v60[v78[2 + 1]];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[2 + 0]] = v76[v78[3 + 0]][v78[11 - 7]];
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v360 = 10;
										end
										if ((v360 == (109 - (23 + 55))) or (858 >= 4349)) then
											v78 = v66[v70];
											v76[v78[4 - 2]] = v78[3 + (579 - (134 + 445))];
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[2 - 0]] = v78[1 + 2];
											v70 = v70 + (902 - (652 + 249));
											v78 = v66[v70];
											v365 = v78[5 - (5 - 2)];
											v360 = 1900 - (708 + 1160);
										end
										if (v360 == (27 - 17)) then
											v76[v78[2]] = v78[5 - 2];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[29 - (10 + 17)]] = v78[1 + 0 + 2];
											v70 = v70 + (1733 - (1400 + 332));
											v78 = v66[v70];
											v76[v78[2]] = v78[5 - 2];
											v70 = v70 + (1909 - (242 + 1666));
											v360 = 5 + 6;
										end
										if ((1937 >= 530) and (v360 == (1 + 1))) then
											v78 = v66[v70];
											v76[v78[2 + 0 + 0]] = v76[v78[943 - (850 + 90)]][v78[6 - 2]];
											v70 = v70 + (3 - 2);
											v78 = v66[v70];
											v76[v78[2]] = v76[v78[1393 - (360 + 1030)]][v78[4 + 0]];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[(265 - (36 + 224)) - 3]] = v60[v78[3 - 0]];
											v360 = 1664 - (909 + 752);
										end
										if (v360 == (1249 - (109 + 1114))) then
											v70 = v70 + 1;
											v78 = v66[v70];
											v365 = v78[3 - 1];
											v76[v365] = v76[v365]();
											v70 = v70 + (1861 - (1033 + 827)) + 0;
											v78 = v66[v70];
											v76[v78[244 - (6 + 236)]][v78[2 + 1]] = v78[4 + 0];
											v70 = v70 + 1;
											v360 = 63 - 36;
										end
										if (v360 == (32 - 13)) then
											v70 = v70 + (1134 - (1076 + 57));
											v78 = v66[v70];
											v76[v78[(1847 - (1002 + 844)) + (1351 - (1126 + 224))]] = v76[v78[692 - (579 + 110)]][v78[1 + 3]];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[2 + 0]] = v60[v78[2 + 1]];
											v70 = v70 + (408 - (34 + 140 + 233));
											v78 = v66[v70];
											v360 = 55 - 35;
										end
										if ((2598 > 1204) and (v360 == (13 - 5))) then
											v365 = v78[2];
											v76[v365] = v76[v365](v13(v76, v365 + 1, v78[2 + 0 + 1]));
											v70 = v70 + (1175 - (663 + 511));
											v78 = v66[v70];
											v76[v78[2 + 0]] = v76[v78[1 + 2]][v78[12 - 8]];
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[(13 - 9) - 2]] = v76[v78[3]][v78[4]];
											v360 = 21 - 12;
										end
										if ((v360 == (0 + 0)) or (3527 <= 1614)) then
											v361 = nil;
											v362 = nil;
											v363, v364 = nil;
											v365 = nil;
											v76[v78[3 - (65 - (48 + 16))]] = v76[v78[3 + 0]];
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[724 - (478 + 244)]] = v78[520 - (440 + 56 + 21)];
											v360 = 1;
										end
										if (v360 == (9 + 9)) then
											for v1977 = v365, v71 do
												v362 = v362 + (3 - 2);
												v76[v1977] = v363[v362];
											end
											v70 = v70 + (1557 - (655 + 901));
											v78 = v66[v70];
											v365 = v78[2];
											v76[v365] = v76[v365](v13(v76, v365 + 1 + 0, v71));
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[2 + 0]] = v76[v78[11 - 8]][v78[1449 - (695 + 750)]];
											v360 = 19;
										end
										if ((68 - 48) == v360) then
											v365 = v78[2 - 0];
											v76[v365] = v76[v365]();
											v70 = v70 + (3 - 2);
											v78 = v66[v70];
											v76[v78[9 - 7]][v78[354 - (285 + 66)]] = v78[8 - 4];
											v70 = v70 + (1311 - (682 + 628));
											v78 = v66[v70];
											v76[v78[2]] = v60[v78[1 + 2]];
											v360 = 21;
										end
										if ((682 <= 1147) and ((324 - (176 + 123)) == v360)) then
											v365 = v78[6 - 4];
											v76[v365] = v76[v365]();
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[2]][v78[3 + 0]] = v78[273 - (239 + 30)];
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[2 + 0]] = v60[v78[3]];
											v360 = 45 - 19;
										end
										if (v360 == (52 - 35)) then
											v78 = v66[v70];
											v76[v78[317 - (306 + 9)]] = v78[(3 + 7) - 7];
											v70 = v70 + 1;
											v78 = v66[v70];
											v365 = v78[1 + 1];
											v363, v364 = v69(v76[v365](v13(v76, v365 + 1, v78[3])));
											v71 = (v364 + v365) - (1 + (1089 - (910 + 179)));
											v362 = 0 + 0;
											v360 = 51 - 33;
										end
										if ((1298 < 2821) and (v360 == 13)) then
											v70 = v70 + (1376 - (1140 + 235));
											v78 = v66[v70];
											v76[v78[(3 - 1) + 0]] = v76[v78[3 + (0 - 0)]];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[2]] = v78[(1380 - (933 + 446)) + 1 + 1];
											v70 = v70 + (53 - (33 + 19));
											v78 = v66[v70];
											v360 = 6 + 8;
										end
										if (v360 == 30) then
											v76[v365] = v76[v365](v13(v76, v365 + (2 - 1), v78[2 + 1]));
											v70 = v70 + (1 - 0);
											v78 = v66[v70];
											v76[v78[(1526 - (248 + 1276)) + 0]][v76[v78[692 - (586 + 103)]]] = v78[1 + 3];
											v70 = v70 + (2 - 1);
											v78 = v66[v70];
											v76[v78[2]] = v76[v78[1491 - (1309 + 179)]];
											v70 = v70 + 1;
											v360 = 55 - 24;
										end
										if ((v360 == (11 + 13)) or (3098 < 1322)) then
											v70 = v70 + (2 - 1);
											v78 = v66[v70];
											v76[v78[2 + 0]][v78[5 - 2]] = v78[(7 + 0) - 3];
											v70 = v70 + (610 - (295 + 314));
											v78 = v66[v70];
											v76[v78[(2 + 2) - 2]] = v60[v78[1965 - (1300 + 662)]];
											v70 = v70 + (3 - 2);
											v78 = v66[v70];
											v360 = 1780 - (1178 + 577);
										end
										if (v360 == 23) then
											v76[v78[2]][v78[3]] = v78[3 + (3 - 2)];
											v70 = v70 + (2 - 1);
											v78 = v66[v70];
											v76[v78[1407 - (851 + 554)]] = v60[v78[9 - 6]];
											v70 = v70 + (1546 - (151 + 1394)) + 0;
											v78 = v66[v70];
											v365 = v78[5 - 3];
											v76[v365] = v76[v365]();
											v360 = 51 - 27;
										end
										if (v360 == (323 - ((1059 - (929 + 15)) + 187))) then
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v365 = v78[2 + 0];
											v76[v365] = v76[v365]();
											v70 = v70 + (3 - 2);
											v78 = v66[v70];
											v76[v78[(3159 - (1173 + 823)) - (160 + 1001)]][v78[3 + 0]] = v78[3 + 1];
											v70 = v70 + 1;
											v360 = 44 - 22;
										end
										if (v360 == (391 - (237 + 121))) then
											v78 = v66[v70];
											v76[v78[899 - (525 + 372)]] = v78[3];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[(4 - 1) - 1]] = v78[3];
											v70 = v70 + (3 - 2);
											v78 = v66[v70];
											v365 = v78[2];
											v360 = 176 - (96 + (1822 - (482 + 1294)));
										end
									end
								else
									v76[v78[2]] = v78[780 - (643 + 134)] * v76[v78[(3 - 1) + 1 + 1]];
								end
							elseif (v79 <= (126 - 73)) then
								local v367;
								v76[v78[2]] = v76[v78[11 - 8]][v78[1310 - (1125 + 181)]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v76[v78[2 + 0]] = -v76[v78[5 - 2]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[3 - 1]] = v78[(444 + 278) - (316 + 403)] ^ v76[v78[4]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2 + 0]] = v76[v78[(12 - 4) - 5]] * v76[v78[2 + 2]];
								v70 = v70 + ((1191 - (626 + 563)) - 1);
								v78 = v66[v70];
								v367 = v78[2 + 0];
								do
									return v76[v367](v13(v76, v367 + 1 + 0, v78[10 - 7]));
								end
								v70 = v70 + 1;
								v78 = v66[v70];
								v367 = v78[9 - 7];
								do
									return v13(v76, v367, v71);
								end
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v70 = v78[1 + 2];
							elseif (v79 > 54) then
								local v1175 = (1250 - (153 + 1097)) - (0 - 0);
								while true do
									if (((1 + 1) == v1175) or (3309 <= 2696)) then
										v76[v78[5 - 3]] = v76[v78[2 + 1]] - v76[v78[4]];
										v70 = v70 + (18 - (12 + 5));
										v78 = v66[v70];
										v1175 = 11 - 8;
									end
									if (v1175 == 4) then
										if (v76[v78[2]] < v76[v78[4]]) then
											v70 = v70 + (1 - 0);
										else
											v70 = v78[6 - (7 - 4)];
										end
										break;
									end
									if (v1175 == 3) then
										v76[v78[4 - 2]] = v76[v78[2 + 1]][v78[4]];
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v1175 = 1977 - (1301 + 355 + 317);
									end
									if (v1175 == (1 + 0)) then
										v76[v78[2 + 0]] = v76[v78[3 + 0 + 0]][v78[4]];
										v70 = v70 + (2 - 1);
										v78 = v66[v70];
										v1175 = 9 - 7;
									end
									if (v1175 == (0 + 0)) then
										v76[v78[356 - (5 + 349)]] = v76[v78[14 - 11]][v78[4]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v1175 = 1272 - (266 + 1005);
									end
								end
							else
								v76[v78[2 + (1157 - (199 + 958))]] = v76[v78[10 - (5 + 2)]] - v76[v78[4 - 0]];
							end
						elseif (v79 <= (1753 - (561 + 1135))) then
							if ((v79 > 56) or (2331 < 1550)) then
								v76[v78[2 - 0]][v78[3]] = v76[v78[12 - 8]];
							else
								local v378;
								v76[v78[2]]();
								v70 = v70 + ((2520 - 1453) - (507 + 559));
								v78 = v66[v70];
								v76[v78[4 - 2]] = v60[v78[9 - 6]];
								v70 = v70 + (389 - (212 + 176));
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[3]][v78[(2091 - 1182) - (250 + 655)]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v76[v78[2 - (1176 - (1169 + 7))]] = v78[4 - (1874 - (751 + 1122))];
								v70 = v70 + (1957 - (1869 + 87));
								v78 = v66[v70];
								v378 = v78[6 - 4];
								v76[v378](v76[v378 + (1902 - (484 + 1417))]);
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v70 = v78[4 - 1];
							end
						elseif (v79 <= (831 - (48 + 725))) then
							if (v76[v78[2 - 0]] < v76[v78[(1 + 9) - 6]]) then
								v70 = v70 + 1;
							else
								v70 = v78[2 + 1];
							end
						elseif (v79 == (157 - 98)) then
							local v1178;
							local v1179, v1180;
							local v1181;
							v76[v78[1 + 1]] = v76[v78[1 + 0 + 2]];
							v70 = v70 + (854 - (152 + 160 + 541));
							v78 = v66[v70];
							v76[v78[1313 - (79 + 351 + (1498 - 617))]] = v78[2 + 1];
							v70 = v70 + (896 - (557 + 338));
							v78 = v66[v70];
							v76[v78[2]] = v78[3];
							v70 = v70 + 1 + (1181 - (589 + 592));
							v78 = v66[v70];
							v1181 = v78[2];
							v1179, v1180 = v69(v76[v1181](v13(v76, v1181 + (1 - 0), v78[8 - 5])));
							v71 = (v1180 + v1181) - (3 - 2);
							v1178 = 0;
							for v1808 = v1181, v71 do
								local v1809 = 0 - 0;
								while true do
									if (v1809 == (0 - 0)) then
										v1178 = v1178 + 1;
										v76[v1808] = v1179[v1178];
										break;
									end
								end
							end
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v1181 = v78[803 - (499 + 302)];
							v76[v1181](v13(v76, v1181 + (25 - (13 + 11)), v71));
						else
							v76[v78[868 - (39 + 827)]] = v76[v78[7 - 4]][v76[v78[8 - 4]]];
						end
					elseif ((3976 >= 3448) and (v79 <= (278 - 208))) then
						if ((v79 <= 65) or (822 > 1767)) then
							if ((1887 >= 1801) and (v79 <= (94 - 32))) then
								if (v79 > (6 + 55)) then
									local v388 = 0 - 0;
									local v389;
									while true do
										if (v388 == 0) then
											v389 = v78[1 + 1];
											do
												return v13(v76, v389, v71);
											end
											break;
										end
									end
								else
									local v390;
									v76[v78[2 - 0]] = v76[v78[107 - (103 + 1 + 0)]];
									v70 = v70 + (555 - (475 + 79));
									v78 = v66[v70];
									v76[v78[4 - 2]] = v78[9 - 6];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2 + 0]] = v78[3];
									v70 = v70 + 1;
									v78 = v66[v70];
									v390 = v78[1505 - (1395 + 108)];
									v76[v390] = v76[v390](v13(v76, v390 + (2 - 1), v78[1 + 2]));
									v70 = v70 + (1205 - ((1267 - (684 + 576)) + 1197));
									v78 = v66[v70];
									v76[v78[1 + 1]][v76[v78[2 + 1]]] = v78[323 - (27 + 292)];
									v70 = v70 + 1;
									v78 = v66[v70];
									for v918 = v78[5 - (2 + 1)], v78[3 - 0] do
										v76[v918] = nil;
									end
								end
							elseif ((v79 <= (264 - 201)) or (41 >= 2333)) then
								local v402 = v78[3 - (2 - 1)];
								local v403 = v76[v402];
								for v920 = v402 + (1 - 0), v78[142 - (43 + 96)] do
									v7(v403, v76[v920]);
								end
							elseif (v79 > (260 - 196)) then
								local v1193;
								local v1194;
								local v1195;
								v1195 = v78[3 - 1];
								v1194 = v76[v78[3 + 0 + 0]];
								v76[v1195 + 1 + 0] = v1194;
								v76[v1195] = v1194[v78[7 - 3]];
								v70 = v70 + 1 + 0 + 0;
								v78 = v66[v70];
								v76[v78[3 - 1]] = v78[3];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[(1 - 0) + 1]] = v60[v78[1754 - (1414 + 337)]];
								v70 = v70 + (1941 - (1642 + 298));
								v78 = v66[v70];
								v76[v78[4 - (2 + 0)]] = v76[v78[8 - 5]][v78[11 - 7]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2 + 0]] = v59[v78[975 - (357 + 615)]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2 + 0]] = v76[v78[1 + 2 + 0]][v78[(3 + 6) - 5]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[4 - (1850 - (230 + 1618))]] = v76[v78[3 + 0 + 0]][v78[1 + 3]];
								v70 = v70 + 1 + 0 + 0;
								v78 = v66[v70];
								v76[v78[1303 - (384 + 917)]] = v76[v78[700 - (128 + 569)]];
								v70 = v70 + ((1479 + 65) - (1407 + 136));
								v78 = v66[v70];
								v1195 = v78[1889 - (687 + 1200)];
								v76[v1195] = v76[v1195](v13(v76, v1195 + (1711 - (556 + 1154)), v78[10 - (210 - (131 + 72))]));
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2]] = {};
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[97 - (9 + 86)]] = v59[v78[424 - (275 + 146)]];
								v70 = v70 + 1 + 0 + 0;
								v78 = v66[v70];
								v76[v78[206 - (144 + 60)]] = v76[v78[67 - (29 + 35)]][v78[17 - (52 - 39)]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v76[v78[8 - 6]][v76[v78[2 + 1]]] = v76[v78[4]];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v76[v78[1014 - (53 + 959)]] = {};
								v70 = v70 + (409 - (312 + 96));
								v78 = v66[v70];
								v76[v78[3 - 1]] = v76[v78[288 - (147 + 43 + 95)]][v78[4]];
								v70 = v70 + ((4333 - 3433) - (813 + 86));
								v78 = v66[v70];
								v76[v78[2 + 0 + 0]] = v76[v78[4 - 1]][v78[4]];
								v70 = v70 + (493 - (18 + 474));
								v78 = v66[v70];
								v1195 = v78[1 + 1];
								v1193 = v76[v1195];
								v1194 = v78[9 - 6];
								for v1811 = 1087 - (860 + 226), v1194 do
									v1193[v1811] = v76[v1195 + v1811];
								end
							elseif ((v78[2] <= v76[v78[307 - (121 + 182)]]) or (4475 <= 4376)) then
								v70 = v70 + 1;
							else
								v70 = v78[3];
							end
						elseif (v79 <= (9 + (1980 - (523 + 1399)))) then
							if ((v79 > ((1257 + 49) - (988 + 252))) or (1058 >= 3606)) then
								local v404 = 0;
								local v405;
								while true do
									if (v404 == 1) then
										v78 = v66[v70];
										v76[v78[1 + 1]] = v59[v78[1 + 2]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v404 = 1972 - (49 + (2325 - (72 + 332)));
									end
									if ((v404 == (892 - ((1199 - (269 + 707)) + (1321 - 654)))) or (476 >= 3389)) then
										v76[v78[2]] = v76[v78[7 - 4]][v78[4]];
										v70 = v70 + (53 - (51 + (131 - (123 + 7))));
										v78 = v66[v70];
										v76[v78[2 - 0]] = v76[v78[6 - (3 + 0)]] - v76[v78[4]];
										v404 = 1128 - (146 + 979);
									end
									if (v404 == 3) then
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										if (v76[v78[607 - (311 + 294)]] < v78[11 - 7]) then
											v70 = v70 + 1 + 0;
										else
											v70 = v78[1446 - (496 + 947)];
										end
										break;
									end
									if (v404 == (1358 - (834 + 399 + 125))) then
										v405 = nil;
										v405 = v78[1 + 1];
										v76[v405] = v76[v405]();
										v70 = v70 + 1 + 0;
										v404 = 1;
									end
								end
							else
								v76[v78[1 + 1]] = v76[v78[1648 - (963 + 682)]] + v78[4 + 0];
							end
						elseif (v79 <= (1572 - (504 + 1000))) then
							local v407;
							local v408;
							v408 = v78[2 + (0 - 0)];
							v76[v408] = v76[v408](v13(v76, v408 + 1 + 0, v78[1 + 2]));
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v408 = v78[2 + 0];
							v407 = v76[v78[3]];
							v76[v408 + 1 + 0] = v407;
							v76[v408] = v407[v78[186 - (156 + 26)]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[2]] = v76[v78[3]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[2 - 0]] = v78[167 - ((373 - 224) + 15)];
							v70 = v70 + ((2049 - (38 + 1050)) - (890 + 70));
							v78 = v66[v70];
							v76[v78[2]] = v78[3];
							v70 = v70 + 1;
							v78 = v66[v70];
							v408 = v78[119 - (39 + 78)];
							v76[v408] = v76[v408](v13(v76, v408 + 1, v78[485 - (14 + 468)]));
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[4 - 2]] = v78[8 - 5] ~= (0 + 0);
						elseif (v79 > (42 + 27)) then
							v76[v78[1 + 1]] = {};
						elseif not v76[v78[1 + 1]] then
							v70 = v70 + 1 + 0;
						else
							v70 = v78[5 - 2];
						end
					elseif ((v79 <= (75 + 0)) or (3877 < 129)) then
						if ((4296 >= 1581) and (v79 <= 72)) then
							if ((v79 > 71) or (2988 < 2450)) then
								local v422 = 0 - 0;
								local v423;
								while true do
									if (v422 == (0 + 0)) then
										v423 = v78[2];
										v76[v423] = v76[v423](v13(v76, v423 + 1, v71));
										break;
									end
								end
							elseif ((v76[v78[53 - (12 + 39)]] < v78[4 + 0]) or (2288 >= 4740)) then
								v70 = v78[9 - 6];
							else
								v70 = v70 + (3 - 2);
							end
						elseif ((v79 <= (22 + 51)) or (90 >= 2339)) then
							local v424;
							local v425;
							v425 = v78[2 + 0];
							v424 = v76[v78[7 - 4]];
							v76[v425 + 1 + 0] = v424;
							v76[v425] = v424[v78[19 - 15]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[1 + 1]] = v76[v78[1713 - (1596 + 114)]];
							v70 = v70 + ((1 + 1) - 1);
							v78 = v66[v70];
							v425 = v78[715 - (164 + 549)];
							v76[v425] = v76[v425](v13(v76, v425 + 1, v78[3]));
							v70 = v70 + ((780 + 659) - (1059 + 379));
							v78 = v66[v70];
							v76[v78[2]] = v76[v78[3 - 0]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v425 = v78[1 + 1];
							v424 = v76[v78[395 - ((968 - (426 + 397)) + 247)]];
							v76[v425 + 1 + 0] = v424;
							v76[v425] = v424[v78[4]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[2]] = v76[v78[(1408 - (751 + 655)) + (1 - 0)]][v78[11 - 7]];
							v70 = v70 + 1 + 0 + 0;
							v78 = v66[v70];
							v425 = v78[2];
							v76[v425] = v76[v425](v13(v76, v425 + 1 + 0, v78[4 - 1]));
							v70 = v70 + (721 - (254 + 466));
							v78 = v66[v70];
							v76[v78[562 - (544 + 16)]] = v76[v78[3]];
							v70 = v70 + ((1247 - (39 + 1206)) - 1);
							v78 = v66[v70];
							v76[v78[630 - (294 + 334)]] = v76[v78[256 - (236 + 17)]][v78[4]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[2 + (0 - 0)]] = v59[v78[10 - 7]];
							v70 = v70 + (4 - 3);
							v78 = v66[v70];
							v76[v78[2]] = v59[v78[2 + 1]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[796 - (413 + (1222 - (566 + 275)))]] = v76[v78[1 + 2]][v78[8 - 4]];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v76[v78[1972 - (582 + 1388)]] = v76[v78[3]][v78[6 - 2]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[366 - (326 + 38)]] = v59[v78[8 - 5]];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v76[v78[622 - (47 + (1508 - (167 + 768)))]] = v76[v78[3]][v78[1 + 1 + 2]];
							v70 = v70 + (4 - 3);
							v78 = v66[v70];
							v76[v78[2 - 0]] = v76[v78[1667 - (1269 + 395)]][v78[496 - (76 + 416)]];
							v70 = v70 + (444 - (319 + 124));
							v78 = v66[v70];
							v76[v78[4 - 2]] = v76[v78[1010 - (564 + 443)]];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v425 = v78[460 - (337 + 121)];
							v76[v425] = v76[v425](v13(v76, v425 + 1, v78[8 - 5]));
							v70 = v70 + (3 - 2);
							v78 = v66[v70];
							v76[v78[1913 - (1261 + 650)]] = v76[v78[3]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[1 + 1]] = v78[3 - 0];
						elseif (v79 > 74) then
							local v1231;
							local v1232;
							v76[v78[1819 - ((1210 - 438) + 1045)]] = v76[v78[1 + 2]][v78[148 - (102 + 42)]];
							v70 = v70 + (1845 - (1524 + 320));
							v78 = v66[v70];
							v1232 = v78[1272 - (1049 + 221)];
							v1231 = v76[v78[159 - (18 + 138)]];
							v76[v1232 + 1] = v1231;
							v76[v1232] = v1231[v78[4]];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v1232 = v78[1104 - (20 + 47 + 1035)];
							v76[v1232](v76[v1232 + (349 - (136 + 212))]);
							v70 = v70 + (4 - 3);
							v78 = v66[v70];
							v76[v78[2 + 0]] = v60[v78[3 + 0 + 0]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1232 = v78[(2188 - 582) - (240 + 1364)];
							v76[v1232] = v76[v1232]();
							v70 = v70 + ((1098 - (8 + 7)) - (1050 + 32));
							v78 = v66[v70];
							v76[v78[7 - 5]] = v59[v78[2 + (1684 - (1510 + 173))]];
							v70 = v70 + (1056 - (331 + (1021 - 297)));
							v78 = v66[v70];
							v76[v78[1 + 1]] = v76[v78[647 - (269 + 375)]][v78[(35 + 694) - (267 + (711 - (30 + 223)))]];
							v70 = v70 + (1257 - (300 + 956)) + 0;
							v78 = v66[v70];
							v76[v78[3 - 1]] = v76[v78[821 - (667 + 151)]] - v76[v78[1501 - (1410 + 87)]];
							v70 = v70 + (1898 - (1504 + (515 - (22 + 100))));
							v78 = v66[v70];
							if ((v78[5 - 3] <= v76[v78[4]]) or (4251 == 3440)) then
								v70 = v70 + (2 - 1);
							else
								v70 = v78[799 - (461 + (738 - 403))];
							end
						else
							local v1250;
							local v1251;
							v1251 = v78[1 + 1];
							v76[v1251] = v76[v1251](v13(v76, v1251 + (1762 - (1730 + (313 - (47 + 235)))), v78[1670 - (728 + 939)]));
							v70 = v70 + (3 - 2);
							v78 = v66[v70];
							v1251 = v78[3 - 1];
							v1250 = v76[v78[3]];
							v76[v1251 + (2 - 1)] = v1250;
							v76[v1251] = v1250[v78[4]];
							v70 = v70 + (1069 - (138 + 930));
							v78 = v66[v70];
							v76[v78[2 + 0]] = v76[v78[3 + 0]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[2 + 0]] = v78[12 - (29 - 20)];
							v70 = v70 + (1767 - (459 + 1307));
							v78 = v66[v70];
							v76[v78[1872 - (474 + 807 + 589)]] = v78[5 - 2];
							v70 = v70 + (487 - (21 + 465)) + 0;
							v78 = v66[v70];
							v1251 = v78[1 + 1];
							v76[v1251] = v76[v1251](v13(v76, v1251 + (2 - 1), v78[1 + 2]));
							v70 = v70 + (3 - 2);
							v78 = v66[v70];
							v76[v78[8 - 6]] = v78[3] ~= (591 - (562 + 20 + 9));
						end
					elseif (v79 <= (67 + 11)) then
						if (v79 <= (1495 - (374 + 699 + 346))) then
							v76[v78[2 + 0]] = v59[v78[9 - 6]];
							v70 = v70 + (639 - (448 + 190));
							v78 = v66[v70];
							v76[v78[1 + 0 + 1]] = v59[v78[3]];
							v70 = v70 + 1 + (0 - 0);
							v78 = v66[v70];
							v76[v78[2 + (1217 - (553 + 664))]] = v76[v78[2 + 1]][v78[15 - 11]];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v76[v78[1496 - ((1385 - (73 + 5)) + 187)]] = v76[v78[11 - 8]] - v78[4];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v76[v78[(1720 - (1128 + 587)) - (11 - 8)]][v78[686 - (232 + 451)]] = v76[v78[4 + 0]];
							v70 = v70 + 1;
							v78 = v66[v70];
							do
								return;
							end
						elseif (v79 > (69 + 8)) then
							local v1265;
							v76[v78[(1256 - (558 + 132)) - (510 + 54)]] = v76[v78[3]][v78[4]];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v76[v78[2]] = v59[v78[39 - (13 + 23)]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[3 - 1]] = v78[3 - 0];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[2]] = v78[4 - 1];
							v70 = v70 + (1089 - (830 + 258));
							v78 = v66[v70];
							v1265 = v78[2];
							v76[v1265] = v76[v1265](v13(v76, v1265 + (3 - 2), v78[3]));
							v70 = v70 + 1 + (0 - 0);
							v78 = v66[v70];
							v76[v78[2]] = v59[v78[3]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v1265 = v78[2];
							v76[v1265] = v76[v1265](v13(v76, v1265 + (1442 - (860 + 581)), v78[3]));
							v70 = v70 + (3 - 2);
							v78 = v66[v70];
							v59[v78[3]] = v76[v78[5 - 3]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[2]] = v59[v78[244 - (237 + 2 + 2)]];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v76[v78[4 - 2]] = v59[v78[5 - 2]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[2]] = v78[2 + 1];
							v70 = v70 + ((3 + 0) - 2);
							v78 = v66[v70];
							v76[v78[2]] = v78[2 + 1];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1265 = v78[2 + 0];
							v76[v1265] = v76[v1265](v13(v76, v1265 + 1, v78[3]));
							v70 = v70 + ((626 + 801) - (85 + 1341));
							v78 = v66[v70];
							v76[v78[3 - 1]][v78[3]] = v76[v78[11 - (6 + 1)]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[374 - (45 + (541 - 214))]] = v78[5 - 2];
							v70 = v70 + (503 - (444 + 58));
							v78 = v66[v70];
							v70 = v78[2 + 1];
						else
							local v1287 = 0 + 0;
							local v1288;
							while true do
								if (v1287 == (2 + 1)) then
									v78 = v66[v70];
									v76[v78[2]] = v76[v78[8 - (2 + 3)]] + v78[1736 - (33 + 31 + 1668)];
									v70 = v70 + (1974 - (1227 + 746));
									v1287 = 775 - (294 + 477);
								end
								if ((v1287 == (27 - (7 + 11))) or (4728 <= 1268)) then
									v70 = v70 + (1 - 0);
									v78 = v66[v70];
									v70 = v78[497 - (415 + 79)];
									break;
								end
								if ((v1287 == (1 + 5)) or (4951 < 2174)) then
									v78 = v66[v70];
									v76[v78[493 - ((321 - 179) + 349)]] = v60[v78[2 + 1]];
									v70 = v70 + (1 - 0);
									v1287 = 4 + 3;
								end
								if (v1287 == (1 + 0)) then
									v78 = v66[v70];
									v76[v78[(9 - 4) - 3]] = v76[v78[1867 - (444 + 1266 + 154)]][v78[322 - (200 + 118)]];
									v70 = v70 + 1 + 0;
									v1287 = 2 - 0;
								end
								if ((1986 <= 2651) and (v1287 == 4)) then
									v78 = v66[v70];
									v76[v78[2 - (0 + 0)]][v78[3 + 0]] = v76[v78[4 + (0 - 0)]];
									v70 = v70 + 1 + 0;
									v1287 = 1 + 4;
								end
								if ((486 < 4456) and (v1287 == ((996 - (97 + 885)) - 7))) then
									v78 = v66[v70];
									v1288 = v78[2];
									v76[v1288] = v76[v1288]();
									v1287 = 8;
								end
								if ((1255 - (171 + 192 + 887)) == v1287) then
									v78 = v66[v70];
									v76[v78[2 - 0]] = v59[v78[14 - 11]];
									v70 = v70 + 1 + 0;
									v1287 = (21 - 8) - (372 - (271 + 94));
								end
								if (v1287 == (2 + 0)) then
									v78 = v66[v70];
									v76[v78[1666 - (674 + 990)]] = v76[v78[1 + 2]] + v78[2 + 2];
									v70 = v70 + (1 - (1603 - (777 + 826)));
									v1287 = 1058 - (507 + 548);
								end
								if (v1287 == (845 - (289 + 548))) then
									v70 = v70 + (1819 - (821 + 997));
									v78 = v66[v70];
									v76[v78[257 - (195 + 60)]][v78[1 + 2]] = v76[v78[2 + 2]];
									v1287 = 9;
								end
								if ((2242 < 3924) and ((1501 - (251 + 1250)) == v1287)) then
									v1288 = nil;
									v76[v78[5 - 3]] = v59[v78[3]];
									v70 = v70 + 1;
									v1287 = 1 + 0;
								end
							end
						end
					elseif (v79 <= (1111 - (809 + 223))) then
						v76[v78[2]] = v76[v78[3]] % v76[v78[5 - 1]];
						v70 = v70 + (2 - 1);
						v78 = v66[v70];
						v76[v78[6 - 4]] = v59[v78[(1358 - (117 + 1238)) + 0]];
						v70 = v70 + 1 + 0;
						v78 = v66[v70];
						v76[v78[(2334 - (686 + 1029)) - (14 + 603)]] = v76[v78[132 - (118 + 11)]] % v76[v78[4]];
						v70 = v70 + 1 + (1356 - (1074 + 282));
						v78 = v66[v70];
						v76[v78[2 + 0]] = v76[v78[8 - 5]];
						v70 = v70 + (950 - (551 + 398));
						v78 = v66[v70];
						v76[v78[2 + 0]] = v78[3];
						v70 = v70 + (1618 - (1359 + 258)) + (0 - 0);
						v78 = v66[v70];
						v76[v78[2 + 0]] = v78[11 - 8];
					elseif ((v79 == (184 - 104)) or (4701 <= 3665)) then
						v76[v78[2]] = {};
						v70 = v70 + 1;
						v78 = v66[v70];
						v60[v78[3]] = v76[v78[1 + 1]];
						v70 = v70 + (3 - 2);
						v78 = v66[v70];
						v76[v78[1 + 1]] = v78[92 - (40 + 49)];
						v70 = v70 + 1;
						v78 = v66[v70];
						v76[v78[7 - 5]] = v78[493 - (99 + (2326 - (1730 + 205)))] ^ v76[v78[4 + 0]];
						v70 = v70 + ((532 - (67 + 461)) - 3);
						v78 = v66[v70];
						v76[v78[2]] = v60[v78[7 - 4]];
					else
						local v1296 = 0 + 0;
						local v1297;
						local v1298;
						local v1299;
						local v1300;
						while true do
							if ((4956 > 856) and (v1296 == (15 - 9))) then
								v78 = v66[v70];
								v1300 = v78[1606 - (1032 + 572)];
								v76[v1300] = v76[v1300](v13(v76, v1300 + (418 - (203 + 214)), v71));
								v1296 = 1824 - (568 + 1249);
							end
							if (v1296 == ((4 - 1) + 0)) then
								v76[v78[2]] = v78[6 - 3];
								v70 = v70 + (3 - 2);
								v78 = v66[v70];
								v1296 = 1310 - (913 + 393);
							end
							if (v1296 == (11 - 7)) then
								v1300 = v78[2 - 0];
								v1298, v1299 = v69(v76[v1300](v13(v76, v1300 + ((627 - 216) - (269 + 141)), v78[6 - (6 - 3)])));
								v71 = (v1299 + v1300) - ((120 + 1862) - (362 + 1619));
								v1296 = 1630 - (950 + 675);
							end
							if ((4337 > 3037) and (v1296 == (629 - (129 + 500)))) then
								v1297 = nil;
								v1298, v1299 = nil;
								v1300 = nil;
								v1296 = 1 + (1711 - (1157 + 554));
							end
							if (v1296 == (1181 - (216 + 963))) then
								v76[v78[1289 - (485 + 802)]] = v78[562 - (432 + 127)];
								v70 = v70 + 1;
								v78 = v66[v70];
								v1296 = 3;
							end
							if (v1296 == 5) then
								v1297 = 1073 - (1065 + 8);
								for v2480 = v1300, v71 do
									local v2481 = 0;
									while true do
										if (v2481 == ((0 - 0) + 0)) then
											v1297 = v1297 + 1;
											v76[v2480] = v1298[v1297];
											break;
										end
									end
								end
								v70 = v70 + (1602 - (635 + 966));
								v1296 = 5 + 1;
							end
							if ((115 < 2690) and (v1296 == (608 - (82 + 525)))) then
								v76[v78[44 - (5 + 34 + 3)]] = v76[v78[7 - 4]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v1296 = 1 + 1;
							end
							if (v1296 == (10 - 3)) then
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								if (v76[v78[3 - 1]] or (1594 >= 4333)) then
									v70 = v70 + (3 - 2);
								else
									v70 = v78[5 - 2];
								end
								break;
							end
						end
					end
				elseif (v79 <= (291 - 169)) then
					if ((v79 <= 101) or (1177 > 3344)) then
						if (v79 <= (66 + 25)) then
							if (v79 <= 86) then
								if (v79 <= (612 - (318 + 211))) then
									if (v79 == 82) then
										if (v78[2] < v76[v78[4]]) then
											v70 = v70 + (4 - 3);
										else
											v70 = v78[3];
										end
									else
										local v483;
										v76[v78[(3617 - 2028) - (963 + (2247 - (948 + 675)))]] = v76[v78[2 + 1]][v78[850 - (518 + 106 + 222)]];
										v70 = v70 + (2 - 1);
										v78 = v66[v70];
										v76[v78[2 - 0]] = v59[v78[320 - (301 + 15 + 1)]];
										v70 = v70 + (2 - 1);
										v78 = v66[v70];
										v76[v78[5 - 3]] = v76[v78[7 - 4]] / v78[4 + 0];
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v76[v78[3 - 1]] = v76[v78[2 + 1]] + v76[v78[1 + 3]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[6 - 4]] = v59[v78[1 + 2]];
										v70 = v70 + (1020 - (829 + (529 - 339)));
										v78 = v66[v70];
										v76[v78[7 - 5]] = v59[v78[3 - 0]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v483 = v78[2 - 0];
										v76[v483] = v76[v483](v13(v76, v483 + (2 - 1), v78[1 + 2]));
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v76[v78[5 - 3]] = v76[v78[3 + (853 - (406 + 447))]];
										v70 = v70 + (614 - (520 + 93));
										v78 = v66[v70];
										v76[v78[278 - (259 + 17)]] = v59[v78[1 + 2]];
										v70 = v70 + (118 - (91 + 26)) + (0 - 0);
										v78 = v66[v70];
										v76[v78[6 - (4 + 0)]] = v60[v78[594 - (396 + 195)]];
										v70 = v70 + (2 - 1);
										v78 = v66[v70];
										v76[v78[(2749 - (968 + 18)) - (440 + 1321)]] = v76[v78[3]][v78[1833 - (1059 + 770)]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[9 - 7]] = v76[v78[3]];
										v70 = v70 + 1 + 0;
										v78 = v66[v70];
										v76[v78[547 - (424 + 121)]] = v76[v78[3]];
										v70 = v70 + 1 + 0 + 0;
										v78 = v66[v70];
										v76[v78[1349 - (641 + 706)]] = v76[v78[2 + 1]];
										v70 = v70 + (441 - (249 + 191));
										v78 = v66[v70];
										v483 = v78[8 - 6];
										v76[v483] = v76[v483](v13(v76, v483 + 1, v78[2 + 1]));
										v70 = v70 + (3 - 2);
										v78 = v66[v70];
										v76[v78[429 - (183 + 244)]][v78[1 + 2]] = v76[v78[734 - (434 + 296)]];
										v70 = v70 + 1;
										v78 = v66[v70];
										v76[v78[5 - 3]] = v78[515 - (169 + 343)];
										v70 = v70 + 1 + (0 - 0);
										v78 = v66[v70];
										v70 = v78[4 - 1];
									end
								elseif ((4481 == 4481) and (v79 <= (351 - (172 + 95)))) then
									local v513 = v78[5 - 3];
									local v514 = {v76[v513](v13(v76, v513 + (2 - 1), v71))};
									local v515 = 0;
									for v921 = v513, v78[1127 - (651 + 472)] do
										v515 = v515 + 1 + 0;
										v76[v921] = v514[v515];
									end
								elseif (v79 == (37 + 48)) then
									v76[v78[(267 - (260 + 5)) - 0]] = v78[3] + v76[v78[487 - (397 + 86)]];
								else
									local v1303 = 876 - (423 + 453);
									local v1304;
									while true do
										if ((1 + 0) == v1303) then
											v76[v78[(2 - 1) + 1]] = -v76[v78[3 + 0]];
											v70 = v70 + 1;
											v78 = v66[v70];
											v76[v78[2 + 0]] = v78[3 + 0] ^ v76[v78[1194 - ((869 - (265 + 554)) + 1140)]];
											v1303 = 2 + 0;
										end
										if (v1303 == (3 + 2)) then
											do
												return v76[v78[1 + 1]];
											end
											break;
										end
										if (((2 - 0) == v1303) or (1779 < 865)) then
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											v76[v78[598 - (157 + 439)]] = v76[v78[4 - 1]] * v76[v78[12 - 8]];
											v70 = v70 + (2 - 1);
											v1303 = 921 - (782 + 136);
										end
										if ((270 <= 2991) and (v1303 == (855 - ((1683 - (1440 + 131)) + 743)))) then
											v1304 = nil;
											v76[v78[1173 - (1026 + 145)]] = v76[v78[3]][v78[1 + 3]];
											v70 = v70 + (719 - (493 + 225));
											v78 = v66[v70];
											v1303 = 3 - 2;
										end
										if (v1303 == (3 + 1)) then
											v78 = v66[v70];
											v76[v78[5 - 3]] = v76[v78[1 + 2]] + v76[v78[4]];
											v70 = v70 + ((5 - 3) - 1);
											v78 = v66[v70];
											v1303 = 2 + 3;
										end
										if (v1303 == ((1399 - (253 + 1142)) - 1)) then
											v78 = v66[v70];
											v1304 = v78[1597 - (210 + 1385)];
											v76[v1304] = v76[v1304](v76[v1304 + (1690 - (1201 + 488))]);
											v70 = v70 + 1 + (253 - (133 + 120));
											v1303 = 4;
										end
									end
								end
							elseif (v79 <= (156 - 68)) then
								if (v79 > (155 - 68)) then
									local v516 = 585 - ((752 - 400) + 233);
									local v517;
									local v518;
									local v519;
									while true do
										if (((1956 - (809 + 1147)) - 0) == v516) then
											v517 = v78[2 + 0];
											v518 = v76[v517];
											v516 = 498 - (178 + 319);
										end
										if (v516 == (2 - 1)) then
											v519 = v78[577 - (489 + 85)];
											for v1983 = 1502 - ((538 - 261) + 667 + 557), v519 do
												v518[v1983] = v76[v517 + v1983];
											end
											break;
										end
									end
								else
									local v520 = 1493 - (663 + 830);
									local v521;
									while true do
										if ((1 + 0) == v520) then
											v78 = v66[v70];
											v76[v78[4 - 2]] = v76[v78[3]];
											v70 = v70 + 1;
											v520 = 877 - ((1731 - (1255 + 15)) + 414);
										end
										if ((v520 == 4) or (1698 < 412)) then
											v70 = v70 + 1 + 0;
											v78 = v66[v70];
											if ((v76[v78[1 + 1]] <= v76[v78[1 + 3]]) or (162 > 4048)) then
												v70 = v70 + 1 + 0;
											else
												v70 = v78[(1795 - (1221 + 321)) - (172 + 78)];
											end
											break;
										end
										if (v520 == 3) then
											v70 = v70 + ((2 - 1) - 0);
											v78 = v66[v70];
											v76[v78[1 + 1]] = v59[v78[3 - 0]];
											v520 = 2 + 2;
										end
										if ((v520 == (0 + 0)) or (2448 <= 1527)) then
											v521 = nil;
											v76[v78[3 - (1 + 0)]] = v76[v78[3 - 0]][v78[2 + 2]];
											v70 = v70 + 1 + 0;
											v520 = (3 - 2) + 0;
										end
										if (v520 == (7 - 5)) then
											v78 = v66[v70];
											v521 = v78[4 - (7 - 5)];
											v76[v521] = v76[v521](v76[v521 + 1 + 0]);
											v520 = 2 + 1 + 0;
										end
									end
								end
							elseif (v79 <= 89) then
								v76[v78[449 - (133 + 314)]] = v78[1 + 2 + 0] ~= (213 - ((415 - 216) + 14));
								v70 = v70 + 1;
							elseif ((1985 <= 3718) and (v79 > (322 - 232))) then
								local v1305 = v78[1551 - (647 + 902)];
								local v1306 = v76[v1305 + ((412 - (204 + 203)) - 3)];
								local v1307 = v76[v1305] + v1306;
								v76[v1305] = v1307;
								if (v1306 > (233 - (85 + 148))) then
									if (v1307 <= v76[v1305 + (1290 - (426 + 863))]) then
										v70 = v78[81 - (48 + 30)];
										v76[v1305 + (13 - 10)] = v1307;
									end
								elseif (v1307 >= v76[v1305 + 1]) then
									v70 = v78[3];
									v76[v1305 + 3] = v1307;
								end
							else
								v76[v78[1656 - (873 + 781)]]();
							end
						elseif ((v79 <= ((59 + 69) - (1996 - (1472 + 492)))) or (3254 < 2695)) then
							if ((v79 <= (251 - 158)) or (1806 >= 3823)) then
								if (v79 > (39 + 53)) then
									v76[v78[7 - 5]] = v76[v78[3 - 0]] % v76[v78[11 - 7]];
									v70 = v70 + (1948 - (414 + 1533));
									v78 = v66[v70];
									v76[v78[2 + 0]] = v59[v78[3]];
									v70 = v70 + (556 - (443 + 112));
									v78 = v66[v70];
									v76[v78[1481 - ((2390 - 1502) + 591)]] = v76[v78[3]] - v78[10 - 6];
									v70 = v70 + 1 + 0 + 0;
									v78 = v66[v70];
									v76[v78[7 - 5]] = v76[v78[3]] - v76[v78[4]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									do
										return v76[v78[2]];
									end
									v70 = v70 + (612 - (258 + 353)) + 0;
									v78 = v66[v70];
									v70 = v78[1 + 2];
								else
									local v529 = (1994 - (1382 + 612)) - 0;
									local v530;
									local v531;
									local v532;
									local v533;
									while true do
										if ((v529 == (0 - (0 + 0))) or (2160 > 3964)) then
											v530 = nil;
											v531, v532 = nil;
											v533 = nil;
											v529 = 1;
										end
										if ((1682 - (6 + 130 + 1542)) == v529) then
											v533 = v78[6 - 4];
											v531, v532 = v69(v76[v533](v13(v76, v533 + 1 + 0, v78[3])));
											v71 = (v532 + v533) - (1 - 0);
											v529 = 4 + 1 + 0;
										end
										if ((489 - (68 + 418)) == v529) then
											v76[v78[4 - (5 - 3)]] = v78[5 - 2];
											v70 = v70 + 1;
											v78 = v66[v70];
											v529 = 4;
										end
										if (v529 == (7 + 0)) then
											v70 = v70 + (1093 - (770 + 322));
											v78 = v66[v70];
											if v76[v78[2]] then
												v70 = v70 + 1 + 0;
											else
												v70 = v78[3];
											end
											break;
										end
										if (v529 == (1 + 1)) then
											v76[v78[1 + 1]] = v78[3 - 0];
											v70 = v70 + ((1 + 0) - 0);
											v78 = v66[v70];
											v529 = 3;
										end
										if (v529 == (2 - 1)) then
											v76[v78[7 - 5]] = v59[v78[(121 - (35 + 84)) + 1]];
											v70 = v70 + (1 - 0);
											v78 = v66[v70];
											v529 = 2;
										end
										if (v529 == 5) then
											v530 = 0;
											for v1986 = v533, v71 do
												v530 = v530 + 1 + 0;
												v76[v1986] = v531[v530];
											end
											v70 = v70 + 1 + (215 - (75 + 140));
											v529 = 6;
										end
										if (v529 == (5 + 1)) then
											v78 = v66[v70];
											v533 = v78[7 - 5];
											v76[v533] = v76[v533](v13(v76, v533 + (1 - 0), v71));
											v529 = 7;
										end
									end
								end
							elseif (v79 <= (32 + 62)) then
								if (v76[v78[9 - 7]] == v78[13 - 9]) then
									v70 = v70 + 1 + 0;
								else
									v70 = v78[3];
								end
							elseif (v79 == (470 - 375)) then
								v76[v78[833 - (762 + 69)]] = v59[v78[9 - 6]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v59[v78[3]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[4 - 2]] = v76[v78[1 + 2]][v78[1 + 3]];
								v70 = v70 + (3 - 2);
								v78 = v66[v70];
								v76[v78[(1806 - (923 + 876)) - 5]] = v76[v78[160 - (8 + 149)]] - v78[1324 - (1199 + 121)];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v76[v78[4 - 2]][v78[3]] = v76[v78[2 + 2]];
								v70 = v70 + ((7 - 4) - 2);
								v78 = v66[v70];
								do
									return;
								end
							else
								v76[v78[4 - 2]] = #v76[v78[3 + 0]];
							end
						elseif ((3781 >= 3416) and (v79 <= (1905 - (518 + 1289)))) then
							if (v79 == (166 - 69)) then
								local v534;
								v76[v78[1 + (813 - (284 + 528))]] = v76[v78[3]][v78[4]];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v76[v78[2 + 0]] = v76[v78[3]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v534 = v78[2];
								v76[v534] = v76[v534](v76[v534 + (470 - (304 + (1184 - (867 + 152))))]);
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2]] = v59[v78[3 + 0]];
								v70 = v70 + (161 - (54 + 106));
								v78 = v66[v70];
								if ((2700 >= 2436) and (v76[v78[1971 - ((2724 - (709 + 397)) + 351)]] <= v76[v78[3 + 1]])) then
									v70 = v70 + (3 - 2);
								else
									v70 = v78[1019 - ((46 - (21 + 15)) + 1006)];
								end
							else
								v76[v78[1 + 1]] = v76[v78[(1 - 0) + 2]] * v76[v78[12 - 8]];
								v70 = v70 + (1034 - (912 + 121));
								v78 = v66[v70];
								v76[v78[1 + 1]] = v59[v78[1292 - (1140 + 149)]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[2 + 1]] % v76[v78[4]];
								v70 = v70 + (1 - (0 - 0));
								v78 = v66[v70];
								do
									return v76[v78[1 + 1]];
								end
								v70 = v70 + (3 - (1 + 1));
								v78 = v66[v70];
								v70 = v78[5 - (5 - 3)];
							end
						elseif (v79 <= ((44 - 26) + 36 + 45)) then
							local v549 = 0 - 0;
							local v550;
							while true do
								if ((v549 == (189 - (165 + 21))) or (2875 > 4175)) then
									v70 = v70 + (112 - (61 + 50));
									v78 = v66[v70];
									v76[v78[1 + 1]] = v78[14 - 11];
									v70 = v70 + (1 - 0);
									v549 = 2 + 2;
								end
								if ((v549 == (1461 - (1295 + 165))) or (1430 > 2134)) then
									v550 = v78[137 - (97 + 38)];
									v76[v550] = v76[v550](v13(v76, v550 + 1, v78[1 + 2]));
									v70 = v70 + 1;
									v78 = v66[v70];
									v549 = 1 + 1;
								end
								if ((v549 == (1397 - (819 + 578))) or (2552 > 3817)) then
									v550 = nil;
									v76[v78[1404 - (331 + 1071)]] = v78[746 - (588 + 155)];
									v70 = v70 + (1283 - (546 + 736));
									v78 = v66[v70];
									v549 = 1938 - (1834 + 103);
								end
								if ((4 + 2) == v549) then
									v76[v78[(85 - (52 + 28)) - 3]] = v60[v78[1769 - (1536 + 230)]];
									v70 = v70 + (492 - (128 + 363));
									v78 = v66[v70];
									v550 = v78[1 + 1 + 0];
									v549 = 17 - (859 - (59 + 790));
								end
								if (v549 == 7) then
									v76[v550] = v76[v550]();
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2 - 0]][v76[v78[8 - 5]]] = v76[v78[9 - 5]];
									break;
								end
								if ((v549 == (3 + 0 + 1)) or (3983 == 4367)) then
									v78 = v66[v70];
									v76[v78[1011 - (615 + 394)]] = v78[1 + 2 + 0];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v549 = 15 - 10;
								end
								if ((4072 > 339) and ((8 - 6) == v549)) then
									v76[v78[653 - ((999 - (467 + 473)) + 592)]][v76[v78[6 - 3]]] = v78[7 - 3];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[173 - (70 + (501 - 400))]] = v76[v78[3]];
									v549 = 7 - 4;
								end
								if (v549 == (4 + 1)) then
									v550 = v78[4 - 2];
									v76[v550] = v76[v550](v13(v76, v550 + (242 - (123 + 118)), v78[1 + 2]));
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v549 = 1405 - (653 + 746);
								end
							end
						elseif ((2861 == 2861) and (v79 > (187 - 87))) then
							local v1322;
							local v1323, v1324;
							local v1325;
							local v1326;
							v1326 = v78[2];
							v1325 = v76[v78[4 - 1]];
							v76[v1326 + (2 - 1)] = v1325;
							v76[v1326] = v1325[v78[2 + 2]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[2 + 0]] = v76[v78[1 + 2]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[4 - 2]] = v78[3 + 0];
							v70 = v70 + (1 - (0 - 0));
							v78 = v66[v70];
							v76[v78[1236 - (885 + 349)]] = v78[(7 - 4) + (0 - 0)];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1326 = v78[2];
							v1323, v1324 = v69(v76[v1326](v13(v76, v1326 + (2 - 1), v78[8 - 5])));
							v71 = (v1324 + v1326) - 1;
							v1322 = 968 - (915 + 53);
							for v1883 = v1326, v71 do
								v1322 = v1322 + (802 - (768 + 33));
								v76[v1883] = v1323[v1322];
							end
							v70 = v70 + ((2 + 1) - (4 - 2));
							v78 = v66[v70];
							v1326 = v78[2 - 0];
							v76[v1326] = v76[v1326](v13(v76, v1326 + 1, v71));
							v70 = v70 + (329 - ((1147 - 860) + 41));
							v78 = v66[v70];
							if v76[v78[849 - (638 + 209)]] then
								v70 = v70 + 1 + 0;
							else
								v70 = v78[1689 - (96 + (2697 - 1107))];
							end
						else
							local v1340;
							local v1341, v1342;
							local v1343;
							local v1344;
							v1344 = v78[1674 - (741 + 931)];
							v1343 = v76[v78[1 + 2]];
							v76[v1344 + 1 + 0] = v1343;
							v76[v1344] = v1343[v78[11 - 7]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[9 - 7]] = v59[v78[2 + 1]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[1 + 1]] = v78[11 - 8];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[2]] = v78[3];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1344 = v78[1 + 1];
							v1341, v1342 = v69(v76[v1344](v13(v76, v1344 + (4 - 3), v78[3])));
							v71 = (v1342 + v1344) - (1 + 0);
							v1340 = 0;
							for v1886 = v1344, v71 do
								v1340 = v1340 + 1;
								v76[v1886] = v1341[v1340];
							end
							v70 = v70 + (495 - (64 + 430));
							v78 = v66[v70];
							v1344 = v78[2 + 0 + 0];
							v76[v1344] = v76[v1344](v13(v76, v1344 + (364 - (106 + 257)), v71));
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[2]] = v76[v78[2 + 1 + (237 - (58 + 179))]][v78[725 - (496 + 225)]];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							if v76[v78[9 - 7]] then
								v70 = v70 + (1659 - (256 + (3423 - 2021)));
							else
								v70 = v78[3];
							end
						end
					elseif (v79 <= (2010 - (30 + 1869))) then
						if (v79 <= (1475 - ((1466 - (677 + 576)) + 1156))) then
							if (v79 <= (291 - (96 + 92))) then
								if (v79 > (18 + 84)) then
									local v551 = v78[901 - (142 + 757)];
									local v552 = {};
									for v924 = 1 + 0, #v75 do
										local v925 = v75[v924];
										for v1360 = 0 + 0, #v925 do
											local v1361 = v925[v1360];
											local v1362 = v1361[1];
											local v1363 = v1361[81 - (32 + 47)];
											if ((v1362 == v76) and (v1363 >= v551)) then
												v552[v1363] = v1362[v1363];
												v1361[1] = v552;
											end
										end
									end
								else
									v76[v78[1979 - (454 + 599 + 924)]] = v59[v78[3]];
								end
							elseif (v79 <= (102 + 2)) then
								local v555;
								local v556;
								v76[v78[2]] = v76[v78[(8 - 4) - 1]][v78[1652 - (685 + 963)]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[(225 - (88 + 132)) - 2]][v78[6 - (2 + 0)]];
								v70 = v70 + (1710 - (541 + 1168));
								v78 = v66[v70];
								v76[v78[2]] = v59[v78[(7956 - 6356) - (645 + 952)]];
								v70 = v70 + (839 - (669 + 169));
								v78 = v66[v70];
								v76[v78[6 - 4]] = v76[v78[(20 - 14) - (294 - (12 + 279))]][v78[2 + 2]];
								v70 = v70 + (1 - 0) + 0;
								v78 = v66[v70];
								v76[v78[767 - (181 + 71 + 513)]] = v76[v78[3]][v78[4]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[1397 - (665 + 730)]] = v76[v78[8 - 5]] - v76[v78[7 - 3]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[949 - (652 + 295)]] = v76[v78[1353 - (540 + 810)]][v78[15 - (1 + 10)]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v76[v78[2]] = v59[v78[3]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v556 = v78[2 + 0];
								v555 = v76[v78[206 - ((1155 - (848 + 141)) + 37)]];
								v76[v556 + (1882 - (22 + 1859))] = v555;
								v76[v556] = v555[v78[1776 - ((1583 - (372 + 368)) + 929)]];
								v70 = v70 + (263 - (30 + 232));
								v78 = v66[v70];
								v76[v78[5 - 3]] = v76[v78[780 - (55 + 722)]];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v556 = v78[1677 - (78 + 1597)];
								v76[v556] = v76[v556](v13(v76, v556 + 1 + 0, v78[3]));
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2 + 0]] = v76[v78[552 - (305 + 244)]] - v78[4 + 0];
								v70 = v70 + ((62 + 44) - (95 + 10));
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[3 + 0]] * v76[v78[12 - 8]];
								v70 = v70 + ((1131 - (542 + 588)) - 0);
								v78 = v66[v70];
								v76[v78[764 - (592 + 170)]] = v76[v78[3]] + v76[v78[13 - (827 - (6 + 812))]];
							elseif (v79 > 105) then
								local v1364;
								local v1365;
								v76[v78[4 - 2]] = v76[v78[2 + 1]][v78[2 + 2]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v76[v78[1 + 1]] = v76[v78[5 - 2]][v78[511 - (353 + 154)]];
								v70 = v70 + (1 - (1705 - (1599 + 106)));
								v78 = v66[v70];
								v76[v78[2]] = v59[v78[3 - 0]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2 + 0]] = v78[3 + 0];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v78[3 - 0];
								v70 = v70 + 1;
								v78 = v66[v70];
								v1365 = v78[5 - 3];
								v76[v1365] = v76[v1365](v13(v76, v1365 + (1 - 0), v78[6 - 3]));
								v70 = v70 + (87 - (7 + 79));
								v78 = v66[v70];
								v76[v78[1 + 1]] = v76[v78[184 - (24 + 76 + 81)]][v76[v78[4]]];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v1365 = v78[2];
								v1364 = v76[v78[3]];
								v76[v1365 + (2 - 1)] = v1364;
								v76[v1365] = v1364[v78[2 + 1 + 1]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v1365 = v78[2];
								v76[v1365] = v76[v1365](v76[v1365 + (381 - (262 + (447 - 329)))]);
								v70 = v70 + (1084 - (1038 + 45));
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[5 - 2]] / v78[234 - (19 + 211)];
								v70 = v70 + (114 - (88 + 25));
								v78 = v66[v70];
								v76[v78[4 - 2]] = v59[v78[2 + 1]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[1038 - (1007 + 29)]] = v76[v78[1 + (2 - 0)]][v78[9 - 5]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v1365 = v78[(2 + 7) - 7];
								v76[v1365] = v76[v1365]();
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[3]];
								v70 = v70 + (812 - (27 + 313 + 471));
								v78 = v66[v70];
								if ((4891 > 2414) and not v76[v78[4 - 2]]) then
									v70 = v70 + (590 - (276 + 313));
								else
									v70 = v78[3];
								end
							else
								v76[v78[4 - 2]][v78[3 + 0 + 0]] = v78[2 + 2];
							end
						elseif ((v79 <= (11 + 97)) or (1206 <= 627)) then
							if (v79 > (2079 - (495 + 1477))) then
								v76[v78[5 - 3]] = v78[1 + 2] ^ v76[v78[3 + 1]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[405 - (342 + 61)]] = v76[v78[2 + 1]] * v76[v78[169 - (4 + 161)]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v59[v78[9 - 6]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v76[v78[499 - (322 + 175)]] = v76[v78[566 - (173 + 390)]] % v76[v78[1 + 3]];
								v70 = v70 + (315 - (203 + 111));
								v78 = v66[v70];
								do
									return v76[v78[1 + 1]];
								end
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v70 = v78[8 - 5];
							else
								v76[v78[2 + 0]] = v60[v78[709 - (57 + 649)]];
								v70 = v70 + (385 - (328 + 56));
								v78 = v66[v70];
								v76[v78[1 + 1]] = v76[v78[515 - (433 + 79)]][v78[1 + 0 + 3]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[(3 + 6) - 6]][v78[18 - 14]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]][v78[3]] = v76[v78[4 + 0]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2]] = v78[3];
								v70 = v70 + 1;
								v78 = v66[v70];
								v70 = v78[1039 - (562 + 474)];
							end
						elseif ((1629 == 1629) and (v79 <= (253 - 144))) then
							local v598 = v78[3 - 1];
							local v599, v600 = v69(v76[v598](v13(v76, v598 + (906 - (76 + 829)), v71)));
							v71 = (v600 + v598) - (1674 - (1506 + 167));
							local v601 = 0 - 0;
							for v926 = v598, v71 do
								local v927 = 266 - (58 + (2137 - (1690 + 239)));
								while true do
									if ((1804 <= 1830) and (v927 == (0 + 0))) then
										v601 = v601 + 1 + 0;
										v76[v926] = v599[v601];
										break;
									end
								end
							end
						elseif (v79 > (64 + 46)) then
							local v1389;
							v76[v78[7 - 5]] = v76[v78[340 - (258 + 79)]][v78[1 + (10 - 7)]];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v76[v78[1472 - (1219 + 251)]] = v59[v78[1674 - (1231 + 440)]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[2]] = v76[v78[61 - (34 + 24)]][v78[3 + 1]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1389 = v78[2];
							v76[v1389](v76[v1389 + (1 - (0 + 0))]);
							v70 = v70 + 1 + (0 - 0);
							v78 = v66[v70];
							v76[v78[5 - 3]] = v59[v78[9 - 6]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[5 - 3]] = v76[v78[9 - 6]][v78[9 - 5]];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v76[v78[1591 - (877 + 712)]] = v78[3];
						elseif (v78[2 + 0] < v76[v78[758 - (242 + 512)]]) then
							v70 = v78[6 - 3];
						else
							v70 = v70 + 1;
						end
					elseif ((v79 <= 116) or (1499 == 4625)) then
						if (v79 <= (740 - (92 + 535))) then
							if (v79 == (61 + 28 + 23)) then
								local v602;
								local v603, v604;
								local v605;
								v76[v78[3 - 1]] = v76[v78[1 + 2]][v78[14 - 10]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[(7 - 5) + 0]] = v59[v78[1 + 2]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[3 - 1]] = v78[4 - 1];
								v70 = v70 + (1786 - (1476 + 309));
								v78 = v66[v70];
								v76[v78[2]] = v78[1287 - (299 + 985)];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v605 = v78[6 - 4];
								v603, v604 = v69(v76[v605](v13(v76, v605 + (1869 - (1736 + 132)), v78[96 - (86 + 7)])));
								v71 = (v604 + v605) - (4 - 3);
								v602 = 0 + 0;
								for v928 = v605, v71 do
									local v929 = 0;
									while true do
										if (v929 == (880 - (672 + 208))) then
											v602 = v602 + 1;
											v76[v928] = v603[v602];
											break;
										end
									end
								end
								v70 = v70 + 1;
								v78 = v66[v70];
								v605 = v78[1 + 1];
								v76[v605] = v76[v605](v13(v76, v605 + 1, v71));
								v70 = v70 + (133 - (14 + 118));
								v78 = v66[v70];
								v59[v78[448 - (181 + 158 + 106)]] = v76[v78[2 + 0]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[1397 - (440 + 955)]] = v78[3 + 0];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v70 = v78[1 + 2];
							else
								local v622;
								local v623;
								v76[v78[2]] = v76[v78[7 - 4]][v78[3 + 1]];
								v70 = v70 + (354 - (260 + 93));
								v78 = v66[v70];
								v76[v78[2 + 0]] = v76[v78[6 - 3]][v78[4]];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v76[v78[1976 - ((3877 - 2696) + 793)]] = v59[v78[(4 - 3) + 2]];
								v70 = v70 + (308 - (105 + 202));
								v78 = v66[v70];
								v76[v78[2 + 0]] = v76[v78[3]][v78[814 - (352 + 458)]];
								v70 = v70 + (3 - (1 + 1));
								v78 = v66[v70];
								v76[v78[(36 - (27 + 5)) - 2]] = v76[v78[3 + 0]][v78[11 - 7]];
								v70 = v70 + ((123 + 827) - (438 + 511));
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[1386 - (1262 + 121)]] - v76[v78[1072 - (728 + 340)]];
								v70 = v70 + (1791 - (816 + 974));
								v78 = v66[v70];
								v76[v78[(4 + 1) - 3]] = v76[v78[10 - 7]][v78[343 - (163 + 176)]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v76[v78[2]] = v59[v78[13 - 10]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v623 = v78[1 + 1];
								v622 = v76[v78[1813 - (1564 + 246)]];
								v76[v623 + ((130 + 216) - (124 + 63 + 158))] = v622;
								v76[v623] = v622[v78[3 + 1]];
								v70 = v70 + (452 - (115 + 336));
								v78 = v66[v70];
								v76[v78[3 - 1]] = v76[v78[1 + 2]];
								v70 = v70 + (47 - (45 + 1));
								v78 = v66[v70];
								v623 = v78[2];
								v76[v623] = v76[v623](v13(v76, v623 + 1 + 0, v78[1993 - (927 + 355 + 708)]));
								v70 = v70 + (1213 - (583 + 629));
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[1 + 2]] - v78[10 - 6];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[1172 - (943 + 227)]] = v76[v78[2 + (1118 - (771 + 346))]] * v76[v78[1635 - (1539 + 92)]];
								v70 = v70 + (1947 - (706 + 1240));
								v78 = v66[v70];
								v76[v78[260 - (81 + 177)]] = v76[v78[3]] + v76[v78[10 - 6]];
							end
						elseif ((v79 <= 114) or (4388 < 833)) then
							local v647 = (1891 - (1577 + 57)) - ((370 - 158) + 45);
							while true do
								if (v647 == ((1083 - (684 + 396)) - 2)) then
									v76[v78[1948 - (708 + 1238)]] = v59[v78[1 + 2]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v647 = 1 + 1;
								end
								if (v647 == (1671 - (586 + 1081))) then
									v76[v78[513 - ((1024 - 676) + 163)]] = v78[3 + 0];
									break;
								end
								if (v647 == (283 - (215 + 65))) then
									v76[v78[4 - 2]] = v76[v78[1862 - (1541 + 318)]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v647 = 4;
								end
								if ((1230 < 2468) and (v647 == (0 + 0))) then
									v76[v78[2]] = v76[v78[3 + 0]] % v76[v78[4]];
									v70 = v70 + (1751 - (1036 + 714));
									v78 = v66[v70];
									v647 = 1 + 0;
								end
								if ((2 + 0) == v647) then
									v76[v78[2]] = v76[v78[1199 - (700 + 496)]] % v76[v78[1284 - (883 + 397)]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v647 = 593 - (563 + 27);
								end
							end
						elseif (v79 == 115) then
							if v76[v78[7 - 5]] then
								v70 = v70 + (1987 - (1369 + 617));
							else
								v70 = v78[1490 - (85 + 1402)];
							end
						else
							local v1403 = 0 + 0 + 0;
							local v1404;
							while true do
								if ((3332 == 3332) and (v1403 == 2)) then
									v76[v1404] = v76[v1404](v76[v1404 + ((254 - (65 + 187)) - 1)]);
									v70 = v70 + (404 - (274 + (1068 - (827 + 112))));
									v78 = v66[v70];
									v76[v78[2]] = v59[v78[(154 + 66) - (12 + 205)]];
									v1403 = (7 - 4) + 0;
								end
								if ((0 - 0) == v1403) then
									v1404 = nil;
									v76[v78[2 + 0]] = v76[v78[387 - (27 + 357)]][v78[484 - (91 + 389)]];
									v70 = v70 + (298 - (90 + 207));
									v78 = v66[v70];
									v1403 = 1 + (0 - 0);
								end
								if ((v1403 == (862 - (706 + 155))) or (3223 > 4574)) then
									v76[v78[1797 - (730 + 1065)]] = v76[v78[1566 - (1339 + (1077 - 853))]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v1404 = v78[2 + 0];
									v1403 = 2 - 0;
								end
								if (v1403 == (846 - (56 + 212 + 575))) then
									v70 = v70 + (1295 - (919 + 52 + 323));
									v78 = v66[v70];
									if (v76[v78[5 - 3]] <= v76[v78[975 - (180 + 791)]]) then
										v70 = v70 + (1806 - (323 + 1482));
									else
										v70 = v78[3];
									end
									break;
								end
							end
						end
					elseif ((787 == 787) and (v79 <= 119)) then
						if (v79 <= (2035 - (1177 + 741))) then
							v76[v78[1 + 1]][v76[v78[3]]] = v76[v78[(1210 - (551 + 645)) - 10]];
						elseif (v79 > (46 + 72)) then
							v76[v78[(346 - (166 + 177)) - 1]] = v60[v78[3]];
						else
							v76[v78[1 + 1]] = v76[v78[112 - (96 + 13)]][v78[1925 - (962 + (2815 - (1361 + 495)))]];
						end
					elseif (v79 <= 120) then
						local v650 = 0 - (0 - 0);
						local v651;
						local v652;
						local v653;
						local v654;
						while true do
							if ((1 + 4) == v650) then
								v76[v654] = v76[v654](v13(v76, v654 + (1352 - (461 + 890)), v71));
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								if v76[v78[7 - 5]] then
									v70 = v70 + 1;
								else
									v70 = v78[3];
								end
								break;
							end
							if (v650 == (247 - (19 + 224))) then
								for v2001 = v654, v71 do
									v651 = v651 + 1 + 0 + 0;
									v76[v2001] = v652[v651];
								end
								v70 = v70 + (199 - ((82 - 45) + 161));
								v78 = v66[v70];
								v654 = v78[2];
								v650 = 2 + 0 + 3;
							end
							if (v650 == 3) then
								v654 = v78[1 + 1];
								v652, v653 = v69(v76[v654](v13(v76, v654 + 1 + 0, v78[3])));
								v71 = (v653 + v654) - (62 - (60 + 1));
								v651 = 923 - (826 + 97);
								v650 = 4 + (224 - (148 + 76));
							end
							if (v650 == (0 - 0)) then
								v651 = nil;
								v652, v653 = nil;
								v654 = nil;
								v76[v78[3 - 1]] = v76[v78[688 - (375 + 310)]];
								v650 = 2000 - (1864 + 135);
							end
							if ((v650 == (4 - 2)) or (3035 < 1416)) then
								v78 = v66[v70];
								v76[v78[1 + 1]] = v78[2 + 1];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v650 = 3;
							end
							if (v650 == 1) then
								v70 = v70 + (1132 - (314 + (3054 - 2237)));
								v78 = v66[v70];
								v76[v78[2]] = v78[2 + 1];
								v70 = v70 + 1;
								v650 = 216 - (32 + 182);
							end
						end
					elseif ((1581 <= 3596) and (v79 > (90 + 31))) then
						for v1914 = v78[6 - (10 - 6)], v78[3] do
							v76[v1914] = nil;
						end
					else
						v76[v78[67 - (39 + 26)]] = v78[147 - (54 + 90)];
					end
				elseif (v79 <= (340 - (45 + 153))) then
					if (v79 <= (81 + 51)) then
						if (v79 <= 127) then
							if ((1725 < 4991) and (v79 <= 124)) then
								if ((v79 > 123) or (661 > 678)) then
									local v655;
									v76[v78[554 - (457 + 95)]] = v76[v78[3 + 0]][v78[7 - 3]];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v76[v78[(5 + 2) - 5]] = v76[v78[2 + 1]][v78[13 - 9]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[5 - 3]] = v60[v78[751 - (485 + 263)]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v655 = v78[709 - ((2317 - (735 + 1007)) + 132)];
									v76[v655] = v76[v655]();
									v70 = v70 + (862 - (750 + 111));
									v78 = v66[v70];
									v76[v78[2]] = v76[v78[(1292 - (111 + 168)) - (445 + 565)]][v78[4 + 0]];
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									if v76[v78[2 + 0]] then
										v70 = v70 + (1 - (0 + 0));
									else
										v70 = v78[2 + (1 - 0)];
									end
								else
									v76[v78[2]] = v59[v78[3]];
									v70 = v70 + (311 - (4 + 185 + 121));
									v78 = v66[v70];
									v76[v78[2]] = v76[v78[1 + 2]][v78[4 + 0]];
									v70 = v70 + (1348 - (634 + 713));
									v78 = v66[v70];
									v76[v78[540 - (493 + 45)]] = v76[v78[971 - (493 + 475)]][v78[2 + 2]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[786 - (158 + 626)]] = v76[v78[2 + 1]][v78[4]];
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[2]] = v78[3];
									v70 = v70 + (1 - 0);
									v78 = v66[v70];
									v70 = v78[1 + 2];
								end
							elseif ((v79 <= (7 + 118)) or (1341 >= 1883)) then
								v76[v78[2]] = v76[v78[3]] + v76[v78[1095 - (44 + 991 + 56)]];
							elseif ((v79 > (1085 - (114 + (3600 - 2755)))) or (3587 <= 3491)) then
								local v1412 = 0 + 0;
								local v1413;
								while true do
									if (v1412 == (0 - 0)) then
										v1413 = v78[2 + 0];
										do
											return v13(v76, v1413, v1413 + v78[1052 - (179 + 463 + 407)]);
										end
										break;
									end
								end
							else
								v76[v78[2 - 0]] = v60[v78[881 - (827 + 51)]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v76[v78[2 + 0]] = v76[v78[3]][v78[477 - (95 + 378)]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2 - 0]] = v60[v78[3 + 0]];
								v70 = v70 + (1012 - (334 + (1609 - (147 + 785))));
								v78 = v66[v70];
								v76[v78[668 - (483 + 183)]] = v76[v78[3]][v78[14 - (29 - 19)]];
								v70 = v70 + (1057 - (1049 + 6 + 1));
								v78 = v66[v70];
								v76[v78[2]] = v60[v78[(1924 - (1790 + 121)) - 10]];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v76[v78[1 + (3 - 2)]] = v76[v78[7 - 4]][v78[4]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2]] = v60[v78[5 - 2]];
								v70 = v70 + 1;
								v78 = v66[v70];
								if not v76[v78[2]] then
									v70 = v70 + (1540 - (259 + 1280)) + (1584 - (160 + 1424));
								else
									v70 = v78[3];
								end
							end
						elseif ((v79 <= (1549 - (929 + 75 + 133 + 283))) or (1177 == 1743)) then
							if ((v79 > (2085 - (1621 + 336))) or (443 >= 2145)) then
								local v678;
								v76[v78[1941 - ((1107 - (479 + 291)) + 1602)]] = v60[v78[3]];
								v70 = v70 + (1518 - (1014 + 503));
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[1018 - (446 + 569)]][v78[1 + 3]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v76[v78[1 + 1]] = v59[v78[5 - 2]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[507 - ((422 - 199) + 282)]] = v59[v78[(972 - (569 + 402)) + 2]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2]] = v59[v78[(1309 - (635 + 670)) - 1]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v678 = v78[2 - 0];
								v76[v678] = v76[v678](v13(v76, v678 + (671 - (623 + 47)), v78[3]));
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[47 - (32 + 13)]][v78[3]] = v76[v78[4]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2 + 0]] = v59[v78[3]];
								v70 = v70 + (1802 - (1070 + 731));
								v78 = v66[v70];
								v76[v78[2 + 0]][v78[(3469 - 2062) - (1257 + 147)]] = v78[2 + 2];
								v70 = v70 + ((3 - 2) - 0);
								v78 = v66[v70];
								v76[v78[2]] = v78[136 - (98 + 35)];
							else
								local v698;
								v76[v78[1 + 1]] = v76[v78[10 - 7]] % v78[(611 - (42 + 556)) - 9];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[(1403 - (1246 + 155)) + 0]] = v76[v78[2 + 1]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[(1291 - (31 + 701)) - (395 + 162)]] = v60[v78[3 + 0]];
								v70 = v70 + (3 - 2);
								v78 = v66[v70];
								v76[v78[1943 - ((1315 - (393 + 106)) + 1125)]] = v76[v78[1174 - (727 + 444)]][v78[5 - 1]];
								v70 = v70 + (1149 - (701 + 447));
								v78 = v66[v70];
								v76[v78[2 - 0]] = v76[v78[(11 - 7) - 1]] / v78[1345 - (391 + 950)];
								v70 = v70 + 1;
								v78 = v66[v70];
								v698 = v78[5 - 3];
								v76[v698] = v76[v698](v76[v698 + (2 - (1 + 0))]);
								v70 = v70 + ((655 - (269 + 384)) - 1);
								v78 = v66[v70];
								v76[v78[2]] = v60[v78[3 + 0]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[10 - 7]][v78[4]];
								v70 = v70 + (1523 - (251 + 1271));
								v78 = v66[v70];
								v76[v78[2 + 0]] = v76[v78[7 - 4]] / v78[9 - 5];
								v70 = v70 + 1;
								v78 = v66[v70];
								v698 = v78[2];
								v76[v698] = v76[v698](v76[v698 + (1 - 0)]);
								v70 = v70 + ((2829 - (598 + 971)) - (1147 + 112));
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[1 + 0 + 2]];
								v70 = v70 + ((3 - 2) - 0);
								v78 = v66[v70];
								v76[v78[(4 - 3) + 1]] = v76[v78[700 - (335 + 362)]];
								v70 = v70 + 1 + (0 - 0);
								v78 = v66[v70];
								v76[v78[2]] = v78[(1449 - (800 + 645)) - 1];
							end
						elseif (v79 <= (354 - 224)) then
							local v718;
							v76[v78[7 - 5]] = v76[v78[14 - 11]];
							v70 = v70 + (2 - (1 + 0));
							v78 = v66[v70];
							v76[v78[568 - (237 + 329)]] = v78[10 - 7];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[2 + 0]] = v78[3];
							v70 = v70 + (791 - (687 + 103)) + 0;
							v78 = v66[v70];
							v718 = v78[1126 - (408 + 716)];
							v76[v718] = v76[v718](v13(v76, v718 + (3 - 2), v78[824 - (344 + 477)]));
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[2]][v76[v78[1764 - (1188 + 573)]]] = v78[10 - 6];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[2]] = v76[v78[9 - 6]];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v76[v78[4 - 2]] = v78[1532 - (508 + 1021)];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[2]] = v78[(1165 - (142 + 1020)) + (0 - 0)];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v718 = v78[2];
							v76[v718] = v76[v718](v13(v76, v718 + (1167 - (228 + 938)), v78[688 - (332 + 353)]));
							v70 = v70 + (1 - (513 - (306 + 207)));
							v78 = v66[v70];
							v76[v78[5 - 3]][v76[v78[3]]] = v78[4 + 0];
						elseif ((v79 == (66 + 65)) or (2799 < 1999)) then
							local v1427;
							v76[v78[7 - 5]] = v59[v78[426 - (18 + 405)]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[(1406 - (112 + 1292)) + 0]] = v76[v78[3 - 0]][v78[982 - (194 + 784)]];
							v70 = v70 + (1771 - (694 + 905 + 171));
							v78 = v66[v70];
							v76[v78[1906 - (122 + (2734 - (587 + 365)))]] = v76[v78[3]][v78[4 + 0]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1427 = v78[2 + 0];
							v76[v1427](v76[v1427 + 1 + 0]);
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[2]] = v78[3 + (1715 - (829 + 886))];
						else
							local v1438 = 0;
							local v1439;
							local v1440;
							while true do
								if (v1438 == (2 - 1)) then
									v1439 = v76[v78[3 + (0 - 0)]];
									v76[v1440 + (1971 - (214 + 1756))] = v1439;
									v76[v1440] = v1439[v78[19 - 15]];
									v1438 = 1 + 1;
								end
								if ((1 + 2) == v1438) then
									v76[v1440](v76[v1440 + (586 - (217 + 368))]);
									v70 = v70 + 1;
									v78 = v66[v70];
									v1438 = 11 - 7;
								end
								if (v1438 == (0 + 0 + 0)) then
									v1439 = nil;
									v1440 = nil;
									v1440 = v78[2 + 0];
									v1438 = 1 + 0;
								end
								if ((v1438 == (894 - (844 + 45))) or (3914 <= 3411)) then
									v59[v78[287 - ((960 - 718) + 42)]] = v76[v78[3 - 1]];
									v70 = v70 + (2 - 1);
									v78 = v66[v70];
									v1438 = 1206 - (132 + 1068);
								end
								if (v1438 == (2 - (0 - 0))) then
									v70 = v70 + ((1578 + 46) - (214 + 1409));
									v78 = v66[v70];
									v1440 = v78[1 + 1 + (0 - 0)];
									v1438 = 3;
								end
								if ((6 == v1438) or (2828 <= 2303)) then
									v70 = v78[1637 - (497 + 1137)];
									break;
								end
								if ((v1438 == (944 - (9 + 931))) or (4838 <= 971)) then
									for v2486 = v78[2], v78[292 - ((1158 - (613 + 364)) + 108)] do
										v76[v2486] = nil;
									end
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v1438 = 5;
								end
							end
						end
					elseif ((v79 <= (337 - 200)) or (522 > 2743)) then
						if (v79 <= (397 - 263)) then
							if (v79 == (32 + 101)) then
								local v738 = v78[2 + 0];
								v76[v738] = v76[v738](v76[v738 + ((435 + 42) - (296 + 81 + 99))]);
							else
								local v740;
								v76[v78[1405 - (1183 + 220)]] = v76[v78[1268 - (1037 + 228)]][v78[(2 + 3) - (2 - 1)]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[5 - 3]] = v60[v78[10 - 7]];
								v70 = v70 + (735 - (527 + 207));
								v78 = v66[v70];
								v76[v78[529 - ((671 - 484) + 340)]] = v76[v78[(5964 - 4091) - (1298 + 572)]][v78[4]];
								v70 = v70 + (2 - (1 + 0));
								v78 = v66[v70];
								v76[v78[172 - (144 + 26)]] = v76[v78[7 - 4]];
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v76[v78[2]] = v78[3];
								v70 = v70 + (1940 - (1467 + 472)) + 0;
								v78 = v66[v70];
								v740 = v78[5 - 3];
								v76[v740] = v76[v740](v13(v76, v740 + (2 - 1), v78[14 - 11]));
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2 + 0]] = v76[v78[3 - 0]] / v78[4];
								v70 = v70 + 1 + (0 - 0);
								v78 = v66[v70];
								v76[v78[1 + (1548 - (1077 + 470))]] = v76[v78[205 - (5 + 197)]] + v76[v78[4]];
								v70 = v70 + (687 - (339 + 347));
								v78 = v66[v70];
								v76[v78[2]] = v78[6 - 3];
								v70 = v70 + 1;
								v78 = v66[v70];
								v740 = v78[6 - 4];
								v76[v740] = v76[v740](v13(v76, v740 + ((8 + 369) - (365 + 11)), v78[3 + 0]));
								v70 = v70 + (3 - 2);
								v78 = v66[v70];
								v76[v78[4 - 2]] = v76[v78[(289 + 638) - (837 + 87)]];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v76[v78[1672 - (837 + 833)]] = v59[v78[3]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[1389 - (356 + 1031)]] = v76[v78[3]][v78[2 + 2]];
								v70 = v70 + (1647 - (73 + 1573));
								v78 = v66[v70];
								v76[v78[1390 - (1307 + 81)]] = v76[v78[13 - 10]][v78[238 - (7 + 227)]];
								v70 = v70 + ((430 - (12 + 417)) - 0);
								v78 = v66[v70];
								v76[v78[168 - (90 + 76)]] = v76[v78[(22 - 13) - 6]] * v76[v78[2 + 2]];
								v70 = v70 + 1 + 0 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[3 + 0]] + v76[v78[15 - 11]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[262 - (197 + 63)]] = v59[v78[1 + 2]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2 + 0]] = v60[v78[3]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[3 - 0]][v78[4]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[1371 - (618 + 751)]] = v76[v78[(3 - 0) + 0]] / v78[1914 - (206 + 1704)];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v76[v78[2]] = v78[3];
								v70 = v70 + (1 - (0 - 0));
								v78 = v66[v70];
								v740 = v78[(1 - 0) + 1];
								v76[v740] = v76[v740](v13(v76, v740 + (1276 - (155 + 1120)), v78[1509 - (396 + 1110)]));
								v70 = v70 + (2 - (1 + 0));
								v78 = v66[v70];
								v76[v78[1 + 1]] = v76[v78[3 + 0]] / v78[2 + 2 + 0];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[978 - (230 + 746)]] = v76[v78[3]] + v76[v78[605 - (473 + 128)]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[(8 + 42) - (39 + (25 - 16))]][v78[269 - ((1143 - (924 + 181)) + 228)]] = v76[v78[6 - 2]];
								v70 = v70 + (474 - (106 + (1164 - (263 + 534))));
								v78 = v66[v70];
								v76[v78[1 + 0 + 1]] = v59[v78[1865 - (336 + 18 + 1508)]];
								v70 = v70 + (3 - 2);
								v78 = v66[v70];
								v76[v78[2]][v78[3]] = v76[v78[3 + 1]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v78[3 - 0];
								v70 = v70 + (1245 - (334 + 910));
								v78 = v66[v70];
								v70 = v78[3];
							end
						elseif ((v79 <= 135) or (246 >= 1352)) then
							v76[v78[897 - (92 + (1664 - 861))]] = v76[v78[3]];
						elseif (v79 == 136) then
							local v1441 = 0 + 0;
							local v1442;
							local v1443;
							local v1444;
							local v1445;
							while true do
								if (v1441 == (1185 - (1035 + 146))) then
									for v2488 = v1445, v71 do
										v1442 = v1442 + (617 - (230 + 386));
										v76[v2488] = v1443[v1442];
									end
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v1445 = v78[1512 - (353 + 1157)];
									v1441 = 5;
								end
								if (v1441 == (1114 - (53 + 1061))) then
									v1442 = nil;
									v1443, v1444 = nil;
									v1445 = nil;
									v76[v78[2]] = v76[v78[1638 - (1568 + 67)]];
									v1441 = (2 - 1) + 0;
								end
								if (v1441 == (1 + 2)) then
									v1445 = v78[4 - 2];
									v1443, v1444 = v69(v76[v1445](v13(v76, v1445 + (2 - 1), v78[(5 + 2) - 4])));
									v71 = (v1444 + v1445) - 1;
									v1442 = 0 + 0;
									v1441 = (1923 - (562 + 145)) - (615 + 597);
								end
								if ((v1441 == (2 + 0)) or (3227 <= 1048)) then
									v78 = v66[v70];
									v76[v78[1 + 1]] = v78[3];
									v70 = v70 + 1;
									v78 = v66[v70];
									v1441 = 3 - (0 + 0);
								end
								if (v1441 == 5) then
									v76[v1445](v13(v76, v1445 + 1 + 0, v71));
									break;
								end
								if (v1441 == 1) then
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v76[v78[2]] = v78[2 + 1];
									v70 = v70 + (1900 - (1056 + 843));
									v1441 = 3 - (1 + 0);
								end
							end
						else
							v76[v78[2 - (0 + 0)]] = v78[8 - 5] ~= (0 + 0 + 0);
						end
					elseif ((v79 <= (2115 - (286 + 1690))) or (4946 < 1852)) then
						if (v79 > (1049 - (98 + 813))) then
							do
								return v76[v78[1 + 1]];
							end
						else
							local v784;
							local v785;
							v785 = v78[4 - (3 - 1)];
							v76[v785] = v76[v785](v13(v76, v785 + 1 + 0, v78[510 - (263 + 244)]));
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v785 = v78[(1666 + 23) - (1502 + 185)];
							v784 = v76[v78[1 + 2]];
							v76[v785 + (4 - 3)] = v784;
							v76[v785] = v784[v78[10 - 6]];
							v70 = v70 + (1528 - (629 + 898));
							v78 = v66[v70];
							v76[v78[5 - 3]] = v76[v78[7 - 4]];
							v70 = v70 + (366 - (12 + (1632 - 1279)));
							v78 = v66[v70];
							v76[v78[1913 - (1680 + 231)]] = v78[3];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[2]] = v78[1 + 1 + 1];
							v70 = v70 + (1150 - (212 + 611 + 326));
							v78 = v66[v70];
							v785 = v78[2];
							v76[v785] = v76[v785](v13(v76, v785 + 1 + 0, v78[(2941 - (1459 + 417)) - (111 + 951)]));
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[29 - (18 + 9)]] = v78[3] ~= (0 + 0);
						end
					elseif (v79 <= 140) then
						local v801;
						local v802, v803;
						local v804;
						local v805;
						v805 = v78[2];
						v804 = v76[v78[537 - (31 + 503)]];
						v76[v805 + (1633 - (595 + 1037))] = v804;
						v76[v805] = v804[v78[1448 - (189 + (1541 - (194 + 92)))]];
						v70 = v70 + 1 + 0;
						v78 = v66[v70];
						v76[v78[1387 - (1057 + 328)]] = v59[v78[4 - 1]];
						v70 = v70 + 1;
						v78 = v66[v70];
						v76[v78[(3621 - 2340) - (1170 + 109)]] = v78[(8861 - 7041) - (348 + 1469)];
						v70 = v70 + (1290 - (1115 + 174));
						v78 = v66[v70];
						v76[v78[4 - (534 - (5 + 527))]] = v78[1017 - (85 + 929)];
						v70 = v70 + 1;
						v78 = v66[v70];
						v805 = v78[2 + 0 + 0];
						v802, v803 = v69(v76[v805](v13(v76, v805 + (1868 - (1151 + 716)), v78[2 + 1])));
						v71 = (v803 + v805) - 1;
						v801 = 0 + 0;
						for v930 = v805, v71 do
							v801 = v801 + (1705 - (95 + 1609));
							v76[v930] = v802[v801];
						end
						v70 = v70 + (3 - 2);
						v78 = v66[v70];
						v805 = v78[(1540 - (342 + 438)) - (364 + 394)];
						v76[v805] = v76[v805](v13(v76, v805 + 1 + 0, v71));
						v70 = v70 + 1 + 0;
						v78 = v66[v70];
						v76[v78[1 + 1]] = v59[v78[3 + 0 + 0]];
						v70 = v70 + 1 + 0;
						v78 = v66[v70];
						v76[v78[2 + 0]] = v76[v78[2 + 1]][v78[4 + 0 + 0]];
						v70 = v70 + 1 + 0;
						v78 = v66[v70];
						if (v76[v78[2]] ~= v76[v78[960 - (719 + 237)]]) then
							v70 = v70 + (2 - 1);
						else
							v70 = v78[3 + 0];
						end
					elseif (v79 > ((279 + 70) - 208)) then
						local v1448;
						v76[v78[5 - 3]] = v60[v78[7 - (7 - 3)]];
						v70 = v70 + (1992 - (761 + 1230));
						v78 = v66[v70];
						v1448 = v78[195 - (80 + 113)];
						v76[v1448] = v76[v1448]();
						v70 = v70 + 1;
						v78 = v66[v70];
						v76[v78[2 + 0]][v78[3 + 0]] = v76[v78[4]];
						v70 = v70 + 1 + 0;
						v78 = v66[v70];
						v76[v78[7 - 5]] = v59[v78[1 + 2]];
						v70 = v70 + 1;
						v78 = v66[v70];
						v76[v78[2]] = v59[v78[1 + 1 + 1]];
						v70 = v70 + (1244 - (965 + 278));
						v78 = v66[v70];
						v76[v78[1731 - (197 + 1194 + 338)]] = v76[v78[(13 - 6) - 4]][v78[4 + 0]];
						v70 = v70 + (1 - (0 - 0));
						v78 = v66[v70];
						v76[v78[1 + 1]] = v76[v78[1411 - (496 + (924 - (6 + 6)))]] + v78[13 - 9];
						v70 = v70 + 1 + (0 - 0);
						v78 = v66[v70];
						v76[v78[3 - 1]] = v76[v78[1333 - (1190 + 140)]] + v78[2 + 2];
						v70 = v70 + (719 - (317 + 401));
						v78 = v66[v70];
						v76[v78[951 - ((849 - 546) + 646)]][v78[10 - 7]] = v76[v78[1736 - (1675 + 57)]];
						v70 = v70 + 1 + 0;
						v78 = v66[v70];
						v76[v78[4 - 2]] = v78[1 + 2];
						v70 = v70 + 1;
						v78 = v66[v70];
						v70 = v78[980 - (338 + 639)];
					else
						local v1469 = 379 - (320 + 59);
						local v1470;
						local v1471;
						local v1472;
						local v1473;
						local v1474;
						local v1475;
						while true do
							if ((v1469 == 8) or (308 > 2854)) then
								v78 = v66[v70];
								v76[v78[2 + 0]] = v78[735 - (628 + 104)];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v1475 = v78[1893 - (439 + 1452)];
								v1472, v1473 = v69(v76[v1475](v13(v76, v1475 + (1948 - (105 + 1842)), v78[13 - 10])));
								v1469 = 9;
							end
							if (v1469 == (21 - 12)) then
								v71 = (v1473 + v1475) - (4 - 3);
								v1471 = 0 + 0;
								for v2491 = v1475, v71 do
									local v2492 = 0 - 0;
									while true do
										if (v2492 == (0 + 0)) then
											v1471 = v1471 + (1165 - (274 + 890));
											v76[v2491] = v1472[v1471];
											break;
										end
									end
								end
								v70 = v70 + 1;
								v78 = v66[v70];
								v1475 = v78[2];
								v1469 = 5 + 5;
							end
							if ((151 == 151) and ((10 + 1) == v1469)) then
								v1475 = v78[2 + 0];
								v1470 = v76[v1475];
								for v2493 = v1475 + 1 + (1253 - (206 + 1047)), v71 do
									v7(v1470, v76[v2493]);
								end
								break;
							end
							if (v1469 == (2 + 1)) then
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[2]] = v78[2 + 1];
								v70 = v70 + 1;
								v78 = v66[v70];
								v1475 = v78[2 - 0];
								v1469 = 823 - (731 + 88);
							end
							if (v1469 == (8 + 2)) then
								v1472, v1473 = v69(v76[v1475](v13(v76, v1475 + 1 + 0, v71)));
								v71 = (v1473 + v1475) - (1 + 0);
								v1471 = 0;
								for v2494 = v1475, v71 do
									v1471 = v1471 + (1 - 0);
									v76[v2494] = v1472[v1471];
								end
								v70 = v70 + (2 - 1);
								v78 = v66[v70];
								v1469 = 31 - 20;
							end
							if ((v1469 == (10 - 5)) or (540 > 4259)) then
								v1475 = v78[2 + 0];
								v76[v1475] = v76[v1475](v13(v76, v1475 + 1 + 0, v71));
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2 + 0]] = v60[v78[161 - (139 + 19)]];
								v70 = v70 + 1 + 0;
								v1469 = 6;
							end
							if (((2000 - (1687 + 306)) == v1469) or (2890 <= 2521)) then
								v78 = v66[v70];
								v76[v78[7 - 5]] = v59[v78[1157 - (1018 + 136)]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[(1120 - (470 + 642)) - 6]] = v78[818 - (117 + 698)];
								v70 = v70 + (482 - (305 + 176));
								v1469 = 2 + 6;
							end
							if (v1469 == (5 + 1)) then
								v78 = v66[v70];
								v1475 = v78[2 - 0];
								v1474 = v76[v78[3 + 0]];
								v76[v1475 + ((1 + 0) - 0)] = v1474;
								v76[v1475] = v1474[v78[8 - 4]];
								v70 = v70 + (1 - 0);
								v1469 = 267 - (159 + 101);
							end
							if (v1469 == (9 - 7)) then
								v70 = v70 + (3 - 2);
								v78 = v66[v70];
								v76[v78[2]] = v59[v78[2 + 1]];
								v70 = v70 + (3 - 2);
								v78 = v66[v70];
								v76[v78[(1070 - (552 + 515)) - 1]] = v78[1 + 2];
								v1469 = 3;
							end
							if ((1780 > 310) and (v1469 == (270 - (112 + 154)))) then
								v1472, v1473 = v69(v76[v1475](v13(v76, v1475 + (2 - 1), v78[3])));
								v71 = (v1473 + v1475) - (32 - (21 + 10));
								v1471 = (1381 + 338) - (416 + 115 + 1188);
								for v2497 = v1475, v71 do
									v1471 = v1471 + 1 + 0;
									v76[v2497] = v1472[v1471];
								end
								v70 = v70 + (664 - (96 + 567));
								v78 = v66[v70];
								v1469 = 6 - 1;
							end
							if (v1469 == (1 + 0)) then
								v70 = v70 + (3 - (2 + 0));
								v78 = v66[v70];
								v1475 = v78[1697 - (867 + 828)];
								v1474 = v76[v78[6 - (2 + 1)]];
								v76[v1475 + (3 - 2)] = v1474;
								v76[v1475] = v1474[v78[4]];
								v1469 = 4 - 2;
							end
							if (((0 - (0 + 0)) == v1469) or (2884 < 1507)) then
								v1470 = nil;
								v1471 = nil;
								v1472, v1473 = nil;
								v1474 = nil;
								v1475 = nil;
								v76[v78[1 + 1]] = v60[v78[4 - 1]];
								v1469 = 1;
							end
						end
					end
				elseif (v79 <= 152) then
					if ((2899 == 2899) and (v79 <= (918 - (134 + 637)))) then
						if (v79 <= (26 + 118)) then
							if (v79 > 143) then
								v76[v78[1159 - (775 + 382)]] = v59[v78[3 - (0 + 0)]];
								v70 = v70 + ((1659 - (701 + 350)) - (45 + 562));
								v78 = v66[v70];
								v76[v78[864 - (545 + 317)]] = v59[v78[3 - 0]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[1028 - (407 + 356 + 263)]] = v76[v78[1 + 2 + 0]][v78[1754 - (512 + (1946 - 708))]];
								v70 = v70 + (1595 - (272 + (4121 - 2799)));
								v78 = v66[v70];
								v76[v78[3 - 1]] = v76[v78[1249 - (338 + 195 + 713)]] + v78[32 - (14 + 14)];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[827 - (499 + 326)]][v78[4 - 1]] = v76[v78[428 - (104 + 320)]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v76[v78[1999 - (1929 + 68)]] = v60[v78[1326 - (1206 + 117)]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v76[v78[2]] = v76[v78[1595 - (683 + 909)]][v78[12 - 8]];
								v70 = v70 + (1 - (0 - 0));
								v78 = v66[v70];
								v76[v78[779 - (772 + 5)]] = v78[1430 - (19 + 1408)];
							elseif ((923 < 1792) and (v76[v78[290 - (134 + 154)]] <= v76[v78[6 - 2]])) then
								v70 = v70 + 1;
							else
								v70 = v78[9 - 6];
							end
						elseif (v79 <= (50 + 95)) then
							local v840;
							v76[v78[2 + 0]] = v78[205 - (10 + 192)];
							v70 = v70 + ((6 + 42) - (13 + 34));
							v78 = v66[v70];
							v76[v78[1291 - (342 + 746 + 201)]] = v78[12 - 9];
							v70 = v70 + (1709 - (119 + 1589));
							v78 = v66[v70];
							v840 = v78[4 - 2];
							v76[v840] = v76[v840](v13(v76, v840 + (1 - 0), v78[(2212 - 1657) - (545 + 7)]));
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v76[v78[1 + 1]][v76[v78[1706 - (494 + 1209)]]] = v78[10 - 6];
							v70 = v70 + (999 - (197 + (2147 - (281 + 1065))));
							v78 = v66[v70];
							v76[v78[(13 - 10) - 1]] = v76[v78[14 - 11]];
							v70 = v70 + (955 - (919 + 35));
							v78 = v66[v70];
							v76[v78[2]] = v78[3 + (0 - 0)];
							v70 = v70 + (3 - 2);
							v78 = v66[v70];
							v76[v78[469 - (369 + 98)]] = v78[1118 - (400 + 715)];
							v70 = v70 + 1;
							v78 = v66[v70];
							v840 = v78[1 + 1];
							v76[v840] = v76[v840](v13(v76, v840 + 1 + 0, v78[3]));
							v70 = v70 + (1326 - (744 + 581));
							v78 = v66[v70];
							v76[v78[2 + 0]][v76[v78[1625 - (653 + 969)]]] = v78[7 - 3];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[(2844 - (1114 + 97)) - (12 + 1619)]] = v76[v78[166 - (103 + 60)]];
						elseif (v79 > 146) then
							local v1477 = v78[(13 - 4) - 7];
							v76[v1477](v13(v76, v1477 + 1, v71));
						else
							local v1478;
							local v1479;
							v76[v78[2]] = v76[v78[12 - 9]][v78[(1932 - (279 + 1634)) - 15]];
							v70 = v70 + (1663 - (710 + 952));
							v78 = v66[v70];
							v1479 = v78[1282 - (1213 + 67)];
							v76[v1479] = v76[v1479]();
							v70 = v70 + (1869 - (555 + 1313));
							v78 = v66[v70];
							v76[v78[2 + 0]][v78[3 + 0]] = v76[v78[4]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v1479 = v78[1470 - (1261 + 207)];
							v1478 = v76[v78[255 - (245 + (198 - (65 + 126)))]];
							v76[v1479 + (748 - (195 + 17 + 535))] = v1478;
							v76[v1479] = v1478[v78[4]];
							v70 = v70 + (4 - 3);
							v78 = v66[v70];
							v76[v78[2]] = v78[3];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1479 = v78[1478 - (905 + 571)];
							v76[v1479](v13(v76, v1479 + (4 - 3), v78[3]));
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v76[v78[7 - 5]] = v78[1 + 2];
							v70 = v70 + (1464 - (522 + 941));
							v78 = v66[v70];
							v70 = v78[3];
						end
					elseif ((3579 > 509) and (v79 <= (1660 - (292 + 1219)))) then
						if ((v79 > (1260 - (787 + 325))) or (3063 < 390)) then
							local v861 = (1085 - (189 + 896)) - 0;
							local v862;
							local v863;
							local v864;
							local v865;
							while true do
								if (v861 == 3) then
									v865 = v78[2];
									v863, v864 = v69(v76[v865](v13(v76, v865 + 1 + 0, v78[3 + 0])));
									v71 = (v864 + v865) - (2 - 1);
									v862 = (2497 - (1872 + 91)) - (424 + 110);
									v861 = 3 + 1;
								end
								if (v861 == (2 + 0)) then
									v78 = v66[v70];
									v76[v78[(2 - 1) + 1]] = v78[315 - (33 + 279)];
									v70 = v70 + 1 + 0 + 0;
									v78 = v66[v70];
									v861 = (4819 - 3463) - (1338 + 15);
								end
								if (((4 + 0) == v861) or (1771 < 524)) then
									for v2005 = v865, v71 do
										v862 = v862 + (1424 - (217 + 311 + 895));
										v76[v2005] = v863[v862];
									end
									v70 = v70 + 1 + 0;
									v78 = v66[v70];
									v865 = v78[1926 - (1606 + 318)];
									v861 = 5;
								end
								if (v861 == (1819 - (298 + 1521))) then
									v862 = nil;
									v863, v864 = nil;
									v865 = nil;
									v76[v78[8 - (21 - 15)]] = v59[v78[313 - (154 + 156)]];
									v861 = 3 - 2;
								end
								if (v861 == (10 - 5)) then
									v76[v865](v13(v76, v865 + 1, v71));
									v70 = v70 + 1;
									v78 = v66[v70];
									v70 = v78[1118 - (712 + 403)];
									break;
								end
								if (1 == v861) then
									v70 = v70 + 1;
									v78 = v66[v70];
									v76[v78[452 - (168 + 282)]] = v78[5 - (78 - (22 + 54))];
									v70 = v70 + 1;
									v861 = 2;
								end
							end
						else
							local v866;
							v76[v78[2 + 0]]();
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[1 + 1]] = v60[v78[8 - 5]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v866 = v78[(3405 - 1952) - (1242 + 209)];
							v76[v866] = v76[v866]();
							v70 = v70 + ((1709 - 1029) - (20 + 659));
							v78 = v66[v70];
							v76[v78[2]][v78[3]] = v76[v78[3 + 1]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v70 = v78[4 - 1];
						end
					elseif (v79 <= (307 - 157)) then
						v76[v78[621 - (427 + 192)]] = v76[v78[6 - 3]] - v78[2 + 1 + 1];
					elseif (v79 == 151) then
						local v1495 = v78[1949 - (1427 + 520)];
						v76[v1495] = v76[v1495](v13(v76, v1495 + 1 + 0, v78[11 - 8]));
					else
						v60[v78[3 + 0]] = v76[v78[(4823 - 3589) - (712 + 520)]];
					end
				elseif ((v79 <= (392 - (1769 - (553 + 981)))) or (4369 > 4663)) then
					if (v79 <= (1500 - (565 + 781))) then
						if (v79 > 153) then
							local v876 = 565 - (35 + 530);
							while true do
								if ((223 < 4172) and (v876 == (0 + 0))) then
									v76[v78[6 - (4 + 0)]] = v59[v78[3]];
									v70 = v70 + (1379 - (1330 + 48));
									v78 = v66[v70];
									v76[v78[2 + 0]] = v76[v78[1 + 2]][v78[6 - 2]];
									v876 = 4 - 3;
								end
								if (v876 == (1170 - (530 + 324 + 315))) then
									v70 = v70 + (3 - 2);
									v78 = v66[v70];
									v76[v78[1 + 1]] = v76[v78[47 - (31 + 10 + 3)]][v78[5 - 1]];
									v70 = v70 + (2 - 1);
									v876 = 2;
								end
								if ((4644 == 4644) and (v876 == (2 + 0))) then
									v78 = v66[v70];
									v76[v78[2]] = v76[v78[8 - 5]][v78[4]];
									v70 = v70 + (564 - (281 + 282));
									v78 = v66[v70];
									v876 = 8 - 5;
								end
								if ((1667 > 1066) and (v876 == (2 + 1))) then
									v76[v78[2]][v78[(1415 - 463) - ((2113 - (1320 + 577)) + 733)]] = v76[v78[(2700 - (667 + 182)) - (137 + 1710)]];
									break;
								end
							end
						else
							local v877;
							local v878, v879;
							local v880;
							local v881;
							v881 = v78[2];
							v880 = v76[v78[1291 - (1115 + 173)]];
							v76[v881 + 1] = v880;
							v76[v881] = v880[v78[4]];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v76[v78[540 - ((167 - 67) + 438)]] = v76[v78[3]];
							v70 = v70 + (1366 - (205 + 1160));
							v78 = v66[v70];
							v76[v78[2 + 0]] = v78[2 + 1 + 0];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[1307 - (535 + 770)]] = v78[(1756 - (1375 + 380)) + 2];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v881 = v78[1996 - (211 + 1783)];
							v878, v879 = v69(v76[v881](v13(v76, v881 + 1 + 0, v78[1432 - (1236 + 193)])));
							v71 = (v879 + v881) - (911 - (793 + 117));
							v877 = 1892 - (1607 + 285);
							for v933 = v881, v71 do
								v877 = v877 + 1;
								v76[v933] = v878[v877];
							end
							v70 = v70 + 1;
							v78 = v66[v70];
							v881 = v78[2];
							v76[v881] = v76[v881](v13(v76, v881 + (861 - (747 + 113)), v71));
							v70 = v70 + (1977 - (31 + 49 + 1896));
							v78 = v66[v70];
							if v76[v78[2]] then
								v70 = v70 + (4 - 3);
							else
								v70 = v78[5 - 2];
							end
						end
					elseif (v79 <= (146 + 9)) then
						if (v78[4 - 2] == v76[v78[3 + 1]]) then
							v70 = v70 + (2 - 1);
						else
							v70 = v78[2 + 1];
						end
					elseif (v79 > (48 + 108)) then
						local v1501;
						local v1502, v1503;
						local v1504;
						local v1505;
						v1505 = v78[4 - 2];
						v1504 = v76[v78[457 - (246 + 208)]];
						v76[v1505 + 1] = v1504;
						v76[v1505] = v1504[v78[1896 - (614 + 1278)]];
						v70 = v70 + 1 + 0;
						v78 = v66[v70];
						v76[v78[2]] = v76[v78[317 - (249 + 65)]];
						v70 = v70 + (2 - 1);
						v78 = v66[v70];
						v76[v78[2]] = v78[1278 - (726 + 549)];
						v70 = v70 + (27 - (12 + 14)) + 0;
						v78 = v66[v70];
						v76[v78[1426 - ((2208 - 1292) + 508)]] = v78[9 - 6];
						v70 = v70 + 1 + 0;
						v78 = v66[v70];
						v1505 = v78[325 - (140 + 183)];
						v1502, v1503 = v69(v76[v1505](v13(v76, v1505 + 1, v78[3 + 0])));
						v71 = (v1503 + v1505) - (565 - (297 + 267));
						v1501 = 0 + 0;
						for v1942 = v1505, v71 do
							v1501 = v1501 + (343 - (37 + 305));
							v76[v1942] = v1502[v1501];
						end
						v70 = v70 + (1267 - (323 + 943));
						v78 = v66[v70];
						v1505 = v78[1 + 1];
						v76[v1505] = v76[v1505](v13(v76, v1505 + (1 - 0), v71));
						v70 = v70 + (1536 - (394 + 1141));
						v78 = v66[v70];
						if v76[v78[2 + 0]] then
							v70 = v70 + 1;
						else
							v70 = v78[1 + 2];
						end
					else
						local v1519;
						v1519 = v78[1 + 1];
						v76[v1519] = v76[v1519]();
						v70 = v70 + 1;
						v78 = v66[v70];
						v76[v78[2 - 0]] = v59[v78[3 - 0]];
						v70 = v70 + 1 + 0;
						v78 = v66[v70];
						v76[v78[2]] = v76[v78[3 + 0]][v78[533 - (87 + 442)]];
						v70 = v70 + ((1782 - 976) - (13 + 792));
						v78 = v66[v70];
						v76[v78[2 + 0]] = v76[v78[2 + 1]] - v76[v78[4 + 0]];
						v70 = v70 + ((4674 - 2808) - (1231 + 634));
						v78 = v66[v70];
						if ((v78[1768 - (1362 + 404)] < v76[v78[10 - 6]]) or (4500 == 2085)) then
							v70 = v70 + 1 + 0;
						else
							v70 = v78[8 - 5];
						end
					end
				elseif (v79 <= (1176 - (660 + 356))) then
					if (v79 <= ((654 - 428) - 68)) then
						local v895 = v78[2 + (0 - 0)];
						local v896 = v78[1954 - (1111 + 839)];
						local v897 = v895 + (953 - (496 + 455));
						local v898 = {v76[v895](v76[v895 + (1 - 0)], v76[v897])};
						for v936 = 1137 - (441 + 695), v896 do
							v76[v897 + v936] = v898[v936];
						end
						local v899 = v898[1];
						if v899 then
							v76[v897] = v899;
							v70 = v78[3];
						else
							v70 = v70 + (2 - 1);
						end
					elseif ((v79 == (297 - 138)) or (4278 < 2082)) then
						local v1530 = 0 - 0;
						while true do
							if ((v1530 == (3 + 1)) or (1269 == 485)) then
								v76[v78[1840 - (286 + 1552)]] = v76[v78[734 - (354 + 377)]][v78[4]];
								v70 = v70 + (1278 - ((4799 - 3783) + 261));
								v78 = v66[v70];
								v1530 = 1325 - ((1902 - 1194) + 612);
							end
							if ((5 - 3) == v1530) then
								v76[v78[2]] = v76[v78[2 + (1983 - (263 + 1719))]][v78[(184 + 199) - (113 + 266)]];
								v70 = v70 + 1;
								v78 = v66[v70];
								v1530 = 1173 - (979 + 191);
							end
							if (v1530 == (8 - 3)) then
								v76[v78[2]] = v76[v78[1738 - (339 + 1396)]] - v76[v78[2 + 2]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v1530 = 11 - 5;
							end
							if (((7 + 0) == v1530) or (4210 < 1946)) then
								v76[v78[1 + 1]] = v78[(709 - (335 + 24)) - (187 + 160)];
								break;
							end
							if ((0 - 0) == v1530) then
								v76[v78[6 - 4]] = v76[v78[1 + 2]][v78[(963 - (882 + 69)) - 8]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v1530 = 1 + 0;
							end
							if ((10 - 4) == v1530) then
								v76[v78[2]] = v76[v78[331 - (56 + 272)]][v78[4]];
								v70 = v70 + 1 + 0;
								v78 = v66[v70];
								v1530 = 6 + 1;
							end
							if (v1530 == (2 - 1)) then
								v76[v78[2 + 0]] = v76[v78[1689 - (657 + 1029)]][v78[4]];
								v70 = v70 + (641 - (455 + (1385 - (685 + 515))));
								v78 = v66[v70];
								v1530 = 790 - (757 + 31);
							end
							if (3 == v1530) then
								v76[v78[2]] = v76[v78[2002 - (762 + (2875 - (745 + 893)))]][v78[4]];
								v70 = v70 + (1 - 0);
								v78 = v66[v70];
								v1530 = 273 - (265 + 4);
							end
						end
					else
						local v1531 = v78[2];
						local v1532 = v76[v1531];
						for v1945 = v1531 + 1, v71 do
							v7(v1532, v76[v1945]);
						end
					end
				elseif (v79 <= (407 - 246)) then
					local v900 = 0;
					local v901;
					while true do
						if ((1725 == 1725) and (0 == v900)) then
							v901 = v78[2];
							v76[v901](v13(v76, v901 + 1 + 0, v78[5 - 2]));
							break;
						end
					end
				elseif (v79 == (454 - 292)) then
					local v1533 = 0;
					local v1534;
					local v1535;
					local v1536;
					local v1537;
					local v1538;
					while true do
						if (v1533 == (5 + 35)) then
							v78 = v66[v70];
							v76[v78[2]] = v78[8 - 5];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v1538 = v78[2];
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + (1 - 0), v78[1737 - (1691 + 43)])));
							v71 = (v1536 + v1538) - 1;
							v1534 = 0;
							v1533 = 41;
						end
						if (v1533 == (4 + 0 + 0)) then
							v1538 = v78[6 - 4];
							v76[v1538] = v76[v1538](v13(v76, v1538 + 1 + 0, v71));
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[7 - (777 - (274 + 498))]] = v60[v78[179 - (127 + 49)]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1538 = v78[2];
							v1533 = (287 + 1398) - (281 + 479 + 920);
						end
						if ((1529 < 4456) and (v1533 == (1696 - ((1790 - (1035 + 571)) + 1475)))) then
							v1538 = v78[2];
							v1537 = v76[v78[3 - 0]];
							v76[v1538 + ((1 + 1) - 1)] = v1537;
							v76[v1538] = v1537[v78[8 - (2 + 2)]];
							v70 = v70 + 1 + (0 - 0);
							v78 = v66[v70];
							v76[v78[2]] = v76[v78[3 + 0]];
							v70 = v70 + (1292 - (260 + 1031));
							v1533 = 1215 - (313 + 864);
						end
						if ((v1533 == (708 - (655 + 37))) or (1726 <= 1365)) then
							v76[v1538 + 1 + 0] = v1537;
							v76[v1538] = v1537[v78[(18 - 12) - 2]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[4 - 2]] = v76[v78[2 + 1]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[2]] = v78[3];
							v1533 = 17;
						end
						if (v1533 == (22 - 10)) then
							v78 = v66[v70];
							v1538 = v78[772 - (383 + 387)];
							v1537 = v76[v78[1 + 2]];
							v76[v1538 + 1 + 0] = v1537;
							v76[v1538] = v1537[v78[4]];
							v70 = v70 + (3 - 2);
							v78 = v66[v70];
							v76[v78[1 + 1]] = v76[v78[1 + 0 + 2]];
							v1533 = 13;
						end
						if ((1729 <= 2248) and (v1533 == (516 - (203 + 101 + 206)))) then
							v76[v78[227 - (182 + (131 - 88))]] = v78[778 - (264 + 511)];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[4 - 2]] = v78[3];
							v70 = v70 + (982 - (128 + 853));
							v78 = v66[v70];
							v1538 = v78[1704 - (1635 + 67)];
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + 1 + 0, v78[2 + 1])));
							v1533 = 204 - (131 + 66);
						end
						if ((v1533 == (108 - 77)) or (1320 < 484)) then
							v78 = v66[v70];
							v1538 = v78[(233 - (109 + 115)) - 7];
							v76[v1538] = v76[v1538]();
							v70 = v70 + 1 + (1399 - (1047 + 352));
							v78 = v66[v70];
							v76[v78[(1767 - (852 + 913)) + 0]] = v60[v78[4 - 1]];
							v70 = v70 + (1 - (0 + 0));
							v78 = v66[v70];
							v1533 = 1637 - (306 + 1299);
						end
						if ((7 + 11) == v1533) then
							v1534 = 0 - 0;
							for v2500 = v1538, v71 do
								v1534 = v1534 + (790 - (671 + 118));
								v76[v2500] = v1535[v1534];
							end
							v70 = v70 + 1;
							v78 = v66[v70];
							v1538 = v78[7 - 5];
							v76[v1538] = v76[v1538](v13(v76, v1538 + (77 - (73 + 3)), v71));
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v1533 = 19;
						end
						if (v1533 == 22) then
							v78 = v66[v70];
							v1538 = v78[9 - 7];
							v76[v1538] = v76[v1538](v13(v76, v1538 + (2 - 1), v71));
							v70 = v70 + (1756 - (1668 + 87));
							v78 = v66[v70];
							v76[v78[1 + 1]] = v60[v78[1902 - (296 + 1603)]];
							v70 = v70 + (107 - (79 + 27));
							v78 = v66[v70];
							v1533 = (1364 - (384 + 961)) + (9 - 5);
						end
						if (v1533 == (1030 - (700 + 307))) then
							v1538 = v78[(5 - 3) + 0];
							v1537 = v76[v78[3]];
							v76[v1538 + (1800 - (1477 + (1179 - 857)))] = v1537;
							v76[v1538] = v1537[v78[2 + 2]];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v76[v78[(594 - (591 + 1)) + 0]] = v76[v78[9 - 6]];
							v70 = v70 + 1 + 0 + 0;
							v1533 = 24;
						end
						if ((v1533 == (36 - 27)) or (1144 > 2086)) then
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v76[v78[1 + 1]] = v76[v78[6 - 3]];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v76[v78[3 - 1]] = v78[1789 - (20 + 1766)];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v1533 = 819 - (88 + 721);
						end
						if (v1533 == 24) then
							v78 = v66[v70];
							v76[v78[2 + 0]] = v78[3];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[1 + 1]] = v78[2 + 1];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v1538 = v78[2];
							v1533 = 48 - 23;
						end
						if (v1533 == (454 - (93 + 344))) then
							v70 = v70 + (1214 - (960 + 253));
							v78 = v66[v70];
							v76[v78[1 + 1]] = v78[8 - 5];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v1538 = v78[2];
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + (1417 - (74 + 1342)), v78[1 + 2])));
							v71 = (v1536 + v1538) - (475 - (33 + 441));
							v1533 = 51 - 33;
						end
						if ((v1533 == (1452 - (64 + 1355))) or (1434 > 1774)) then
							v78 = v66[v70];
							v76[v78[2 - 0]] = v76[v78[3]];
							v70 = v70 + (12 - (5 + 6));
							v78 = v66[v70];
							v76[v78[1 + 1]] = v78[1 + 2];
							v70 = v70 + (447 - (369 + 77));
							v78 = v66[v70];
							v76[v78[1 + 1]] = v78[741 - (438 + 300)];
							v1533 = 328 - (50 + 244);
						end
						if ((v1533 == 1) or (380 == 4979)) then
							v70 = v70 + (1202 - (95 + 1106));
							v78 = v66[v70];
							v1538 = v78[3 - 1];
							v1537 = v76[v78[14 - 11]];
							v76[v1538 + (1897 - (1741 + 155))] = v1537;
							v76[v1538] = v1537[v78[11 - 7]];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v1533 = 3 - 1;
						end
						if (v1533 == (1 + 1)) then
							v76[v78[1 + 1]] = v76[v78[2 + 1]];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v76[v78[4 - 2]] = v78[1780 - (1263 + 514)];
							v70 = v70 + (498 - (73 + 424));
							v78 = v66[v70];
							v76[v78[4 - 2]] = v78[3];
							v70 = v70 + 1;
							v1533 = 311 - (93 + 215);
						end
						if ((4341 > 1809) and (v1533 == 28)) then
							v78 = v66[v70];
							v76[v78[2]] = v78[3];
							v70 = v70 + (3 - 2);
							v78 = v66[v70];
							v76[v78[1937 - (1756 + 179)]] = v78[1682 - (550 + 1129)];
							v70 = v70 + (108 - (57 + 50));
							v78 = v66[v70];
							v1538 = v78[2];
							v1533 = 658 - (30 + 599);
						end
						if (v1533 == (10 + 29)) then
							v76[v1538] = v76[v1538](v13(v76, v1538 + (1 - 0), v78[921 - (794 + 124)]));
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[1 + 1]] = v76[v78[3]];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v76[v78[1929 - (1299 + 628)]] = v78[5 - 2];
							v70 = v70 + (2 - 1);
							v1533 = 37 + 3;
						end
						if ((v1533 == (0 - 0)) or (4275 < 2141)) then
							v1534 = nil;
							v1535, v1536 = nil;
							v1537 = nil;
							v1538 = nil;
							v76[v78[1447 - (335 + 1110)]][v78[3 + 0]] = v76[v78[13 - 9]];
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v76[v78[334 - (268 + 64)]] = v60[v78[2 + 1]];
							v1533 = 1;
						end
						if (v1533 == 13) then
							v70 = v70 + (1279 - (243 + 1035));
							v78 = v66[v70];
							v76[v78[2]] = v78[7 - 4];
							v70 = v70 + (4 - 3);
							v78 = v66[v70];
							v76[v78[2]] = v78[12 - 9];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v1533 = 13 + 1;
						end
						if ((v1533 == (3 - 0)) or (479 > 3016)) then
							v78 = v66[v70];
							v1538 = v78[102 - (90 + 10)];
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + (805 - (209 + 595)), v78[808 - (603 + 202)])));
							v71 = (v1536 + v1538) - 1;
							v1534 = 0;
							for v2503 = v1538, v71 do
								v1534 = v1534 + 1 + 0;
								v76[v2503] = v1535[v1534];
							end
							v70 = v70 + (3 - 2);
							v78 = v66[v70];
							v1533 = 2 + 2;
						end
						if (v1533 == (107 - 69)) then
							v78 = v66[v70];
							v76[v78[2]] = v78[3];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[5 - 3]] = v78[12 - 9];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1538 = v78[2];
							v1533 = 39;
						end
						if ((1732 <= 4708) and (v1533 == 27)) then
							v1538 = v78[281 - (174 + 105)];
							v1537 = v76[v78[9 - 6]];
							v76[v1538 + (914 - (532 + 381))] = v1537;
							v76[v1538] = v1537[v78[4 + 0]];
							v70 = v70 + (840 - (137 + 702));
							v78 = v66[v70];
							v76[v78[5 - 3]] = v76[v78[1 + 2]];
							v70 = v70 + (3 - 2);
							v1533 = 1914 - (1819 + 67);
						end
						if (v1533 == 21) then
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v1538 = v78[1 + 1];
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + (1358 - (259 + 1098)), v78[3 + 0])));
							v71 = (v1536 + v1538) - (1 + 0);
							v1534 = 0;
							for v2506 = v1538, v71 do
								v1534 = v1534 + 1;
								v76[v2506] = v1535[v1534];
							end
							v70 = v70 + 1 + 0;
							v1533 = 73 - 51;
						end
						if ((v1533 == (10 + 15)) or (2387 > 2752)) then
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + 1 + 0, v78[14 - 11])));
							v71 = (v1536 + v1538) - (1707 - (667 + 1039));
							v1534 = 1019 - (274 + 745);
							for v2509 = v1538, v71 do
								v1534 = v1534 + 1 + 0;
								v76[v2509] = v1535[v1534];
							end
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v1538 = v78[432 - (288 + 142)];
							v76[v1538] = v76[v1538](v13(v76, v1538 + (1307 - (301 + 1005)), v71));
							v1533 = 12 + 14;
						end
						if (v1533 == (77 - 45)) then
							v76[v78[1875 - (674 + 1199)]] = v60[v78[3 + 0]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v1538 = v78[5 - 3];
							v1537 = v76[v78[3]];
							v76[v1538 + 1] = v1537;
							v76[v1538] = v1537[v78[16 - 12]];
							v70 = v70 + 1 + 0;
							v1533 = 478 - (92 + 353);
						end
						if ((4049 == 4049) and (v1533 == (31 + 3))) then
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v1538 = v78[3 - 1];
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + (2 - 1), v78[2 + 1])));
							v71 = (v1536 + v1538) - 1;
							v1534 = 0 - 0;
							for v2512 = v1538, v71 do
								v1534 = v1534 + (1 - 0);
								v76[v2512] = v1535[v1534];
							end
							v70 = v70 + (4 - 3);
							v1533 = 31 + 4;
						end
						if (v1533 == (71 - 35)) then
							v1538 = v78[267 - (34 + 231)];
							v76[v1538] = v76[v1538](v13(v76, v1538 + (1318 - (930 + 387)), v71));
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v1538 = v78[2 + 0];
							v76[v1538] = v76[v1538]();
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v1533 = 734 - (389 + 308);
						end
						if (v1533 == (12 - 7)) then
							v1537 = v76[v78[6 - 3]];
							v76[v1538 + (2 - 1)] = v1537;
							v76[v1538] = v1537[v78[2 + 2]];
							v70 = v70 + (323 - (125 + 197));
							v78 = v66[v70];
							v76[v78[999 - (339 + 658)]] = v76[v78[7 - 4]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1533 = 11 - 5;
						end
						if (v1533 == (1367 - (743 + 605))) then
							v76[v78[2 + 0]] = v60[v78[3]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1538 = v78[1 + 1];
							v1537 = v76[v78[11 - 8]];
							v76[v1538 + (2 - 1)] = v1537;
							v76[v1538] = v1537[v78[3 + 1]];
							v70 = v70 + 1;
							v1533 = 20;
						end
						if ((v1533 == (290 - (197 + 52))) or (3154 >= 3765)) then
							for v2515 = v1538, v71 do
								v1534 = v1534 + 1;
								v76[v2515] = v1535[v1534];
							end
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v1538 = v78[2];
							v76[v1538] = v76[v1538](v13(v76, v1538 + (2 - 1), v71));
							break;
						end
						if (v1533 == 7) then
							v71 = (v1536 + v1538) - (1 + 0);
							v1534 = 0 + 0;
							for v2518 = v1538, v71 do
								local v2519 = 0 - 0;
								while true do
									if (v2519 == (0 - 0)) then
										v1534 = v1534 + (2 - 1);
										v76[v2518] = v1535[v1534];
										break;
									end
								end
							end
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v1538 = v78[2 - 0];
							v76[v1538] = v76[v1538](v13(v76, v1538 + (1098 - (97 + 1000)), v71));
							v70 = v70 + 1;
							v1533 = 28 - 20;
						end
						if ((1880 - (143 + 1702)) == v1533) then
							v78 = v66[v70];
							v1538 = v78[3 - 1];
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + (370 - (40 + 329)), v71)));
							v71 = (v1536 + v1538) - (1 + 0);
							v1534 = 0 + 0;
							for v2520 = v1538, v71 do
								v1534 = v1534 + 1;
								v76[v2520] = v1535[v1534];
							end
							v70 = v70 + 1;
							v78 = v66[v70];
							v1533 = 36;
						end
						if (v1533 == (30 - 10)) then
							v78 = v66[v70];
							v76[v78[1 + 1]] = v76[v78[3]];
							v70 = v70 + (66 - (9 + 56));
							v78 = v66[v70];
							v76[v78[586 - (531 + 53)]] = v78[3];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v76[v78[775 - (89 + 684)]] = v78[3 + 0];
							v1533 = 7 + 14;
						end
						if (v1533 == (3 + 5)) then
							v78 = v66[v70];
							v76[v78[2 - 0]] = v60[v78[3 + 0]];
							v70 = v70 + 1;
							v78 = v66[v70];
							v1538 = v78[2 + 0];
							v1537 = v76[v78[616 - (238 + 375)]];
							v76[v1538 + 1] = v1537;
							v76[v1538] = v1537[v78[4 + 0]];
							v1533 = 9;
						end
						if (v1533 == 10) then
							v76[v78[2 - 0]] = v78[3 + 0];
							v70 = v70 + (2 - 1);
							v78 = v66[v70];
							v1538 = v78[5 - 3];
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + (2 - 1), v78[6 - 3])));
							v71 = (v1536 + v1538) - (3 - 2);
							v1534 = 0;
							for v2523 = v1538, v71 do
								local v2524 = 0 - 0;
								while true do
									if (v2524 == (0 + 0)) then
										v1534 = v1534 + 1 + 0;
										v76[v2523] = v1535[v1534];
										break;
									end
								end
							end
							v1533 = 6 + 5;
						end
						if ((477 - (428 + 34)) == v1533) then
							v76[v1538] = v76[v1538](v13(v76, v1538 + 1 + 0, v71));
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v76[v78[4 - 2]] = v60[v78[6 - 3]];
							v70 = v70 + (919 - (223 + 695));
							v78 = v66[v70];
							v1538 = v78[6 - 4];
							v1537 = v76[v78[514 - (329 + 182)]];
							v1533 = 3 + 13;
						end
						if (v1533 == (51 - 21)) then
							v71 = (v1536 + v1538) - 1;
							v1534 = 0 + 0;
							for v2525 = v1538, v71 do
								local v2526 = 0 + 0;
								while true do
									if (v2526 == (0 + 0)) then
										v1534 = v1534 + (1 - 0);
										v76[v2525] = v1535[v1534];
										break;
									end
								end
							end
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v1538 = v78[2];
							v76[v1538] = v76[v1538](v13(v76, v1538 + 1, v71));
							v70 = v70 + (1201 - (177 + 1023));
							v1533 = 62 - 31;
						end
						if ((198 == 198) and ((8 + 21) == v1533)) then
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + (2 - 1), v78[3])));
							v71 = (v1536 + v1538) - (1466 - (120 + 1345));
							v1534 = 337 - (8 + 329);
							for v2527 = v1538, v71 do
								v1534 = v1534 + (126 - (19 + 106));
								v76[v2527] = v1535[v1534];
							end
							v70 = v70 + (3 - 2);
							v78 = v66[v70];
							v1538 = v78[2];
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + (1 - 0), v71)));
							v1533 = 30 + 0;
						end
						if (v1533 == (76 - 50)) then
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[2]] = v60[v78[7 - 4]];
							v70 = v70 + (3 - 2);
							v78 = v66[v70];
							v76[v78[2]] = v60[v78[6 - 3]];
							v70 = v70 + 1 + 0;
							v78 = v66[v70];
							v1533 = 1530 - (957 + 546);
						end
						if ((v1533 == (58 - 44)) or (77 > 417)) then
							v1538 = v78[1 + 1];
							v1535, v1536 = v69(v76[v1538](v13(v76, v1538 + 1 + 0, v78[2 + 1])));
							v71 = (v1536 + v1538) - (1 + 0);
							v1534 = 703 - (227 + 476);
							for v2530 = v1538, v71 do
								v1534 = v1534 + (1 - 0);
								v76[v2530] = v1535[v1534];
							end
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v1538 = v78[2];
							v1533 = 21 - 6;
						end
						if (v1533 == (19 - 8)) then
							v70 = v70 + (1 - 0);
							v78 = v66[v70];
							v1538 = v78[956 - (166 + 788)];
							v76[v1538] = v76[v1538](v13(v76, v1538 + (987 - (21 + 965)), v71));
							v70 = v70 + 1;
							v78 = v66[v70];
							v76[v78[698 - (127 + 569)]] = v60[v78[3 + 0]];
							v70 = v70 + 1 + 0;
							v1533 = 5 + 7;
						end
					end
				else
					v70 = v78[4 - 1];
				end
				v70 = v70 + 1 + 0;
			end
		end;
	end
	return v29(v28(), {}, v17)(...);
end
return v15("LOL!", v9(), ...);